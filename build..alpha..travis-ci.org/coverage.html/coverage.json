{"/home/travis/build/npmtest/node-npmtest-limdu/test.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/test.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":1,"12":1,"13":1,"14":1,"15":2,"16":2,"17":2,"18":2,"19":1,"20":1,"21":2,"22":2,"23":2,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":2,"40":2,"41":1,"42":2,"43":2,"44":1,"45":2,"46":2,"47":1,"48":2,"49":2,"50":1,"51":1,"52":1,"53":1,"54":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1],"10":[1,1,1],"11":[1,1],"12":[1,1],"13":[1,1],"14":[1,1],"15":[1,1],"16":[1,1],"17":[1,1]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":1,"7":1,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":5},"end":{"line":61,"column":17}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":5},"end":{"line":82,"column":17}}},"6":{"name":"(anonymous_6)","line":91,"loc":{"start":{"line":91,"column":77},"end":{"line":94,"column":10}}},"7":{"name":"(anonymous_7)","line":112,"loc":{"start":{"line":112,"column":83},"end":{"line":115,"column":10}},"skip":true},"8":{"name":"(anonymous_8)","line":123,"loc":{"start":{"line":123,"column":77},"end":{"line":126,"column":10}},"skip":true},"9":{"name":"(anonymous_9)","line":139,"loc":{"start":{"line":139,"column":12},"end":{"line":139,"column":40}},"skip":true},"10":{"name":"(anonymous_10)","line":147,"loc":{"start":{"line":147,"column":77},"end":{"line":150,"column":10}},"skip":true},"11":{"name":"(anonymous_11)","line":158,"loc":{"start":{"line":158,"column":83},"end":{"line":161,"column":10}},"skip":true},"12":{"name":"(anonymous_12)","line":169,"loc":{"start":{"line":169,"column":79},"end":{"line":172,"column":10}},"skip":true},"13":{"name":"(anonymous_13)","line":180,"loc":{"start":{"line":180,"column":75},"end":{"line":183,"column":10}},"skip":true}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":195,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":56,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":40,"column":8},"end":{"line":53,"column":9}},"11":{"start":{"line":43,"column":12},"end":{"line":46,"column":14}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":18}},"13":{"start":{"line":50,"column":12},"end":{"line":51,"column":46}},"14":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"16":{"start":{"line":61,"column":4},"end":{"line":63,"column":9}},"17":{"start":{"line":62,"column":8},"end":{"line":62,"column":15}},"18":{"start":{"line":64,"column":4},"end":{"line":77,"column":5}},"19":{"start":{"line":70,"column":8},"end":{"line":70,"column":14}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"21":{"start":{"line":82,"column":4},"end":{"line":84,"column":9}},"22":{"start":{"line":83,"column":8},"end":{"line":83,"column":15}},"23":{"start":{"line":85,"column":4},"end":{"line":194,"column":5}},"24":{"start":{"line":91,"column":8},"end":{"line":99,"column":10}},"25":{"start":{"line":98,"column":12},"end":{"line":98,"column":35}},"26":{"start":{"line":102,"column":8},"end":{"line":104,"column":63}},"27":{"start":{"line":105,"column":8},"end":{"line":105,"column":14}},"28":{"start":{"line":112,"column":8},"end":{"line":121,"column":10},"skip":true},"29":{"start":{"line":119,"column":12},"end":{"line":119,"column":55},"skip":true},"30":{"start":{"line":120,"column":12},"end":{"line":120,"column":48},"skip":true},"31":{"start":{"line":123,"column":8},"end":{"line":136,"column":10},"skip":true},"32":{"start":{"line":130,"column":12},"end":{"line":130,"column":76},"skip":true},"33":{"start":{"line":131,"column":12},"end":{"line":131,"column":73},"skip":true},"34":{"start":{"line":132,"column":12},"end":{"line":132,"column":74},"skip":true},"35":{"start":{"line":133,"column":12},"end":{"line":133,"column":79},"skip":true},"36":{"start":{"line":134,"column":12},"end":{"line":134,"column":25},"skip":true},"37":{"start":{"line":135,"column":12},"end":{"line":135,"column":45},"skip":true},"38":{"start":{"line":138,"column":8},"end":{"line":145,"column":14},"skip":true},"39":{"start":{"line":143,"column":16},"end":{"line":143,"column":29},"skip":true},"40":{"start":{"line":144,"column":16},"end":{"line":144,"column":55},"skip":true},"41":{"start":{"line":147,"column":8},"end":{"line":156,"column":10},"skip":true},"42":{"start":{"line":154,"column":12},"end":{"line":154,"column":25},"skip":true},"43":{"start":{"line":155,"column":12},"end":{"line":155,"column":45},"skip":true},"44":{"start":{"line":158,"column":8},"end":{"line":167,"column":10},"skip":true},"45":{"start":{"line":165,"column":12},"end":{"line":165,"column":25},"skip":true},"46":{"start":{"line":166,"column":12},"end":{"line":166,"column":48},"skip":true},"47":{"start":{"line":169,"column":8},"end":{"line":178,"column":10},"skip":true},"48":{"start":{"line":176,"column":12},"end":{"line":176,"column":25},"skip":true},"49":{"start":{"line":177,"column":12},"end":{"line":177,"column":46},"skip":true},"50":{"start":{"line":180,"column":8},"end":{"line":189,"column":10},"skip":true},"51":{"start":{"line":187,"column":12},"end":{"line":187,"column":94},"skip":true},"52":{"start":{"line":188,"column":12},"end":{"line":188,"column":48},"skip":true},"53":{"start":{"line":192,"column":8},"end":{"line":192,"column":35},"skip":true},"54":{"start":{"line":193,"column":8},"end":{"line":193,"column":14},"skip":true}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":40,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":47,"column":18}},{"start":{"line":49,"column":8},"end":{"line":52,"column":18}}]},"5":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":44}},{"start":{"line":44,"column":48},"end":{"line":44,"column":66}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":21},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":72}}]},"7":{"line":64,"type":"switch","locations":[{"start":{"line":69,"column":4},"end":{"line":70,"column":14}},{"start":{"line":75,"column":4},"end":{"line":76,"column":14}}]},"8":{"line":85,"type":"switch","locations":[{"start":{"line":90,"column":4},"end":{"line":105,"column":14}},{"start":{"line":111,"column":4},"end":{"line":193,"column":14},"skip":true}]},"9":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":42},"end":{"line":91,"column":73}},{"start":{"line":91,"column":77},"end":{"line":99,"column":9}}]},"10":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":18},"end":{"line":102,"column":32}},{"start":{"line":103,"column":12},"end":{"line":103,"column":53}},{"start":{"line":104,"column":12},"end":{"line":104,"column":61}}]},"11":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":45},"end":{"line":112,"column":79},"skip":true},{"start":{"line":112,"column":83},"end":{"line":121,"column":9},"skip":true}]},"12":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":42},"end":{"line":123,"column":73},"skip":true},{"start":{"line":123,"column":77},"end":{"line":136,"column":9},"skip":true}]},"13":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":48},"end":{"line":138,"column":85},"skip":true},{"start":{"line":139,"column":12},"end":{"line":145,"column":13},"skip":true}]},"14":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":42},"end":{"line":147,"column":73},"skip":true},{"start":{"line":147,"column":77},"end":{"line":156,"column":9},"skip":true}]},"15":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":45},"end":{"line":158,"column":79},"skip":true},{"start":{"line":158,"column":83},"end":{"line":167,"column":9},"skip":true}]},"16":{"line":169,"type":"binary-expr","locations":[{"start":{"line":169,"column":43},"end":{"line":169,"column":75},"skip":true},{"start":{"line":169,"column":79},"end":{"line":178,"column":9},"skip":true}]},"17":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":41},"end":{"line":180,"column":71},"skip":true},{"start":{"line":180,"column":75},"end":{"line":189,"column":9},"skip":true}]}},"code":["/* istanbul instrument in package npmtest_limdu */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        switch (local.modeJs) {","        // re-init local from window.local","        case 'browser':","            local = local.global.utility2.objectSetDefault(","                local.global.utility2_rollup || local.global.local,","                local.global.utility2","            );","            break;","        // re-init local from example.js","        case 'node':","            local = (local.global.utility2_rollup || require('utility2'))","                .requireExampleJsFromReadme();","            break;","        }","        // export local","        local.global.local = local;","    }());","","","","    // run shared js-env code - function","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - function","    case 'browser':","        break;","","","","    // run node js-env code - function","    case 'node':","        break;","    }","","","","    // run shared js-env code - post-init","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - post-init","    case 'browser':","        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (","            options,","            onError","        ) {","        /*","         * this function will test browsers's null-case handling-behavior-behavior","         */","            onError(null, options);","        };","","        // run tests","        local.nop(local.modeTest &&","            document.querySelector('#testRunButton1') &&","            document.querySelector('#testRunButton1').click());","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApidoc's default handling-behavior-behavior","         */","            options = { modulePathList: module.paths };","            local.buildApidoc(options, onError);","        };","","        local.testCase_buildApp_default = local.testCase_buildApp_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApp's default handling-behavior-behavior","         */","            local.testCase_buildReadme_default(options, local.onErrorThrow);","            local.testCase_buildLib_default(options, local.onErrorThrow);","            local.testCase_buildTest_default(options, local.onErrorThrow);","            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);","            options = [];","            local.buildApp(options, onError);","        };","","        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||","            function (options, onError) {","            /*","             * this function will test buildCustomOrg's default handling-behavior","             */","                options = {};","                local.buildCustomOrg(options, onError);","            };","","        local.testCase_buildLib_default = local.testCase_buildLib_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildLib's default handling-behavior","         */","            options = {};","            local.buildLib(options, onError);","        };","","        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildReadme's default handling-behavior-behavior","         */","            options = {};","            local.buildReadme(options, onError);","        };","","        local.testCase_buildTest_default = local.testCase_buildTest_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildTest's default handling-behavior","         */","            options = {};","            local.buildTest(options, onError);","        };","","        local.testCase_webpage_default = local.testCase_webpage_default || function (","            options,","            onError","        ) {","        /*","         * this function will test webpage's default handling-behavior","         */","            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };","            local.browserTest(options, onError);","        };","","        // run test-server","        local.testRunServer(local);","        break;","    }","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"40":2,"43":1,"47":1,"50":1,"52":1,"55":2,"61":2,"62":2,"64":2,"70":1,"76":1,"82":2,"83":2,"85":2,"91":1,"98":1,"102":1,"105":1,"112":1,"119":1,"120":1,"123":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"138":1,"143":2,"144":2,"147":1,"154":2,"155":2,"158":1,"165":2,"166":2,"169":1,"176":2,"177":2,"180":1,"187":1,"188":1,"192":1,"193":1}},"/home/travis/build/npmtest/node-npmtest-limdu/lib.npmtest_limdu.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/lib.npmtest_limdu.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1]},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":53,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":52,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":41,"column":8},"end":{"line":41,"column":54}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":50}},"12":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":56}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"15":{"start":{"line":49,"column":12},"end":{"line":49,"column":49}},"16":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":44}},{"start":{"line":41,"column":48},"end":{"line":41,"column":53}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]}},"code":["/* istanbul instrument in package npmtest_limdu */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || local;","        // init lib","        local.local = local.npmtest_limdu = local;","        // init exports","        if (local.modeJs === 'browser') {","            local.global.utility2_npmtest_limdu = local;","        } else {","            module.exports = local;","            module.exports.__dirname = __dirname;","            module.exports.module = module;","        }","    }());","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"41":2,"43":2,"45":2,"46":1,"48":1,"49":1,"50":1}},"/home/travis/build/npmtest/node-npmtest-limdu/example.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/example.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":2,"15":2,"16":2,"17":2,"18":2,"19":0,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":0,"27":0,"28":1,"29":1,"30":2,"31":0,"32":0,"33":0,"34":1,"35":2,"36":2,"37":3,"38":3,"39":3,"40":3,"41":0,"42":3,"43":3,"44":3,"45":1,"46":3,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":1,"59":6,"60":6,"61":1,"62":2,"63":0,"64":2,"65":1,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1],"6":[1,1],"7":[2,0],"8":[2,1,1,1,1,1],"9":[0,2,0],"10":[1,1],"11":[2,1,1],"12":[1,0],"13":[0,2],"14":[2,0,0,0,0,0,0],"15":[0,3],"16":[3,0],"17":[1,1],"18":[0,1],"19":[1,2,0,2],"20":[1,0],"21":[1,1],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":3,"8":3,"9":3,"10":1,"11":6,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":1},"end":{"line":26,"column":13}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":5},"end":{"line":33,"column":17}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":36}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":31},"end":{"line":69,"column":48}},"skip":true},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":45}},"skip":true},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":33},"end":{"line":123,"column":48}},"skip":true},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":39}},"skip":true},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":74}},"skip":true},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":45},"end":{"line":143,"column":62}},"skip":true},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":73},"end":{"line":144,"column":92}},"skip":true},"11":{"name":"(anonymous_11)","line":272,"loc":{"start":{"line":272,"column":51},"end":{"line":272,"column":77}},"skip":true},"12":{"name":"(anonymous_12)","line":315,"loc":{"start":{"line":315,"column":32},"end":{"line":315,"column":61}},"skip":true}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":326,"column":5}},"2":{"start":{"line":28,"column":4},"end":{"line":28,"column":14}},"3":{"start":{"line":33,"column":4},"end":{"line":60,"column":9}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":19}},"5":{"start":{"line":37,"column":8},"end":{"line":49,"column":13}},"6":{"start":{"line":38,"column":12},"end":{"line":48,"column":13}},"7":{"start":{"line":39,"column":16},"end":{"line":42,"column":30}},"8":{"start":{"line":44,"column":16},"end":{"line":47,"column":27}},"9":{"start":{"line":51,"column":8},"end":{"line":53,"column":21}},"10":{"start":{"line":55,"column":8},"end":{"line":57,"column":45}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"12":{"start":{"line":61,"column":4},"end":{"line":325,"column":5}},"13":{"start":{"line":69,"column":8},"end":{"line":121,"column":10},"skip":true},"14":{"start":{"line":70,"column":12},"end":{"line":88,"column":13},"skip":true},"15":{"start":{"line":76,"column":16},"end":{"line":87,"column":19},"skip":true},"16":{"start":{"line":79,"column":20},"end":{"line":86,"column":21},"skip":true},"17":{"start":{"line":82,"column":24},"end":{"line":82,"column":43},"skip":true},"18":{"start":{"line":83,"column":24},"end":{"line":83,"column":30},"skip":true},"19":{"start":{"line":85,"column":24},"end":{"line":85,"column":49},"skip":true},"20":{"start":{"line":89,"column":12},"end":{"line":107,"column":13},"skip":true},"21":{"start":{"line":92,"column":16},"end":{"line":102,"column":17},"skip":true},"22":{"start":{"line":93,"column":20},"end":{"line":93,"column":86},"skip":true},"23":{"start":{"line":94,"column":20},"end":{"line":95,"column":45},"skip":true},"24":{"start":{"line":96,"column":20},"end":{"line":96,"column":42},"skip":true},"25":{"start":{"line":97,"column":20},"end":{"line":97,"column":48},"skip":true},"26":{"start":{"line":100,"column":20},"end":{"line":100,"column":85},"skip":true},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":96},"skip":true},"28":{"start":{"line":103,"column":16},"end":{"line":103,"column":22},"skip":true},"29":{"start":{"line":106,"column":16},"end":{"line":106,"column":22},"skip":true},"30":{"start":{"line":108,"column":12},"end":{"line":120,"column":13},"skip":true},"31":{"start":{"line":114,"column":16},"end":{"line":119,"column":17},"skip":true},"32":{"start":{"line":116,"column":20},"end":{"line":116,"column":78},"skip":true},"33":{"start":{"line":118,"column":20},"end":{"line":118,"column":47},"skip":true},"34":{"start":{"line":123,"column":8},"end":{"line":141,"column":11},"skip":true},"35":{"start":{"line":124,"column":12},"end":{"line":124,"column":54},"skip":true},"36":{"start":{"line":125,"column":12},"end":{"line":140,"column":14},"skip":true},"37":{"start":{"line":126,"column":16},"end":{"line":126,"column":28},"skip":true},"38":{"start":{"line":127,"column":16},"end":{"line":127,"column":69},"skip":true},"39":{"start":{"line":128,"column":16},"end":{"line":128,"column":75},"skip":true},"40":{"start":{"line":129,"column":16},"end":{"line":131,"column":17},"skip":true},"41":{"start":{"line":130,"column":20},"end":{"line":130,"column":27},"skip":true},"42":{"start":{"line":133,"column":16},"end":{"line":137,"column":36},"skip":true},"43":{"start":{"line":134,"column":20},"end":{"line":136,"column":55},"skip":true},"44":{"start":{"line":139,"column":16},"end":{"line":139,"column":57},"skip":true},"45":{"start":{"line":143,"column":8},"end":{"line":147,"column":11},"skip":true},"46":{"start":{"line":144,"column":12},"end":{"line":146,"column":15},"skip":true},"47":{"start":{"line":145,"column":16},"end":{"line":145,"column":70},"skip":true},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":31},"skip":true},"49":{"start":{"line":150,"column":8},"end":{"line":150,"column":14},"skip":true},"50":{"start":{"line":158,"column":8},"end":{"line":158,"column":31},"skip":true},"51":{"start":{"line":160,"column":8},"end":{"line":160,"column":33},"skip":true},"52":{"start":{"line":161,"column":8},"end":{"line":161,"column":37},"skip":true},"53":{"start":{"line":162,"column":8},"end":{"line":162,"column":35},"skip":true},"54":{"start":{"line":164,"column":8},"end":{"line":164,"column":50},"skip":true},"55":{"start":{"line":166,"column":8},"end":{"line":256,"column":2},"skip":true},"56":{"start":{"line":258,"column":8},"end":{"line":286,"column":9},"skip":true},"57":{"start":{"line":259,"column":12},"end":{"line":269,"column":14},"skip":true},"58":{"start":{"line":271,"column":12},"end":{"line":285,"column":19},"skip":true},"59":{"start":{"line":274,"column":20},"end":{"line":274,"column":35},"skip":true},"60":{"start":{"line":275,"column":20},"end":{"line":284,"column":21},"skip":true},"61":{"start":{"line":277,"column":24},"end":{"line":277,"column":64},"skip":true},"62":{"start":{"line":279,"column":24},"end":{"line":279,"column":40},"skip":true},"63":{"start":{"line":281,"column":24},"end":{"line":281,"column":40},"skip":true},"64":{"start":{"line":283,"column":24},"end":{"line":283,"column":39},"skip":true},"65":{"start":{"line":288,"column":8},"end":{"line":290,"column":9},"skip":true},"66":{"start":{"line":289,"column":12},"end":{"line":289,"column":18},"skip":true},"67":{"start":{"line":291,"column":8},"end":{"line":293,"column":54},"skip":true},"68":{"start":{"line":296,"column":8},"end":{"line":301,"column":37},"skip":true},"69":{"start":{"line":303,"column":8},"end":{"line":303,"column":82},"skip":true},"70":{"start":{"line":306,"column":8},"end":{"line":308,"column":9},"skip":true},"71":{"start":{"line":307,"column":12},"end":{"line":307,"column":82},"skip":true},"72":{"start":{"line":310,"column":8},"end":{"line":312,"column":9},"skip":true},"73":{"start":{"line":311,"column":12},"end":{"line":311,"column":18},"skip":true},"74":{"start":{"line":313,"column":8},"end":{"line":313,"column":54},"skip":true},"75":{"start":{"line":314,"column":8},"end":{"line":314,"column":69},"skip":true},"76":{"start":{"line":315,"column":8},"end":{"line":323,"column":36},"skip":true},"77":{"start":{"line":316,"column":12},"end":{"line":316,"column":61},"skip":true},"78":{"start":{"line":317,"column":12},"end":{"line":320,"column":13},"skip":true},"79":{"start":{"line":318,"column":16},"end":{"line":318,"column":75},"skip":true},"80":{"start":{"line":319,"column":16},"end":{"line":319,"column":23},"skip":true},"81":{"start":{"line":321,"column":12},"end":{"line":321,"column":38},"skip":true},"82":{"start":{"line":322,"column":12},"end":{"line":322,"column":27},"skip":true},"83":{"start":{"line":324,"column":8},"end":{"line":324,"column":14},"skip":true}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":23},"end":{"line":39,"column":62}},{"start":{"line":40,"column":20},"end":{"line":40,"column":70}},{"start":{"line":41,"column":20},"end":{"line":41,"column":71}},{"start":{"line":42,"column":20},"end":{"line":42,"column":29}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":23},"end":{"line":44,"column":37}},{"start":{"line":45,"column":20},"end":{"line":45,"column":61}},{"start":{"line":46,"column":20},"end":{"line":46,"column":70}},{"start":{"line":47,"column":20},"end":{"line":47,"column":26}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":52,"column":14},"end":{"line":52,"column":20}},{"start":{"line":53,"column":14},"end":{"line":53,"column":20}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":44}},{"start":{"line":55,"column":49},"end":{"line":57,"column":43}}]},"5":{"line":55,"type":"cond-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":49}},{"start":{"line":57,"column":14},"end":{"line":57,"column":43}}]},"6":{"line":61,"type":"switch","locations":[{"start":{"line":68,"column":4},"end":{"line":150,"column":14},"skip":true},{"start":{"line":156,"column":4},"end":{"line":324,"column":14},"skip":true}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true},{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true}]},"8":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":22},"skip":true},{"start":{"line":70,"column":27},"end":{"line":70,"column":32},"skip":true},{"start":{"line":71,"column":20},"end":{"line":71,"column":39},"skip":true},{"start":{"line":72,"column":20},"end":{"line":72,"column":49},"skip":true},{"start":{"line":73,"column":20},"end":{"line":73,"column":58},"skip":true},{"start":{"line":74,"column":20},"end":{"line":74,"column":69},"skip":true}]},"9":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":33},"skip":true},{"start":{"line":81,"column":20},"end":{"line":83,"column":30},"skip":true},{"start":{"line":84,"column":20},"end":{"line":85,"column":49},"skip":true}]},"10":{"line":89,"type":"switch","locations":[{"start":{"line":90,"column":12},"end":{"line":103,"column":22},"skip":true},{"start":{"line":105,"column":12},"end":{"line":106,"column":22},"skip":true}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":25},"skip":true},{"start":{"line":89,"column":29},"end":{"line":89,"column":48},"skip":true},{"start":{"line":89,"column":52},"end":{"line":89,"column":74},"skip":true}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true},{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true}]},"13":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true},{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true}]},"14":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":61},"skip":true},{"start":{"line":108,"column":66},"end":{"line":108,"column":72},"skip":true},{"start":{"line":108,"column":77},"end":{"line":108,"column":82},"skip":true},{"start":{"line":109,"column":20},"end":{"line":109,"column":39},"skip":true},{"start":{"line":110,"column":20},"end":{"line":110,"column":49},"skip":true},{"start":{"line":111,"column":20},"end":{"line":111,"column":58},"skip":true},{"start":{"line":112,"column":20},"end":{"line":112,"column":68},"skip":true}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true},{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true}]},"16":{"line":134,"type":"cond-expr","locations":[{"start":{"line":135,"column":26},"end":{"line":135,"column":29},"skip":true},{"start":{"line":136,"column":26},"end":{"line":136,"column":54},"skip":true}]},"17":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":27},"end":{"line":164,"column":43},"skip":true},{"start":{"line":164,"column":47},"end":{"line":164,"column":49},"skip":true}]},"18":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true},{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true}]},"19":{"line":275,"type":"switch","locations":[{"start":{"line":276,"column":20},"end":{"line":277,"column":64},"skip":true},{"start":{"line":278,"column":20},"end":{"line":279,"column":40},"skip":true},{"start":{"line":280,"column":20},"end":{"line":281,"column":40},"skip":true},{"start":{"line":282,"column":20},"end":{"line":283,"column":39},"skip":true}]},"20":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true},{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true}]},"21":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":40},"skip":true},{"start":{"line":288,"column":44},"end":{"line":288,"column":67},"skip":true}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":12},"end":{"line":292,"column":50},"skip":true},{"start":{"line":293,"column":12},"end":{"line":293,"column":53},"skip":true}]},"23":{"line":297,"type":"binary-expr","locations":[{"start":{"line":297,"column":12},"end":{"line":297,"column":63},"skip":true},{"start":{"line":298,"column":12},"end":{"line":301,"column":36},"skip":true}]},"24":{"line":303,"type":"binary-expr","locations":[{"start":{"line":303,"column":43},"end":{"line":303,"column":75},"skip":true},{"start":{"line":303,"column":79},"end":{"line":303,"column":81},"skip":true}]},"25":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true},{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true}]},"26":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true},{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true}]},"27":{"line":313,"type":"binary-expr","locations":[{"start":{"line":313,"column":27},"end":{"line":313,"column":43},"skip":true},{"start":{"line":313,"column":47},"end":{"line":313,"column":53},"skip":true}]},"28":{"line":317,"type":"if","locations":[{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true},{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true}]}},"code":["/*","example.js","","quickstart example","","instruction","    1. save this script as example.js","    2. run the shell command:","        $ npm install npmtest-limdu && PORT=8081 node example.js","    3. play with the browser-demo on http://127.0.0.1:8081","*/","","","","/* istanbul instrument in package npmtest_limdu */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || (local.modeJs === 'browser'","            ? local.global.utility2_npmtest_limdu","            : global.utility2_moduleExports);","        // export local","        local.global.local = local;","    }());","    switch (local.modeJs) {","","","","    // post-init","    // run browser js-env code - post-init","    /* istanbul ignore next */","    case 'browser':","        local.testRunBrowser = function (event) {","            if (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('onreset'))) {","                // reset output","                Array.from(","                    document.querySelectorAll('body > .resettable')","                ).forEach(function (element) {","                    switch (element.tagName) {","                    case 'INPUT':","                    case 'TEXTAREA':","                        element.value = '';","                        break;","                    default:","                        element.textContent = '';","                    }","                });","            }","            switch (event && event.currentTarget && event.currentTarget.id) {","            case 'testRunButton1':","                // show tests","                if (document.querySelector('#testReportDiv1').style.display === 'none') {","                    document.querySelector('#testReportDiv1').style.display = 'block';","                    document.querySelector('#testRunButton1').textContent =","                        'hide internal test';","                    local.modeTest = true;","                    local.testRunDefault(local);","                // hide tests","                } else {","                    document.querySelector('#testReportDiv1').style.display = 'none';","                    document.querySelector('#testRunButton1').textContent = 'run internal test';","                }","                break;","            // custom-case","            default:","                break;","            }","            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('oneval')))) {","                // try to eval input-code","                try {","                    /*jslint evil: true*/","                    eval(document.querySelector('#inputTextareaEval1').value);","                } catch (errorCaught) {","                    console.error(errorCaught);","                }","            }","        };","        // log stderr and stdout to #outputTextareaStdout1","        ['error', 'log'].forEach(function (key) {","            console[key + '_original'] = console[key];","            console[key] = function () {","                var element;","                console[key + '_original'].apply(console, arguments);","                element = document.querySelector('#outputTextareaStdout1');","                if (!element) {","                    return;","                }","                // append text to #outputTextareaStdout1","                element.value += Array.from(arguments).map(function (arg) {","                    return typeof arg === 'string'","                        ? arg","                        : JSON.stringify(arg, null, 4);","                }).join(' ') + '\\n';","                // scroll textarea to bottom","                element.scrollTop = element.scrollHeight;","            };","        });","        // init event-handling","        ['change', 'click', 'keyup'].forEach(function (event) {","            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {","                element.addEventListener(event, local.testRunBrowser);","            });","        });","        // run tests","        local.testRunBrowser();","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        // export local","        module.exports = local;","        // require modules","        local.fs = require('fs');","        local.http = require('http');","        local.url = require('url');","        // init assets","        local.assetsDict = local.assetsDict || {};","        /* jslint-ignore-begin */","        local.assetsDict['/assets.index.template.html'] = '\\","<!doctype html>\\n\\","<html lang=\"en\">\\n\\","<head>\\n\\","<meta charset=\"UTF-8\">\\n\\","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\","<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\","<style>\\n\\","/*csslint\\n\\","    box-sizing: false,\\n\\","    universal-selector: false\\n\\","*/\\n\\","* {\\n\\","    box-sizing: border-box;\\n\\","}\\n\\","body {\\n\\","    background: #dde;\\n\\","    font-family: Arial, Helvetica, sans-serif;\\n\\","    margin: 2rem;\\n\\","}\\n\\","body > * {\\n\\","    margin-bottom: 1rem;\\n\\","}\\n\\",".utility2FooterDiv {\\n\\","    margin-top: 20px;\\n\\","    text-align: center;\\n\\","}\\n\\","</style>\\n\\","<style>\\n\\","/*csslint\\n\\","*/\\n\\","textarea {\\n\\","    font-family: monospace;\\n\\","    height: 10rem;\\n\\","    width: 100%;\\n\\","}\\n\\","textarea[readonly] {\\n\\","    background: #ddd;\\n\\","}\\n\\","</style>\\n\\","</head>\\n\\","<body>\\n\\","<!-- utility2-comment\\n\\","<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\","utility2-comment -->\\n\\","<h1>\\n\\","<!-- utility2-comment\\n\\","    <a\\n\\","        {{#if env.npm_package_homepage}}\\n\\","        href=\"{{env.npm_package_homepage}}\"\\n\\","        {{/if env.npm_package_homepage}}\\n\\","        target=\"_blank\"\\n\\","    >\\n\\","utility2-comment -->\\n\\","        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\","<!-- utility2-comment\\n\\","    </a>\\n\\","utility2-comment -->\\n\\","</h1>\\n\\","<h3>{{env.npm_package_description}}</h3>\\n\\","<!-- utility2-comment\\n\\","<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\","<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\","<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\","utility2-comment -->\\n\\","\\n\\","\\n\\","\\n\\","<label>stderr and stdout</label>\\n\\","<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\","<!-- utility2-comment\\n\\","{{#if isRollup}}\\n\\","<script src=\"assets.app.js\"></script>\\n\\","{{#unless isRollup}}\\n\\","utility2-comment -->\\n\\","<script src=\"assets.utility2.rollup.js\"></script>\\n\\","<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\","<script src=\"assets.npmtest_limdu.rollup.js\"></script>\\n\\","<script src=\"assets.example.js\"></script>\\n\\","<script src=\"assets.test.js\"></script>\\n\\","<!-- utility2-comment\\n\\","{{/if isRollup}}\\n\\","utility2-comment -->\\n\\","<div class=\"utility2FooterDiv\">\\n\\","    [ this app was created with\\n\\","    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\","    ]\\n\\","</div>\\n\\","</body>\\n\\","</html>\\n\\","';","        /* jslint-ignore-end */","        if (local.templateRender) {","            local.assetsDict['/'] = local.templateRender(","                local.assetsDict['/assets.index.template.html'],","                {","                    env: local.objectSetDefault(local.env, {","                        npm_package_description: 'the greatest app in the world!',","                        npm_package_name: 'my-app',","                        npm_package_nameAlias: 'my_app',","                        npm_package_version: '0.0.1'","                    })","                }","            );","        } else {","            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']","                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {","                    // jslint-hack","                    String(match0);","                    switch (match1) {","                    case 'npm_package_description':","                        return 'the greatest app in the world!';","                    case 'npm_package_name':","                        return 'my-app';","                    case 'npm_package_nameAlias':","                        return 'my_app';","                    case 'npm_package_version':","                        return '0.0.1';","                    }","                });","        }","        // run the cli","        if (local.global.utility2_rollup || module !== require.main) {","            break;","        }","        local.assetsDict['/assets.example.js'] =","            local.assetsDict['/assets.example.js'] ||","            local.fs.readFileSync(__filename, 'utf8');","        // bug-workaround - long $npm_package_buildCustomOrg","        /* jslint-ignore-begin */","        local.assetsDict['/assets.npmtest_limdu.rollup.js'] =","            local.assetsDict['/assets.npmtest_limdu.rollup.js'] ||","            local.fs.readFileSync(","                local.npmtest_limdu.__dirname + '/lib.npmtest_limdu.js',","                'utf8'","            ).replace((/^#!/), '//');","        /* jslint-ignore-end */","        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';","        // if $npm_config_timeout_exit exists,","        // then exit this process after $npm_config_timeout_exit ms","        if (Number(process.env.npm_config_timeout_exit)) {","            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));","        }","        // start server","        if (local.global.utility2_serverHttp1) {","            break;","        }","        process.env.PORT = process.env.PORT || '8081';","        console.error('server starting on port ' + process.env.PORT);","        local.http.createServer(function (request, response) {","            request.urlParsed = local.url.parse(request.url);","            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {","                response.end(local.assetsDict[request.urlParsed.pathname]);","                return;","            }","            response.statusCode = 404;","            response.end();","        }).listen(process.env.PORT);","        break;","    }","}());",""],"l":{"26":2,"28":2,"33":2,"35":2,"37":2,"38":2,"39":2,"44":1,"51":2,"55":2,"59":2,"61":2,"69":1,"70":2,"76":2,"79":2,"82":2,"83":2,"85":1,"89":2,"92":1,"93":1,"94":1,"96":1,"97":1,"100":1,"101":1,"103":1,"106":1,"108":2,"114":1,"116":1,"118":1,"123":1,"124":2,"125":2,"126":3,"127":3,"128":3,"129":3,"130":1,"133":3,"134":3,"139":3,"143":1,"144":3,"145":1,"149":1,"150":1,"158":1,"160":1,"161":1,"162":1,"164":1,"166":1,"258":1,"259":1,"271":1,"274":6,"275":6,"277":1,"279":2,"281":1,"283":2,"288":1,"289":1,"291":1,"296":1,"303":1,"306":1,"307":1,"310":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"321":1,"322":1,"324":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":6,"column":1}}},"branchMap":{},"code":["module.exports = {","\tclassifiers: require('./classifiers'),","\tfeatures: require('./features'),","\tformats: require('./formats'),","\tutils: require('./utils'),","}",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/index.js","s":{"1":1,"2":1,"3":11,"4":10,"5":0},"b":{"1":[10,1],"2":[11,10]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":34,"loc":{"start":{"line":34,"column":61},"end":{"line":34,"column":78}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":24,"column":1}},"2":{"start":{"line":32,"column":0},"end":{"line":37,"column":1}},"3":{"start":{"line":33,"column":1},"end":{"line":36,"column":3}},"4":{"start":{"line":34,"column":2},"end":{"line":36,"column":3}},"5":{"start":{"line":35,"column":3},"end":{"line":35,"column":52}}},"branchMap":{"1":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},{"start":{"line":33,"column":1},"end":{"line":33,"column":1}}]},"2":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":5},"end":{"line":33,"column":46}},{"start":{"line":33,"column":50},"end":{"line":33,"column":100}}]}},"code":["module.exports = {","\t// basic classifiers:","\t//NeuralNetwork: require('./brain/lib/neuralnetwork').NeuralNetwork,","\tNeuralNetwork: require('./neural/NeuralNetwork'),","\tBayesian: require('./bayesian/bayesian'),","","\tkNN: require('./kNN/kNN'),","\t","\tSvmJs: require('./svm/SvmJs'),","\tSvmPerf: require('./svm/SvmPerf'),","\tSvmLinear: require('./svm/SvmLinear'),","\t","\t//BayesClassifier: require('./apparatus/lib/apparatus/classifier/bayes_classifier'),","\t//LogisticRegressionClassifier: require('./apparatus/lib/apparatus/classifier/logistic_regression_classifier'),","\tPerceptron: require('./perceptron/PerceptronHash'),","\tWinnow: require('./winnow/WinnowHash'),","","\tDecisionTree: require('./decisiontree/DecisionTree'),","","\tmultilabel: require('./multilabel'),","\t","\t// meta classifier:","\tEnhancedClassifier: require('./EnhancedClassifier'),","}","","//Object.defineProperty(Function.prototype, 'where', {","//\tvalue: function(args) {\treturn this.bind(0,args); }","//});","","","// add a \"classify and log\" method to all classifiers, for demos:","for (var classifierClass in module.exports) {","\tif (module.exports[classifierClass].prototype && module.exports[classifierClass].prototype.classify)","\t\tmodule.exports[classifierClass].prototype.classifyAndLog = function(sample) {","\t\t\tconsole.log(sample+\" is \"+this.classify(sample));","\t\t}","}",""],"l":{"1":1,"32":1,"33":11,"34":10,"35":0}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/neural/NeuralNetwork.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/neural/NeuralNetwork.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":1,"10":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":10,"loc":{"start":{"line":10,"column":38},"end":{"line":10,"column":50}}},"2":{"name":"(anonymous_2)","line":11,"loc":{"start":{"line":11,"column":38},"end":{"line":11,"column":56}}},"3":{"name":"(anonymous_3)","line":12,"loc":{"start":{"line":12,"column":17},"end":{"line":12,"column":33}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":51}},"2":{"start":{"line":10,"column":0},"end":{"line":10,"column":119}},"3":{"start":{"line":10,"column":51},"end":{"line":10,"column":117}},"4":{"start":{"line":11,"column":0},"end":{"line":17,"column":2}},"5":{"start":{"line":12,"column":1},"end":{"line":15,"column":4}},"6":{"start":{"line":13,"column":2},"end":{"line":14,"column":33}},"7":{"start":{"line":14,"column":3},"end":{"line":14,"column":33}},"8":{"start":{"line":16,"column":1},"end":{"line":16,"column":21}},"9":{"start":{"line":18,"column":0},"end":{"line":18,"column":64}},"10":{"start":{"line":20,"column":0},"end":{"line":20,"column":31}}},"branchMap":{"1":{"line":13,"type":"if","locations":[{"start":{"line":13,"column":2},"end":{"line":13,"column":2}},{"start":{"line":13,"column":2},"end":{"line":13,"column":2}}]},"2":{"line":13,"type":"binary-expr","locations":[{"start":{"line":13,"column":6},"end":{"line":13,"column":34}},{"start":{"line":13,"column":38},"end":{"line":13,"column":71}}]}},"code":["/**"," * A wrapper for Heather Arthur's brain.js package: https://github.com/harthur/brain"," *"," * @author Erel Segal-haLevi"," * @since 2013-09-29"," */","","var NeuralNetwork = require('brain').NeuralNetwork;","","NeuralNetwork.prototype.trainOnline = function () {throw new Error(\"NeuralNetwork does not support online training\");}; ","NeuralNetwork.prototype.trainBatch  = function(dataset) {","\tdataset.forEach(function(datum) {","\t\tif (!Array.isArray(datum.output) && !(datum.output instanceof Object))","\t\t\tdatum.output = [datum.output];","\t});","\tthis.train(dataset); ","};","NeuralNetwork.prototype.classify  = NeuralNetwork.prototype.run; ","","module.exports = NeuralNetwork;",""],"l":{"8":1,"10":1,"11":1,"12":0,"13":0,"14":0,"16":0,"18":1,"20":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/bayesian/bayesian.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/bayesian/bayesian.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},"fnMap":{"1":{"name":"(anonymous_1)","line":10,"loc":{"start":{"line":10,"column":15},"end":{"line":10,"column":33}}},"2":{"name":"(anonymous_2)","line":43,"loc":{"start":{"line":43,"column":14},"end":{"line":43,"column":43}}},"3":{"name":"(anonymous_3)","line":52,"loc":{"start":{"line":52,"column":13},"end":{"line":52,"column":28}}},"4":{"name":"(anonymous_4)","line":62,"loc":{"start":{"line":62,"column":11},"end":{"line":62,"column":39}}},"5":{"name":"(anonymous_5)","line":72,"loc":{"start":{"line":72,"column":27},"end":{"line":72,"column":42}}},"6":{"name":"(anonymous_6)","line":87,"loc":{"start":{"line":87,"column":15},"end":{"line":87,"column":34}}},"7":{"name":"(anonymous_7)","line":94,"loc":{"start":{"line":94,"column":29},"end":{"line":94,"column":49}}},"8":{"name":"(anonymous_8)","line":104,"loc":{"start":{"line":104,"column":13},"end":{"line":104,"column":27}}},"9":{"name":"(anonymous_9)","line":116,"loc":{"start":{"line":116,"column":12},"end":{"line":116,"column":28}}},"10":{"name":"(anonymous_10)","line":136,"loc":{"start":{"line":136,"column":9},"end":{"line":136,"column":28}}},"11":{"name":"(anonymous_11)","line":140,"loc":{"start":{"line":140,"column":11},"end":{"line":140,"column":36}}},"12":{"name":"(anonymous_12)","line":144,"loc":{"start":{"line":144,"column":10},"end":{"line":144,"column":29}}},"13":{"name":"(anonymous_13)","line":156,"loc":{"start":{"line":156,"column":11},"end":{"line":156,"column":49}}},"14":{"name":"(anonymous_14)","line":160,"loc":{"start":{"line":160,"column":38},"end":{"line":160,"column":60}}},"15":{"name":"(anonymous_15)","line":170,"loc":{"start":{"line":170,"column":14},"end":{"line":170,"column":47}}},"16":{"name":"(anonymous_16)","line":171,"loc":{"start":{"line":171,"column":31},"end":{"line":171,"column":52}}},"17":{"name":"(anonymous_17)","line":176,"loc":{"start":{"line":176,"column":15},"end":{"line":176,"column":39}}},"18":{"name":"(anonymous_18)","line":181,"loc":{"start":{"line":181,"column":49},"end":{"line":181,"column":70}}},"19":{"name":"(anonymous_19)","line":197,"loc":{"start":{"line":197,"column":16},"end":{"line":197,"column":48}}},"20":{"name":"(anonymous_20)","line":206,"loc":{"start":{"line":206,"column":15},"end":{"line":206,"column":43}}},"21":{"name":"(anonymous_21)","line":210,"loc":{"start":{"line":210,"column":19},"end":{"line":210,"column":36}}},"22":{"name":"(anonymous_22)","line":227,"loc":{"start":{"line":227,"column":16},"end":{"line":227,"column":37}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":32}},"2":{"start":{"line":10,"column":0},"end":{"line":33,"column":1}},"3":{"start":{"line":11,"column":1},"end":{"line":11,"column":24}},"4":{"start":{"line":12,"column":1},"end":{"line":12,"column":44}},"5":{"start":{"line":13,"column":1},"end":{"line":13,"column":53}},"6":{"start":{"line":14,"column":1},"end":{"line":14,"column":50}},"7":{"start":{"line":15,"column":1},"end":{"line":15,"column":35}},"8":{"start":{"line":16,"column":1},"end":{"line":16,"column":39}},"9":{"start":{"line":17,"column":1},"end":{"line":17,"column":81}},"10":{"start":{"line":18,"column":1},"end":{"line":18,"column":85}},"11":{"start":{"line":20,"column":1},"end":{"line":20,"column":53}},"12":{"start":{"line":21,"column":1},"end":{"line":32,"column":2}},"13":{"start":{"line":24,"column":3},"end":{"line":24,"column":89}},"14":{"start":{"line":25,"column":3},"end":{"line":25,"column":9}},"15":{"start":{"line":27,"column":3},"end":{"line":28,"column":50}},"16":{"start":{"line":29,"column":3},"end":{"line":29,"column":9}},"17":{"start":{"line":31,"column":3},"end":{"line":31,"column":69}},"18":{"start":{"line":36,"column":0},"end":{"line":231,"column":1}},"19":{"start":{"line":44,"column":2},"end":{"line":44,"column":59}},"20":{"start":{"line":53,"column":2},"end":{"line":53,"column":26}},"21":{"start":{"line":63,"column":2},"end":{"line":65,"column":3}},"22":{"start":{"line":64,"column":3},"end":{"line":64,"column":99}},"23":{"start":{"line":66,"column":2},"end":{"line":66,"column":42}},"24":{"start":{"line":68,"column":2},"end":{"line":68,"column":34}},"25":{"start":{"line":69,"column":2},"end":{"line":78,"column":3}},"26":{"start":{"line":70,"column":3},"end":{"line":75,"column":5}},"27":{"start":{"line":73,"column":5},"end":{"line":73,"column":32}},"28":{"start":{"line":77,"column":3},"end":{"line":77,"column":23}},"29":{"start":{"line":88,"column":2},"end":{"line":88,"column":28}},"30":{"start":{"line":89,"column":2},"end":{"line":89,"column":63}},"31":{"start":{"line":91,"column":2},"end":{"line":91,"column":55}},"32":{"start":{"line":93,"column":2},"end":{"line":97,"column":3}},"33":{"start":{"line":94,"column":3},"end":{"line":94,"column":76}},"34":{"start":{"line":94,"column":51},"end":{"line":94,"column":69}},"35":{"start":{"line":95,"column":3},"end":{"line":96,"column":32}},"36":{"start":{"line":96,"column":4},"end":{"line":96,"column":32}},"37":{"start":{"line":99,"column":2},"end":{"line":99,"column":29}},"38":{"start":{"line":101,"column":2},"end":{"line":103,"column":3}},"39":{"start":{"line":102,"column":3},"end":{"line":102,"column":51}},"40":{"start":{"line":104,"column":2},"end":{"line":106,"column":5}},"41":{"start":{"line":105,"column":3},"end":{"line":105,"column":20}},"42":{"start":{"line":108,"column":2},"end":{"line":108,"column":15}},"43":{"start":{"line":117,"column":2},"end":{"line":117,"column":32}},"44":{"start":{"line":118,"column":2},"end":{"line":118,"column":35}},"45":{"start":{"line":120,"column":2},"end":{"line":127,"column":3}},"46":{"start":{"line":121,"column":3},"end":{"line":121,"column":37}},"47":{"start":{"line":122,"column":3},"end":{"line":122,"column":72}},"48":{"start":{"line":123,"column":3},"end":{"line":124,"column":31}},"49":{"start":{"line":124,"column":4},"end":{"line":124,"column":31}},"50":{"start":{"line":125,"column":3},"end":{"line":126,"column":38}},"51":{"start":{"line":126,"column":4},"end":{"line":126,"column":38}},"52":{"start":{"line":129,"column":2},"end":{"line":132,"column":4}},"53":{"start":{"line":137,"column":2},"end":{"line":137,"column":39}},"54":{"start":{"line":141,"column":2},"end":{"line":141,"column":40}},"55":{"start":{"line":145,"column":3},"end":{"line":145,"column":41}},"56":{"start":{"line":158,"column":2},"end":{"line":158,"column":60}},"57":{"start":{"line":160,"column":2},"end":{"line":162,"column":14}},"58":{"start":{"line":161,"column":3},"end":{"line":161,"column":39}},"59":{"start":{"line":164,"column":2},"end":{"line":164,"column":127}},"60":{"start":{"line":167,"column":2},"end":{"line":167,"column":29}},"61":{"start":{"line":171,"column":2},"end":{"line":173,"column":8}},"62":{"start":{"line":172,"column":3},"end":{"line":172,"column":22}},"63":{"start":{"line":175,"column":2},"end":{"line":175,"column":17}},"64":{"start":{"line":176,"column":2},"end":{"line":192,"column":11}},"65":{"start":{"line":177,"column":3},"end":{"line":177,"column":48}},"66":{"start":{"line":181,"column":3},"end":{"line":187,"column":15}},"67":{"start":{"line":182,"column":4},"end":{"line":182,"column":40}},"68":{"start":{"line":183,"column":4},"end":{"line":183,"column":70}},"69":{"start":{"line":184,"column":4},"end":{"line":184,"column":71}},"70":{"start":{"line":186,"column":4},"end":{"line":186,"column":36}},"71":{"start":{"line":191,"column":3},"end":{"line":191,"column":39}},"72":{"start":{"line":193,"column":2},"end":{"line":193,"column":15}},"73":{"start":{"line":198,"column":3},"end":{"line":198,"column":60}},"74":{"start":{"line":208,"column":3},"end":{"line":208,"column":21}},"75":{"start":{"line":209,"column":3},"end":{"line":209,"column":20}},"76":{"start":{"line":210,"column":3},"end":{"line":222,"column":12}},"77":{"start":{"line":211,"column":4},"end":{"line":211,"column":28}},"78":{"start":{"line":214,"column":4},"end":{"line":214,"column":54}},"79":{"start":{"line":216,"column":4},"end":{"line":216,"column":32}},"80":{"start":{"line":217,"column":4},"end":{"line":221,"column":5}},"81":{"start":{"line":218,"column":5},"end":{"line":218,"column":49}},"82":{"start":{"line":219,"column":5},"end":{"line":219,"column":58}},"83":{"start":{"line":220,"column":5},"end":{"line":220,"column":49}},"84":{"start":{"line":224,"column":3},"end":{"line":224,"column":62}},"85":{"start":{"line":228,"column":3},"end":{"line":228,"column":32}},"86":{"start":{"line":233,"column":0},"end":{"line":233,"column":26}}},"branchMap":{"1":{"line":11,"type":"binary-expr","locations":[{"start":{"line":11,"column":11},"end":{"line":11,"column":18}},{"start":{"line":11,"column":22},"end":{"line":11,"column":24}}]},"2":{"line":12,"type":"binary-expr","locations":[{"start":{"line":12,"column":19},"end":{"line":12,"column":37}},{"start":{"line":12,"column":41},"end":{"line":12,"column":43}}]},"3":{"line":13,"type":"binary-expr","locations":[{"start":{"line":13,"column":24},"end":{"line":13,"column":47}},{"start":{"line":13,"column":51},"end":{"line":13,"column":52}}]},"4":{"line":14,"type":"binary-expr","locations":[{"start":{"line":14,"column":16},"end":{"line":14,"column":31}},{"start":{"line":14,"column":35},"end":{"line":14,"column":49}}]},"5":{"line":15,"type":"binary-expr","locations":[{"start":{"line":15,"column":15},"end":{"line":15,"column":29}},{"start":{"line":15,"column":33},"end":{"line":15,"column":34}}]},"6":{"line":16,"type":"binary-expr","locations":[{"start":{"line":16,"column":16},"end":{"line":16,"column":31}},{"start":{"line":16,"column":35},"end":{"line":16,"column":38}}]},"7":{"line":17,"type":"binary-expr","locations":[{"start":{"line":17,"column":37},"end":{"line":17,"column":73}},{"start":{"line":17,"column":75},"end":{"line":17,"column":80}}]},"8":{"line":18,"type":"binary-expr","locations":[{"start":{"line":18,"column":39},"end":{"line":18,"column":77}},{"start":{"line":18,"column":79},"end":{"line":18,"column":84}}]},"9":{"line":20,"type":"binary-expr","locations":[{"start":{"line":20,"column":15},"end":{"line":20,"column":30}},{"start":{"line":20,"column":34},"end":{"line":20,"column":52}}]},"10":{"line":21,"type":"switch","locations":[{"start":{"line":22,"column":2},"end":{"line":25,"column":9}},{"start":{"line":26,"column":2},"end":{"line":29,"column":9}},{"start":{"line":30,"column":2},"end":{"line":31,"column":69}}]},"11":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":2},"end":{"line":63,"column":2}},{"start":{"line":63,"column":2},"end":{"line":63,"column":2}}]},"12":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":2},"end":{"line":69,"column":2}},{"start":{"line":69,"column":2},"end":{"line":69,"column":2}}]},"13":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":2},"end":{"line":93,"column":2}},{"start":{"line":93,"column":2},"end":{"line":93,"column":2}}]},"14":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":2},"end":{"line":101,"column":2}},{"start":{"line":101,"column":2},"end":{"line":101,"column":2}}]},"15":{"line":120,"type":"if","locations":[{"start":{"line":120,"column":2},"end":{"line":120,"column":2}},{"start":{"line":120,"column":2},"end":{"line":120,"column":2}}]},"16":{"line":122,"type":"binary-expr","locations":[{"start":{"line":122,"column":19},"end":{"line":122,"column":47}},{"start":{"line":122,"column":51},"end":{"line":122,"column":71}}]},"17":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":3},"end":{"line":123,"column":3}},{"start":{"line":123,"column":3},"end":{"line":123,"column":3}}]},"18":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":3},"end":{"line":125,"column":3}},{"start":{"line":125,"column":3},"end":{"line":125,"column":3}}]},"19":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":26},"end":{"line":158,"column":41}},{"start":{"line":158,"column":45},"end":{"line":158,"column":46}}]},"20":{"line":161,"type":"binary-expr","locations":[{"start":{"line":161,"column":17},"end":{"line":161,"column":32}},{"start":{"line":161,"column":36},"end":{"line":161,"column":37}}]},"21":{"line":177,"type":"binary-expr","locations":[{"start":{"line":177,"column":23},"end":{"line":177,"column":31}},{"start":{"line":177,"column":35},"end":{"line":177,"column":36}}]},"22":{"line":182,"type":"binary-expr","locations":[{"start":{"line":182,"column":21},"end":{"line":182,"column":33}},{"start":{"line":182,"column":37},"end":{"line":182,"column":39}}]},"23":{"line":214,"type":"cond-expr","locations":[{"start":{"line":214,"column":34},"end":{"line":214,"column":50}},{"start":{"line":214,"column":52},"end":{"line":214,"column":53}}]},"24":{"line":218,"type":"binary-expr","locations":[{"start":{"line":218,"column":25},"end":{"line":218,"column":42}},{"start":{"line":218,"column":46},"end":{"line":218,"column":48}}]},"25":{"line":219,"type":"binary-expr","locations":[{"start":{"line":219,"column":30},"end":{"line":219,"column":52}},{"start":{"line":219,"column":56},"end":{"line":219,"column":57}}]}},"code":["var _ = require(\"underscore\")._;","","/**"," * A multi-class single-label Bayes classifier."," *"," * @author Erel Segal-Halevi based on code by Heather Arthur (https://github.com/harthur/classifier)"," *"," * @param options"," */","var Bayesian = function(options) {","\toptions = options || {}","\tthis.thresholds = options.thresholds || {};","\tthis.globalThreshold = options.globalThreshold || 1;","\tthis.default = options.default || 'unclassified';","\tthis.weight = options.weight || 1;","\tthis.assumed = options.assumed || 0.5;","\tthis.normalizeOutputProbabilities = options.normalizeOutputProbabilities||false;","\tthis.calculateRelativeProbabilities = options.calculateRelativeProbabilities||false;","","\tvar backend = options.backend || { type: 'memory' };","\tswitch(backend.type.toLowerCase()) {","\t\tcase 'redis':","\t\t\t//this.backend = new (require(\"./backends/redis\").RedisBackend)(backend.options);","\t\t\tthrow new Error(\"Redis backend support was dropped, in order to remove dependencies\");","\t\t\tbreak;","\t\tcase 'localstorage':","\t\t\tthis.backend = new (require(\"./backends/localStorage\")","\t\t\t\t\t\t\t\t\t\t .LocalStorageBackend)(backend.options);","\t\t\tbreak;","\t\tdefault:","\t\t\tthis.backend = new (require(\"./backends/memory\").MemoryBackend)();","\t}","}","","","Bayesian.prototype = {","","\t/**","\t * Tell the classifier that the given document belongs to the given category.","\t * @param document [string] a training sample - a feature-value hash: {feature1: value1, feature2: value2, ...}","\t * @param category [string] the correct category of this sample.","\t */","\ttrainOnline: function(document, category) {","\t\tthis.incDocCounts([{input: document, output: category}]);","\t},","","\t/**","\t * Train the classifier with all the given documents.","\t * @param data an array with objects of the format: {input: sample1, output: category1}","\t * where sample1 is a feature-value hash: {feature1: value1, feature2: value2, ...}","\t */","\ttrainBatch: function(data) {","\t\tthis.incDocCounts(data);","\t},","","\t/**","\t * Ask the classifier what category the given document belongs to.","\t * @param document a hash {feature1: value1, feature2: value2, ...}","\t * @return the most probable category of this sample.","\t * If explain>0, also return the probability of each category.","\t */","\tclassify: function(document, explain) {","\t\tif (!_.isObject(document)) {","\t\t\tthrow new Error(\"document should be a feature-value hash, but it is \"+JSON.stringify(document));","\t\t}","\t\tvar probs = this.getProbsSync(document);","","\t\tvar max = this.bestMatch(probs);","\t\tif (explain>0) {","\t\t\treturn {","\t\t\t\tclasses: max.category,","\t\t\t\texplanation: probs.map(function(pair) {","\t\t\t\t\treturn pair[0]+\": \"+pair[1]","\t\t\t\t})","\t\t\t};","\t\t} else {","\t\t\treturn max.category;","\t\t}","\t},","","\t/**","\t * A subroutine used for classification.","\t * Gets the probabilities of the words in the given sentence.","\t * @param document a hash {feature1: value1, feature2: value2, ...}","\t * Values are numeric and represent number of occurences.","\t */","\tgetProbsSync: function(document) {","\t\tvar cats = this.getCats(); // a hash with the possible categories: { 'cat1': 1, 'cat2': 1 }","\t\tvar counts = this.getWordCounts(Object.keys(document), cats); // For each word encountered during training, the counts of times it occurred in each category.","","\t\tvar probs = this.getCatProbs(cats, document, counts); // The probabilities that the given document belongs to each of the categories, i.e.: { 'cat1': 0.1875, 'cat2': 0.0625 }","","\t\tif (this.normalizeOutputProbabilities) {","\t\t\tvar sum = _(probs).reduce(function(memo, num) { return memo + num; }, 0);","\t\t\tfor (var cat in probs)","\t\t\t\tprobs[cat] = probs[cat]/sum;","\t\t}","","\t\tvar pairs = _.pairs(probs);   // pairs of [category,probability], for all categories that appeared in the training set.","\t\t//console.dir(pairs);","\t\tif (pairs.length==0) {","\t\t\treturn {category: this.default, probability: 0};","\t\t}","\t\tpairs.sort(function(a,b) {   // sort by decreasing prob","\t\t\treturn b[1]-a[1];","\t\t});","","\t\treturn pairs;","\t},","","\t/**","\t * Used for classification.","\t * @param pairs [[category,probability],...]","\t * @return{category: most-probable-category, probability: its-probability}","\t */","\tbestMatch: function(pairs) {","\t\tvar maxCategory = pairs[0][0];","\t\tvar maxProbability = pairs[0][1];","","\t\tif (pairs.length>1) {","\t\t\tvar nextProbability = pairs[1][1];","\t\t\tvar threshold = this.thresholds[maxCategory] || this.globalThreshold;","\t\t\tif (nextProbability * threshold > maxProbability)","\t\t\t\tmaxCategory = this.default; // not greater than other category by enough","\t\t\tif (this.calculateRelativeProbabilities)","\t\t\t\tmaxProbability /= nextProbability;","\t\t}","","\t\treturn {","\t\t\tcategory: maxCategory,","\t\t\tprobability: maxProbability","\t\t};","\t},","","","\ttoJSON: function(callback) {","\t\treturn this.backend.toJSON(callback);","\t},","","\tfromJSON: function(json, callback) {","\t\tthis.backend.fromJSON(json, callback);","\t},","","\tgetCats: function(callback) {","\t\t\treturn this.backend.getCats(callback);","\t},","","","","\t/*","\t *","\t *\tInternal functions (should be private):","\t *","\t */","","\twordProb: function(word, cat, cats, wordCounts) {","\t\t// times word appears in a doc in this cat / docs in this cat","\t\tvar probWordGivenCat = (wordCounts[cat] || 0) / cats[cat];","","\t\tvar totalWordCount = _(cats).reduce(function(sum, p, cat) {","\t\t\treturn sum + (wordCounts[cat] || 0);","\t\t}, 0, this);","\t\t// get weighted average with assumed so prob won't be extreme on rare words","\t\tvar modifiedProbGivenCat = (this.weight * this.assumed + totalWordCount * probWordGivenCat) / (this.weight + totalWordCount);","","\t\t//console.log(\"word=\"+word+\" cat=\"+cat+\" probWordGivenCat=\"+probWordGivenCat+\" totalWordCount=\"+totalWordCount+\" modifiedProbGivenCat=\"+modifiedProbGivenCat)","\t\treturn modifiedProbGivenCat","\t},","","\tgetCatProbs: function(cats, document, counts) {","\t\tvar numDocs = _(cats).reduce(function(sum, count) {","\t\t\treturn sum + count;","\t\t}, 0);  // total number of training samples in all categories","","\t\tvar probs = {};","\t\t_(cats).each(function(catCount, cat) {","\t\t\tvar catPriorProb = (catCount || 0) / numDocs;","","\t\t\t// The probability to see a document is the product","\t\t\t//     of the probability to see each word in the document.","\t\t\tvar docProb = _(Object.keys(document)).reduce(function(prob, word) {","\t\t\t\tvar wordCounts = counts[word] || {};","\t\t\t\tvar probWordGivenCat = this.wordProb(word, cat, cats, wordCounts);","\t\t\t\tvar probWordsGivenCat = Math.pow(probWordGivenCat, document[word]);","\t\t\t\t//console.log(\"probWordGivenCat=\"+probWordGivenCat+\" probWordsGivenCat=\"+probWordsGivenCat+\" document[word]=\"+document[word])","\t\t\t\treturn prob * probWordsGivenCat;","\t\t\t}, 1, this);","\t\t\t//console.log(\"docProb=\"+docProb)","","\t\t\t// the probability this doc is in this category","\t\t\tprobs[cat] = catPriorProb * docProb;","\t\t}, this);","\t\treturn probs;","\t},","","","\tgetWordCounts: function(words, cats, callback) {","\t\t\treturn this.backend.getWordCounts(words, cats, callback);","\t},","","\t/**","\t * Increment the feature counts.","\t * @param data an array with objects of the format: {input: sample1, output: class1}","\t * where sample1 is a feature-value hash: {feature1: value1, feature2: value2, ...}","\t */","\tincDocCounts: function(samples, callback) {","\t\t\t// accumulate all the pending increments","\t\t\tvar wordIncs = {};","\t\t\tvar catIncs = {};","\t\t\tsamples.forEach(function(sample) {","\t\t\t\tvar cat = sample.output;","\t\t\t\t//if (_.isObject(cat))","\t\t\t\t//\tcat = JSON.stringify(cat);","\t\t\t\tcatIncs[cat] = catIncs[cat] ? catIncs[cat] + 1: 1;","","\t\t\t\tvar features = sample.input;","\t\t\t\tfor (var feature in features) {","\t\t\t\t\twordIncs[feature] = wordIncs[feature] || {};","\t\t\t\t\twordIncs[feature][cat] = wordIncs[feature][cat] || 0;","\t\t\t\t\twordIncs[feature][cat] += features[feature];","\t\t\t\t}","\t\t\t}, this);","","\t\t\treturn this.backend.incCounts(catIncs, wordIncs, callback);","\t},","","\tsetThresholds: function(thresholds) {","\t\t\tthis.thresholds = thresholds;","\t},","","}","","module.exports = Bayesian;",""],"l":{"1":1,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"20":0,"21":0,"24":0,"25":0,"27":0,"29":0,"31":0,"36":1,"44":0,"53":0,"63":0,"64":0,"66":0,"68":0,"69":0,"70":0,"73":0,"77":0,"88":0,"89":0,"91":0,"93":0,"94":0,"95":0,"96":0,"99":0,"101":0,"102":0,"104":0,"105":0,"108":0,"117":0,"118":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"129":0,"137":0,"141":0,"145":0,"158":0,"160":0,"161":0,"164":0,"167":0,"171":0,"172":0,"175":0,"176":0,"177":0,"181":0,"182":0,"183":0,"184":0,"186":0,"191":0,"193":0,"198":0,"208":0,"209":0,"210":0,"211":0,"214":0,"216":0,"217":0,"218":0,"219":0,"220":0,"224":0,"228":0,"233":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/kNN/kNN.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/kNN/kNN.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":10},"end":{"line":8,"column":25}}},"2":{"name":"(anonymous_2)","line":18,"loc":{"start":{"line":18,"column":14},"end":{"line":18,"column":39}}},"3":{"name":"(anonymous_3)","line":21,"loc":{"start":{"line":21,"column":14},"end":{"line":21,"column":32}}},"4":{"name":"(anonymous_4)","line":25,"loc":{"start":{"line":25,"column":11},"end":{"line":25,"column":37}}},"5":{"name":"(anonymous_5)","line":27,"loc":{"start":{"line":27,"column":37},"end":{"line":27,"column":52}}},"6":{"name":"(anonymous_6)","line":42,"loc":{"start":{"line":42,"column":34},"end":{"line":42,"column":49}}},"7":{"name":"(anonymous_7)","line":45,"loc":{"start":{"line":45,"column":64},"end":{"line":45,"column":82}}},"8":{"name":"(anonymous_8)","line":46,"loc":{"start":{"line":46,"column":64},"end":{"line":46,"column":82}}},"9":{"name":"(anonymous_9)","line":53,"loc":{"start":{"line":53,"column":38},"end":{"line":53,"column":51}}},"10":{"name":"(anonymous_10)","line":57,"loc":{"start":{"line":57,"column":38},"end":{"line":57,"column":51}}},"11":{"name":"(anonymous_11)","line":67,"loc":{"start":{"line":67,"column":62},"end":{"line":67,"column":75}}},"12":{"name":"(anonymous_12)","line":70,"loc":{"start":{"line":70,"column":30},"end":{"line":70,"column":43}}},"13":{"name":"(anonymous_13)","line":82,"loc":{"start":{"line":82,"column":17},"end":{"line":82,"column":45}}},"14":{"name":"(anonymous_14)","line":83,"loc":{"start":{"line":83,"column":29},"end":{"line":83,"column":48}}},"15":{"name":"(anonymous_15)","line":103,"loc":{"start":{"line":103,"column":17},"end":{"line":104,"column":1}}},"16":{"name":"(anonymous_16)","line":107,"loc":{"start":{"line":107,"column":17},"end":{"line":107,"column":43}}},"17":{"name":"(anonymous_17)","line":117,"loc":{"start":{"line":117,"column":15},"end":{"line":118,"column":1}}},"18":{"name":"(anonymous_18)","line":121,"loc":{"start":{"line":121,"column":14},"end":{"line":121,"column":40}}},"19":{"name":"(anonymous_19)","line":129,"loc":{"start":{"line":129,"column":13},"end":{"line":129,"column":29}}},"20":{"name":"(anonymous_20)","line":131,"loc":{"start":{"line":131,"column":30},"end":{"line":131,"column":41}}},"21":{"name":"(anonymous_21)","line":137,"loc":{"start":{"line":137,"column":16},"end":{"line":137,"column":27}}},"22":{"name":"(anonymous_22)","line":140,"loc":{"start":{"line":140,"column":17},"end":{"line":140,"column":35}}},"23":{"name":"(anonymous_23)","line":144,"loc":{"start":{"line":144,"column":10},"end":{"line":144,"column":21}}},"24":{"name":"(anonymous_24)","line":147,"loc":{"start":{"line":147,"column":12},"end":{"line":147,"column":27}}},"25":{"name":"(anonymous_25)","line":150,"loc":{"start":{"line":150,"column":24},"end":{"line":150,"column":53}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":32}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":23}},"3":{"start":{"line":8,"column":0},"end":{"line":14,"column":1}},"4":{"start":{"line":9,"column":1},"end":{"line":9,"column":16}},"5":{"start":{"line":10,"column":1},"end":{"line":10,"column":22}},"6":{"start":{"line":11,"column":1},"end":{"line":11,"column":54}},"7":{"start":{"line":12,"column":1},"end":{"line":12,"column":52}},"8":{"start":{"line":13,"column":1},"end":{"line":13,"column":17}},"9":{"start":{"line":16,"column":0},"end":{"line":153,"column":1}},"10":{"start":{"line":22,"column":2},"end":{"line":22,"column":24}},"11":{"start":{"line":27,"column":2},"end":{"line":31,"column":26}},"12":{"start":{"line":27,"column":54},"end":{"line":30,"column":18}},"13":{"start":{"line":42,"column":2},"end":{"line":51,"column":25}},"14":{"start":{"line":42,"column":51},"end":{"line":50,"column":17}},"15":{"start":{"line":45,"column":84},"end":{"line":45,"column":125}},"16":{"start":{"line":46,"column":84},"end":{"line":46,"column":125}},"17":{"start":{"line":53,"column":2},"end":{"line":53,"column":79}},"18":{"start":{"line":53,"column":53},"end":{"line":53,"column":76}},"19":{"start":{"line":57,"column":2},"end":{"line":57,"column":128}},"20":{"start":{"line":57,"column":53},"end":{"line":57,"column":125}},"21":{"start":{"line":59,"column":2},"end":{"line":63,"column":3}},"22":{"start":{"line":61,"column":3},"end":{"line":62,"column":62}},"23":{"start":{"line":62,"column":4},"end":{"line":62,"column":62}},"24":{"start":{"line":65,"column":2},"end":{"line":65,"column":66}},"25":{"start":{"line":66,"column":2},"end":{"line":66,"column":30}},"26":{"start":{"line":67,"column":2},"end":{"line":67,"column":112}},"27":{"start":{"line":67,"column":77},"end":{"line":67,"column":110}},"28":{"start":{"line":68,"column":2},"end":{"line":68,"column":38}},"29":{"start":{"line":70,"column":2},"end":{"line":70,"column":68}},"30":{"start":{"line":70,"column":45},"end":{"line":70,"column":66}},"31":{"start":{"line":72,"column":2},"end":{"line":78,"column":3}},"32":{"start":{"line":74,"column":3},"end":{"line":77,"column":8}},"33":{"start":{"line":80,"column":2},"end":{"line":80,"column":43}},"34":{"start":{"line":82,"column":2},"end":{"line":89,"column":10}},"35":{"start":{"line":83,"column":3},"end":{"line":83,"column":84}},"36":{"start":{"line":83,"column":50},"end":{"line":83,"column":77}},"37":{"start":{"line":84,"column":3},"end":{"line":88,"column":5}},"38":{"start":{"line":86,"column":5},"end":{"line":86,"column":28}},"39":{"start":{"line":87,"column":5},"end":{"line":87,"column":30}},"40":{"start":{"line":96,"column":2},"end":{"line":100,"column":8}},"41":{"start":{"line":97,"column":3},"end":{"line":100,"column":8}},"42":{"start":{"line":105,"column":2},"end":{"line":113,"column":14}},"43":{"start":{"line":107,"column":3},"end":{"line":109,"column":11}},"44":{"start":{"line":108,"column":4},"end":{"line":108,"column":59}},"45":{"start":{"line":110,"column":3},"end":{"line":110,"column":15}},"46":{"start":{"line":113,"column":2},"end":{"line":113,"column":14}},"47":{"start":{"line":119,"column":2},"end":{"line":119,"column":17}},"48":{"start":{"line":121,"column":2},"end":{"line":124,"column":10}},"49":{"start":{"line":122,"column":3},"end":{"line":123,"column":77}},"50":{"start":{"line":123,"column":4},"end":{"line":123,"column":77}},"51":{"start":{"line":126,"column":2},"end":{"line":126,"column":15}},"52":{"start":{"line":130,"column":2},"end":{"line":130,"column":71}},"53":{"start":{"line":131,"column":2},"end":{"line":133,"column":4}},"54":{"start":{"line":132,"column":3},"end":{"line":132,"column":16}},"55":{"start":{"line":134,"column":2},"end":{"line":134,"column":14}},"56":{"start":{"line":141,"column":2},"end":{"line":141,"column":64}},"57":{"start":{"line":151,"column":2},"end":{"line":151,"column":46}},"58":{"start":{"line":156,"column":0},"end":{"line":156,"column":21}}},"branchMap":{"1":{"line":57,"type":"binary-expr","locations":[{"start":{"line":57,"column":60},"end":{"line":57,"column":95}},{"start":{"line":57,"column":99},"end":{"line":57,"column":124}}]},"2":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":2},"end":{"line":59,"column":2}},{"start":{"line":59,"column":2},"end":{"line":59,"column":2}}]},"3":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":3},"end":{"line":61,"column":3}},{"start":{"line":61,"column":3},"end":{"line":61,"column":3}}]},"4":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":2},"end":{"line":72,"column":2}},{"start":{"line":72,"column":2},"end":{"line":72,"column":2}}]},"5":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":3},"end":{"line":84,"column":3}},{"start":{"line":84,"column":3},"end":{"line":84,"column":3}}]},"6":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":2},"end":{"line":96,"column":2}},{"start":{"line":96,"column":2},"end":{"line":96,"column":2}}]},"7":{"line":98,"type":"cond-expr","locations":[{"start":{"line":98,"column":50},"end":{"line":98,"column":67}},{"start":{"line":98,"column":70},"end":{"line":98,"column":94}}]},"8":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":2},"end":{"line":105,"column":2}},{"start":{"line":105,"column":2},"end":{"line":105,"column":2}}]},"9":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":3},"end":{"line":122,"column":3}},{"start":{"line":122,"column":3},"end":{"line":122,"column":3}}]},"10":{"line":141,"type":"cond-expr","locations":[{"start":{"line":141,"column":32},"end":{"line":141,"column":38}},{"start":{"line":141,"column":40},"end":{"line":141,"column":62}}]}},"code":["var _ = require(\"underscore\")._;","var fs = require(\"fs\");","","/**"," * kNN classifier"," */","","var kNN = function(opts) {","\tthis.k = opts.k","\tthis.mode = opts.mode","\tthis.distanceFunctionList = opts.distanceFunctionList","\tthis.distanceWeightening = opts.distanceWeightening","\tthis.labels = []","}","","kNN.prototype = {","","\ttrainOnline: function(sample, labels) {","\t},","","\ttrainBatch : function(dataset) {","\t\tthis.dataset = dataset","\t},","","\tclassify: function(sample, explain) {","","\t\tvar trainset = _.map(this.dataset, function(value){ return {","\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'input': this.complement(value['input']),","\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'output': value['output']","\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t }, this);","","\t\t// is canceled due to \"okay is fine\"","\t\t// var eq = _.filter(trainset, function(value){ return _.isEqual(value['input'], sample); });","\t\t","\t\t// if (eq.length != 0)","\t\t\t// return { ","\t\t\t\t \t// 'classification': (eq[0]['output'] == 1 ? 1 : -1),","\t\t\t\t \t// 'explanation': 'same'","\t\t   \t\t\t// }","\t\t","\t\tvar distances = _.map(trainset, function(value){ return {","\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'input'   : value['input'],","\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'output'  : value['output'],","\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'distance': _.reduce(this.distanceFunctionList, function(memo, df){ return memo + df(sample, value['input']); }, 0),","\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'score':    _.reduce(this.distanceFunctionList, function(memo, df){ return memo + df(sample, value['input']); }, 0),","","\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 'distance': dfmap[this.distanceFunction](sample, value['input']),","\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 'score'   : this.distanceWeightening(_.reduce(this.distanceFunctionList, function(memo, df){ return memo + df(sample, value['input']); }, 0))","\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}, this);","","\t\tvar distances = _.sortBy(distances, function(num){ return num['distance']; })","","\t\t// eliminate Infinite and null","","\t\tvar distances = _.filter(distances, function(num){ return !isNaN(parseFloat(num['distance'])) && isFinite(num['distance']) });","\t\t","\t\tif (distances.length == 0)","\t\t{","\t\t\tif (this.mode == 'binary')","\t\t\t\treturn {'classification': -1, 'explanation': 'not number'}","\t\t}","","\t\tvar metrics = _.unique(_.sortBy(_.pluck(distances, 'distance')))","\t\tvar margin = metrics[this.k]","\t\tvar real_k = distances.length - _.find(distances.reverse(), function(num){ return num['distance'] == margin })","\t\tvar knn = distances.slice(0, real_k)","","\t\tvar output = _.groupBy(knn, function(num){ return num['output'] })","","\t\tif (this.mode == 'multi')","\t\t{","\t\t\treturn { ","\t\t\t\t\t 'classes': Object.keys(output),","\t\t\t\t\t 'explanation': output","\t\t\t  \t\t}","\t\t}","","\t\tvar thelabel = {'label': -1, 'score': -1}","","\t\t_.each(output, function(value, label, list){ ","\t\t\tvar sum = _.reduce(value, function(memo, num){ return memo + num['score']; }, 0);","\t\t\tif (sum > thelabel['score'])","\t\t\t\t{","\t\t\t\t\tthelabel['score'] = sum\t","\t\t\t\t\tthelabel['label'] = label\t","\t\t\t\t}","\t\t}, this)","","\t\t// _.each(knn, function(val, key, list){ ","\t\t\t// console.log(val)","\t\t\t// console.log(this.translaterow(val['input']))","\t\t// }, this)","","\t\tif (this.mode == 'binary')","\t\t\treturn { ","\t\t\t\t\t 'classification': (thelabel['label'] == 1 ? thelabel['score'] : (-1) * thelabel['score']),","\t\t\t\t\t 'explanation': this.translatetrain(knn)","\t\t\t  \t\t}","\t\t},","","\ttranslatetrain: function(input)","\t{","\t\tif (this.featureLookupTable)","\t\t{","\t\t\t_.each(input, function(value, key, list){ ","\t\t\t\tinput[key]['input'] = this.translaterow(value['input'])","\t\t\t}, this)","\t\t\treturn input","\t\t}","\t\telse","\t\treturn input","","\t},","","\ttranslaterow: function(row)","\t{","\t\tvar output = {}","","\t\t_.each(row, function(value, key, list){ ","\t\t\tif (value != 0)","\t\t\t\toutput[this.featureLookupTable['featureIndexToFeatureName'][key]] = value","\t\t}, this)","","\t\treturn output","\t},","","\tcomplement: function(input) {","\t\tvar len = this.featureLookupTable['featureIndexToFeatureName'].length","\t\t_(len - input.length).times(function(n){","\t\t\tinput.push(0)","\t\t})","\t\treturn input","\t},","","\tgetAllClasses: function() {","\t},","","\tstringifyClass: function (aClass) {","\t\treturn (_(aClass).isString()? aClass: JSON.stringify(aClass));","\t},","","\ttoJSON : function() {","\t},","","\tfromJSON : function(json) {","\t},","\t","\tsetFeatureLookupTable: function(featureLookupTable) {","\t\tthis.featureLookupTable = featureLookupTable","\t},","}","","","module.exports = kNN;"],"l":{"1":1,"2":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"16":1,"22":0,"27":0,"42":0,"45":0,"46":0,"53":0,"57":0,"59":0,"61":0,"62":0,"65":0,"66":0,"67":0,"68":0,"70":0,"72":0,"74":0,"80":0,"82":0,"83":0,"84":0,"86":0,"87":0,"96":0,"97":0,"105":0,"107":0,"108":0,"110":0,"113":0,"119":0,"121":0,"122":0,"123":0,"126":0,"130":0,"131":0,"132":0,"134":0,"141":0,"151":0,"156":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/svm/SvmJs.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/svm/SvmJs.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":1,"8":1,"9":1,"10":4,"11":4,"12":1,"13":6,"14":6,"15":6,"16":2,"17":2,"18":2,"19":2,"20":2,"21":4,"22":2,"23":2,"24":2,"25":4,"26":0,"27":0,"28":1},"b":{"1":[2,2],"2":[2,4],"3":[2,2],"4":[2,4],"5":[2,0]},"f":{"1":1,"2":0,"3":1,"4":4,"5":6,"6":2,"7":0,"8":0},"fnMap":{"1":{"name":"SvmJs","line":14,"loc":{"start":{"line":14,"column":0},"end":{"line":14,"column":21}}},"2":{"name":"(anonymous_2)","line":21,"loc":{"start":{"line":21,"column":14},"end":{"line":21,"column":40}}},"3":{"name":"(anonymous_3)","line":25,"loc":{"start":{"line":25,"column":13},"end":{"line":25,"column":31}}},"4":{"name":"(anonymous_4)","line":28,"loc":{"start":{"line":28,"column":18},"end":{"line":28,"column":34}}},"5":{"name":"(anonymous_5)","line":41,"loc":{"start":{"line":41,"column":14},"end":{"line":41,"column":61}}},"6":{"name":"(anonymous_6)","line":68,"loc":{"start":{"line":68,"column":30},"end":{"line":68,"column":43}}},"7":{"name":"(anonymous_7)","line":78,"loc":{"start":{"line":78,"column":12},"end":{"line":78,"column":23}}},"8":{"name":"(anonymous_8)","line":82,"loc":{"start":{"line":82,"column":14},"end":{"line":82,"column":29}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":35}},"2":{"start":{"line":14,"column":0},"end":{"line":17,"column":1}},"3":{"start":{"line":15,"column":1},"end":{"line":15,"column":29}},"4":{"start":{"line":16,"column":1},"end":{"line":16,"column":18}},"5":{"start":{"line":20,"column":0},"end":{"line":85,"column":2}},"6":{"start":{"line":22,"column":2},"end":{"line":22,"column":61}},"7":{"start":{"line":26,"column":2},"end":{"line":26,"column":16}},"8":{"start":{"line":27,"column":2},"end":{"line":27,"column":18}},"9":{"start":{"line":28,"column":2},"end":{"line":31,"column":5}},"10":{"start":{"line":29,"column":3},"end":{"line":29,"column":26}},"11":{"start":{"line":30,"column":3},"end":{"line":30,"column":38}},"12":{"start":{"line":32,"column":2},"end":{"line":32,"column":50}},"13":{"start":{"line":42,"column":5},"end":{"line":42,"column":47}},"14":{"start":{"line":43,"column":5},"end":{"line":43,"column":68}},"15":{"start":{"line":45,"column":5},"end":{"line":75,"column":6}},"16":{"start":{"line":46,"column":12},"end":{"line":46,"column":32}},"17":{"start":{"line":51,"column":12},"end":{"line":51,"column":34}},"18":{"start":{"line":52,"column":12},"end":{"line":67,"column":13}},"19":{"start":{"line":53,"column":14},"end":{"line":53,"column":34}},"20":{"start":{"line":54,"column":14},"end":{"line":61,"column":15}},"21":{"start":{"line":55,"column":13},"end":{"line":60,"column":15}},"22":{"start":{"line":68,"column":12},"end":{"line":68,"column":77}},"23":{"start":{"line":68,"column":44},"end":{"line":68,"column":74}},"24":{"start":{"line":69,"column":12},"end":{"line":72,"column":13}},"25":{"start":{"line":74,"column":6},"end":{"line":74,"column":28}},"26":{"start":{"line":79,"column":5},"end":{"line":79,"column":31}},"27":{"start":{"line":83,"column":5},"end":{"line":83,"column":30}},"28":{"start":{"line":88,"column":0},"end":{"line":88,"column":23}}},"branchMap":{"1":{"line":30,"type":"cond-expr","locations":[{"start":{"line":30,"column":31},"end":{"line":30,"column":32}},{"start":{"line":30,"column":34},"end":{"line":30,"column":36}}]},"2":{"line":43,"type":"cond-expr","locations":[{"start":{"line":43,"column":45},"end":{"line":43,"column":50}},{"start":{"line":43,"column":53},"end":{"line":43,"column":66}}]},"3":{"line":43,"type":"cond-expr","locations":[{"start":{"line":43,"column":62},"end":{"line":43,"column":63}},{"start":{"line":43,"column":65},"end":{"line":43,"column":66}}]},"4":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":5},"end":{"line":45,"column":5}},{"start":{"line":45,"column":5},"end":{"line":45,"column":5}}]},"5":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":12},"end":{"line":52,"column":12}},{"start":{"line":52,"column":12},"end":{"line":52,"column":12}}]}},"code":["/**"," * A wrapper for karpathy's SVM.js package: https://github.com/karpathy/svmjs"," *"," *  This is a binary SVM and is trained using the SMO algorithm."," *  "," *  Reference: \"The Simplified SMO Algorithm\" (http://math.unt.edu/~hsp0009/smo.pdf)"," *"," * @author Erel Segal-haLevi"," * @since 2013-09-09"," */","","var SvmJsBase = require(\"svm\").SVM;","","function SvmJs(opts) {","\tthis.base = new SvmJsBase();","\tthis.opts = opts;  // options for SvmJsBase.train","}","","","SvmJs.prototype = {","\ttrainOnline :function(features, label) {","\t\tthrow new Error(\"svm.js does not support online training\");","\t},","","\ttrainBatch: function(dataset) {","\t\tvar data = [];","\t\tvar labels = [];","\t\tdataset.forEach(function(datum) {","\t\t\tdata.push(datum.input);","\t\t\tlabels.push(datum.output>0? 1: -1);","\t\t});","\t\treturn this.base.train(data, labels, this.opts);","\t},","","\t/**","\t * @param features - a feature-value hash.","\t * @param explain - int - if positive, an \"explanation\" field, with the given length, will be added to the result.  ","\t * @param continuous_output if true, return the net classification score. If false [default], return 0 or 1.","\t * @return the binary classification - 0 or 1.","\t */","    classify: function(features, explain, continuous_output) {","    \tvar score = this.base.marginOne(features);","    \tvar classification = continuous_output? score: (score>0? 1: 0);","    \t","    \tif (explain>0) {","            var f = this.base.b;","","            // if the linear kernel was used and w was computed and stored,","            // (i.e. the svm has fully finished training)","            // the internal class variable usew_ will be set to true.","            var explanations = [];","            if(this.base.usew_) {","              var w = this.base.w;","              for(var j=0;j<this.base.D;j++) {","            \texplanations[j] = {","            \t\tfeature: j,","            \t\tvalue: features[j],","            \t\tweight: w[j],","            \t\trelevance: features[j] * w[j],","            \t};","              }","            } else {","            \t// explanations not supported.","                //for(var i=0;i<this.N;i++) {","                // f += this.alpha[i] * this.labels[i] * this.kernel(inst, this.data[i]);","                //}","            }","            explanations.sort(function(a,b){return b.relevance-a.relevance});","            return {","            \tclassification: classification,","            \texplanation: explanations.slice(0, explain),","            }","    \t} else {","    \t\treturn classification;","    \t}","    },","    ","    toJSON: function() {","    \treturn this.base.toJSON();","    },","    ","    fromJSON: function(json) {","    \tthis.base.fromJSON(json);","    },","};","","","module.exports = SvmJs;",""],"l":{"12":1,"14":1,"15":1,"16":1,"20":1,"22":0,"26":1,"27":1,"28":1,"29":4,"30":4,"32":1,"42":6,"43":6,"45":6,"46":2,"51":2,"52":2,"53":2,"54":2,"55":4,"68":2,"69":2,"74":4,"79":0,"83":0,"88":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/svm/SvmPerf.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/svm/SvmPerf.js","s":{"1":1,"2":1,"3":2,"4":2,"5":2,"6":2,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":2,"15":2,"16":2,"17":0,"18":1,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":1,"56":1,"57":1,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":1},"b":{"1":[2,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0]},"f":{"1":2,"2":2,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},"fnMap":{"1":{"name":"SvmPerf","line":25,"loc":{"start":{"line":25,"column":0},"end":{"line":25,"column":23}}},"2":{"name":"(anonymous_2)","line":39,"loc":{"start":{"line":39,"column":22},"end":{"line":39,"column":33}}},"3":{"name":"(anonymous_3)","line":51,"loc":{"start":{"line":51,"column":15},"end":{"line":51,"column":44}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":14},"end":{"line":61,"column":32}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":12},"end":{"line":82,"column":34}}},"6":{"name":"(anonymous_6)","line":90,"loc":{"start":{"line":90,"column":15},"end":{"line":90,"column":26}}},"7":{"name":"(anonymous_7)","line":92,"loc":{"start":{"line":92,"column":35},"end":{"line":92,"column":64}}},"8":{"name":"(anonymous_8)","line":98,"loc":{"start":{"line":98,"column":33},"end":{"line":98,"column":46}}},"9":{"name":"(anonymous_9)","line":102,"loc":{"start":{"line":102,"column":19},"end":{"line":102,"column":30}}},"10":{"name":"(anonymous_10)","line":112,"loc":{"start":{"line":112,"column":12},"end":{"line":112,"column":59}}},"11":{"name":"(anonymous_11)","line":120,"loc":{"start":{"line":120,"column":25},"end":{"line":120,"column":54}}},"12":{"name":"(anonymous_12)","line":125,"loc":{"start":{"line":125,"column":10},"end":{"line":125,"column":21}}},"13":{"name":"(anonymous_13)","line":129,"loc":{"start":{"line":129,"column":12},"end":{"line":129,"column":27}}},"14":{"name":"modelStringToModelMap","line":152,"loc":{"start":{"line":152,"column":0},"end":{"line":152,"column":44}}}},"statementMap":{"1":{"start":{"line":18,"column":0},"end":{"line":22,"column":32}},"2":{"start":{"line":25,"column":0},"end":{"line":37,"column":1}},"3":{"start":{"line":26,"column":1},"end":{"line":30,"column":2}},"4":{"start":{"line":27,"column":3},"end":{"line":27,"column":140}},"5":{"start":{"line":28,"column":3},"end":{"line":28,"column":21}},"6":{"start":{"line":29,"column":3},"end":{"line":29,"column":24}},"7":{"start":{"line":31,"column":1},"end":{"line":31,"column":41}},"8":{"start":{"line":32,"column":1},"end":{"line":32,"column":30}},"9":{"start":{"line":33,"column":1},"end":{"line":33,"column":57}},"10":{"start":{"line":34,"column":1},"end":{"line":34,"column":44}},"11":{"start":{"line":35,"column":1},"end":{"line":35,"column":34}},"12":{"start":{"line":36,"column":1},"end":{"line":36,"column":19}},"13":{"start":{"line":39,"column":0},"end":{"line":46,"column":1}},"14":{"start":{"line":40,"column":2},"end":{"line":44,"column":3}},"15":{"start":{"line":41,"column":4},"end":{"line":41,"column":44}},"16":{"start":{"line":43,"column":4},"end":{"line":43,"column":17}},"17":{"start":{"line":45,"column":2},"end":{"line":45,"column":13}},"18":{"start":{"line":48,"column":0},"end":{"line":48,"column":27}},"19":{"start":{"line":50,"column":0},"end":{"line":132,"column":2}},"20":{"start":{"line":53,"column":3},"end":{"line":53,"column":62}},"21":{"start":{"line":62,"column":3},"end":{"line":62,"column":51}},"22":{"start":{"line":62,"column":19},"end":{"line":62,"column":51}},"23":{"start":{"line":64,"column":3},"end":{"line":64,"column":55}},"24":{"start":{"line":65,"column":3},"end":{"line":65,"column":158}},"25":{"start":{"line":66,"column":3},"end":{"line":66,"column":58}},"26":{"start":{"line":67,"column":3},"end":{"line":67,"column":81}},"27":{"start":{"line":68,"column":3},"end":{"line":68,"column":51}},"28":{"start":{"line":68,"column":19},"end":{"line":68,"column":51}},"29":{"start":{"line":69,"column":3},"end":{"line":69,"column":23}},"30":{"start":{"line":71,"column":3},"end":{"line":71,"column":34}},"31":{"start":{"line":72,"column":3},"end":{"line":76,"column":4}},"32":{"start":{"line":73,"column":4},"end":{"line":73,"column":24}},"33":{"start":{"line":74,"column":4},"end":{"line":74,"column":53}},"34":{"start":{"line":75,"column":4},"end":{"line":75,"column":51}},"35":{"start":{"line":78,"column":3},"end":{"line":78,"column":54}},"36":{"start":{"line":79,"column":3},"end":{"line":79,"column":49}},"37":{"start":{"line":79,"column":19},"end":{"line":79,"column":49}},"38":{"start":{"line":83,"column":3},"end":{"line":83,"column":34}},"39":{"start":{"line":84,"column":3},"end":{"line":84,"column":64}},"40":{"start":{"line":85,"column":3},"end":{"line":85,"column":56}},"41":{"start":{"line":85,"column":19},"end":{"line":85,"column":56}},"42":{"start":{"line":91,"column":3},"end":{"line":91,"column":20}},"43":{"start":{"line":92,"column":3},"end":{"line":97,"column":11}},"44":{"start":{"line":93,"column":4},"end":{"line":96,"column":88}},"45":{"start":{"line":94,"column":5},"end":{"line":94,"column":36}},"46":{"start":{"line":96,"column":5},"end":{"line":96,"column":88}},"47":{"start":{"line":98,"column":3},"end":{"line":98,"column":62}},"48":{"start":{"line":98,"column":47},"end":{"line":98,"column":60}},"49":{"start":{"line":99,"column":3},"end":{"line":99,"column":18}},"50":{"start":{"line":103,"column":3},"end":{"line":103,"column":34}},"51":{"start":{"line":113,"column":3},"end":{"line":114,"column":104}},"52":{"start":{"line":122,"column":3},"end":{"line":122,"column":48}},"53":{"start":{"line":126,"column":3},"end":{"line":126,"column":34}},"54":{"start":{"line":130,"column":3},"end":{"line":130,"column":34}},"55":{"start":{"line":139,"column":0},"end":{"line":143,"column":11}},"56":{"start":{"line":145,"column":0},"end":{"line":145,"column":22}},"57":{"start":{"line":152,"column":0},"end":{"line":178,"column":1}},"58":{"start":{"line":153,"column":1},"end":{"line":153,"column":56}},"59":{"start":{"line":154,"column":1},"end":{"line":157,"column":2}},"60":{"start":{"line":155,"column":2},"end":{"line":155,"column":27}},"61":{"start":{"line":156,"column":2},"end":{"line":156,"column":58}},"62":{"start":{"line":159,"column":1},"end":{"line":159,"column":48}},"63":{"start":{"line":160,"column":1},"end":{"line":160,"column":29}},"64":{"start":{"line":164,"column":1},"end":{"line":176,"column":2}},"65":{"start":{"line":165,"column":2},"end":{"line":165,"column":47}},"66":{"start":{"line":166,"column":2},"end":{"line":166,"column":50}},"67":{"start":{"line":167,"column":2},"end":{"line":168,"column":112}},"68":{"start":{"line":168,"column":3},"end":{"line":168,"column":112}},"69":{"start":{"line":169,"column":2},"end":{"line":169,"column":43}},"70":{"start":{"line":170,"column":2},"end":{"line":171,"column":101}},"71":{"start":{"line":171,"column":3},"end":{"line":171,"column":101}},"72":{"start":{"line":172,"column":2},"end":{"line":172,"column":44}},"73":{"start":{"line":173,"column":2},"end":{"line":174,"column":59}},"74":{"start":{"line":174,"column":3},"end":{"line":174,"column":59}},"75":{"start":{"line":177,"column":1},"end":{"line":177,"column":27}},"76":{"start":{"line":182,"column":0},"end":{"line":182,"column":25}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},{"start":{"line":26,"column":1},"end":{"line":26,"column":1}}]},"2":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":19},"end":{"line":31,"column":34}},{"start":{"line":31,"column":38},"end":{"line":31,"column":40}}]},"3":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":26},"end":{"line":33,"column":48}},{"start":{"line":33,"column":52},"end":{"line":33,"column":56}}]},"4":{"line":34,"type":"cond-expr","locations":[{"start":{"line":34,"column":29},"end":{"line":34,"column":38}},{"start":{"line":34,"column":40},"end":{"line":34,"column":43}}]},"5":{"line":35,"type":"binary-expr","locations":[{"start":{"line":35,"column":14},"end":{"line":35,"column":24}},{"start":{"line":35,"column":28},"end":{"line":35,"column":33}}]},"6":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":3},"end":{"line":62,"column":3}},{"start":{"line":62,"column":3},"end":{"line":62,"column":3}}]},"7":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":3},"end":{"line":68,"column":3}},{"start":{"line":68,"column":3},"end":{"line":68,"column":3}}]},"8":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":3},"end":{"line":72,"column":3}},{"start":{"line":72,"column":3},"end":{"line":72,"column":3}}]},"9":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":3},"end":{"line":79,"column":3}},{"start":{"line":79,"column":3},"end":{"line":79,"column":3}}]},"10":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":3},"end":{"line":85,"column":3}},{"start":{"line":85,"column":3},"end":{"line":85,"column":3}}]},"11":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":4},"end":{"line":93,"column":4}},{"start":{"line":93,"column":4},"end":{"line":93,"column":4}}]},"12":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":1},"end":{"line":154,"column":1}},{"start":{"line":154,"column":1},"end":{"line":154,"column":1}}]},"13":{"line":167,"type":"if","locations":[{"start":{"line":167,"column":2},"end":{"line":167,"column":2}},{"start":{"line":167,"column":2},"end":{"line":167,"column":2}}]},"14":{"line":170,"type":"if","locations":[{"start":{"line":170,"column":2},"end":{"line":170,"column":2}},{"start":{"line":170,"column":2},"end":{"line":170,"column":2}}]},"15":{"line":173,"type":"if","locations":[{"start":{"line":173,"column":2},"end":{"line":173,"column":2}},{"start":{"line":173,"column":2},"end":{"line":173,"column":2}}]}},"code":["/**"," * A wrapper for Thorsten Joachims' SVM-perf package."," *"," * To use this wrapper, the SVM-perf executable (svm_perf_learn) should be in your path."," *"," * You can download SVM-perf here: http://www.cs.cornell.edu/people/tj/svm_light/svm_perf.html"," * subject to the copyright license."," *"," * @author Erel Segal-haLevi"," * @since 2013-09-02"," *"," * @param opts options: <ul>"," *\t<li>learn_args - a string with arguments for svm_perf_learn  (see http://www.cs.cornell.edu/people/tj/svm_light/svm_perf.html )"," *  <li>model_file_prefix - prefix to path to model file (optional; the default is to create a temporary file in the system temp folder)."," *  <li>bias - constant (bias) factor (default: 1)."," */","","var fs   = require('fs')","  , util  = require('util')","  , execSync = require('child_process').execSync","  , svmcommon = require('./svmcommon')","  , _ = require(\"underscore\")._;","","","function SvmPerf(opts) {","\tif (!SvmPerf.isInstalled()) {","\t \tvar msg = \"Cannot find the executable 'svm_perf_learn'. Please download it from the SvmPerf website, and put a link to it in your path.\";","\t \tconsole.error(msg)","\t \tthrow new Error(msg);","\t}","\tthis.learn_args = opts.learn_args || \"\";","\tthis.learn_args += \" --b 0 \";  // we add the bias here, so we don't need SvmPerf to add it","\tthis.model_file_prefix = opts.model_file_prefix || null;","\tthis.bias = 'bias' in opts? opts.bias: 1.0;","\tthis.debug = opts.debug || false;","\tthis.ShowFeat = {}","}","","SvmPerf.isInstalled = function() {","  try {","    var result = execSync(\"svm_perf_learn\");","  } catch (err) {","    return false;","  }","  return true","}","","var FIRST_FEATURE_NUMBER=1;  // in svm perf, feature numbers start with 1, not 0!","","SvmPerf.prototype = {","\t\ttrainOnline: function(features, expected) {","\t\t\t//throw new Error(\"SVM-perf does not support online training\");","\t\t\tconsole.error(\"SVM-perf does not support online training\");","\t\t},","","\t\t/**","\t\t * Send the given dataset to svm_perf_learn.","\t\t *","\t\t * @param dataset an array of samples of the form {input: [value1, value2, ...] , output: 0/1}","\t\t */","\t\ttrainBatch: function(dataset) {","\t\t\tif (this.debug) console.log(\"trainBatch start\");","","\t\t\tvar timestamp = new Date().getTime()+\"_\"+process.pid","\t\t\tvar learnFile = svmcommon.writeDatasetToFile(dataset, this.bias, /*binarize=*/true, this.model_file_prefix+\"_\"+timestamp, \"SvmPerf\", FIRST_FEATURE_NUMBER);","\t\t\tvar modelFile = learnFile.replace(/[.]learn/,\".model\");","\t\t\tvar command = \"svm_perf_learn \"+this.learn_args+\" \"+learnFile + \" \"+modelFile;","\t\t\tif (this.debug) console.log(\"running \"+command);","\t\t\tconsole.log(command)","","\t\t\tvar result = execSync(command);","\t\t\tif (result.code>0) {","\t\t\t\tconsole.dir(result);","\t\t\t\tconsole.log(fs.readFileSync(learnFile, 'utf-8'));","\t\t\t\tthrow new Error(\"Failed to execute: \"+command);","\t\t\t}","","\t\t\tthis.setModel(fs.readFileSync(modelFile, \"utf-8\"));","\t\t\tif (this.debug) console.log(\"trainBatch end\");","\t\t},","","\t\tsetModel: function(modelString) {","\t\t\tthis.modelString = modelString;","\t\t\tthis.mapFeatureToWeight = modelStringToModelMap(modelString);  // weights in modelMap start from 0 (- the bias).","\t\t\tif (this.debug) console.dir(this.mapFeatureToWeight);","\t\t\t// console.log(\"maps\"+JSON.stringify(_.keys(this.mapFeatureToWeight).length, null, 4))","\t\t\t// process.exit(0)","\t\t},","","\t\tgetFeatures: function() {","\t\t\tvar featlist = []","\t\t\t_.each(this.mapFeatureToWeight, function(weight, index, list){","\t\t\t\tif (parseInt(index) == 0)","\t\t\t\t\tfeatlist.push(['bias', weight])","\t\t\t\telse","\t\t\t\t\tfeatlist.push([this.featureLookupTable.numberToFeature(parseInt(index)-1), weight])","\t\t\t}, this)","\t\t\tfeatlist = _.sortBy(featlist, function(num){return num[1]})","\t\t\treturn featlist","\t\t},","","\t\tgetModelWeights: function() {","\t\t\treturn this.mapFeatureToWeight;","\t\t},","","\t\t/**","\t\t * @param features - a feature-value hash.","\t\t * @param explain - int - if positive, an \"explanation\" field, with the given length, will be added to the result.","\t\t * @param continuous_output if true, return the net classification score. If false [default], return 0 or 1.","\t\t * @return the binary classification - 0 or 1.","\t\t */","\t\tclassify: function(features, explain, continuous_output) {","\t\t\treturn svmcommon.classifyWithModelMap(","\t\t\t\t\tthis.mapFeatureToWeight, this.bias, features, explain, continuous_output, this.featureLookupTable);","\t\t},","","\t\t/**","\t\t * Link to a FeatureLookupTable from a higher level in the hierarchy (typically from an EnhancedClassifier), used ONLY for generating meaningful explanations.","\t\t */","\t\tsetFeatureLookupTable: function(featureLookupTable) {","\t\t\t//console.log(\"SVMPERF setFeatureLookupTable \"+featureLookupTable);","\t\t\tthis.featureLookupTable = featureLookupTable;","\t\t},","","\t\ttoJSON: function() {","\t\t\treturn this.mapFeatureToWeight;","\t\t},","","\t\tfromJSON: function(json) {","\t\t\tthis.mapFeatureToWeight = json;","\t\t},","};","","","/*"," * UTILS"," */","","var SVM_PERF_MODEL_PATTERN = new RegExp(","\t\t\"[\\\\S\\\\s]*\"+","\t\t\"^([\\\\S\\\\s]*) # threshold b[\\\\S\\\\s]*\"+  // parse the threshold line","\t\t\"^([\\\\S\\\\s]*) #[\\\\S\\\\s]*\" + // parse the weights line","\t\t\"\", \"m\");","","var MIN_WEIGHT = 1e-5; // weights smaller than this are ignored, to save space","","/**"," * A utility that converts a model in the SVMPerf format to a map of feature weights."," * @param modelString a string."," * @returns a map."," */","function modelStringToModelMap(modelString) {","\tvar matches = SVM_PERF_MODEL_PATTERN.exec(modelString);","\tif (!matches) {","\t\tconsole.log(modelString);","\t\tthrow new Error(\"Model does not match SVM-perf format\");","\t};","\t//var threshold = parseFloat(matches[1]);  // not needed - we use our own bias","\tvar featuresAndWeights = matches[2].split(\" \");","\tvar mapFeatureToWeight = {};","\t//mapFeatureToWeight.threshold = threshold; // not needed - we use our own bias","","\t//String alphaTimesY = featuresAndWeights[0]; // always 1 in svmperf","\tfor (var i=1; i<featuresAndWeights.length; ++i) {","\t\tvar featureAndWeight = featuresAndWeights[i];","\t\tvar featureWeight = featureAndWeight.split(\":\");","\t\tif (featureWeight.length!=2)","\t\t\tthrow new Error(\"Model featureAndWeight doesn't match svm-perf pattern: featureAndWeight=\"+featureAndWeight);","\t\tvar feature = parseInt(featureWeight[0]);","\t\tif (feature<=0)","\t\t\tthrow new IllegalArgumentException(\"Non-positive feature id: featureAndWeight=\"+featureAndWeight);","\t\tvar weight = parseFloat(featureWeight[1]);","\t\tif (Math.abs(weight)>=MIN_WEIGHT)","\t\t\tmapFeatureToWeight[feature-FIRST_FEATURE_NUMBER]=weight;   // start feature values from 0.","\t\t\t// Note: if there is bias, then mapFeatureToWeight[0] is its weight.","\t}","\treturn mapFeatureToWeight;","}","","","","module.exports = SvmPerf;",""],"l":{"18":1,"25":1,"26":2,"27":2,"28":2,"29":2,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"39":1,"40":2,"41":2,"43":2,"45":0,"48":1,"50":1,"53":0,"62":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"71":0,"72":0,"73":0,"74":0,"75":0,"78":0,"79":0,"83":0,"84":0,"85":0,"91":0,"92":0,"93":0,"94":0,"96":0,"98":0,"99":0,"103":0,"113":0,"122":0,"126":0,"130":0,"139":1,"145":1,"152":1,"153":0,"154":0,"155":0,"156":0,"159":0,"160":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"177":0,"182":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/svm/svmcommon.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/svm/svmcommon.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":14,"loc":{"start":{"line":14,"column":36},"end":{"line":14,"column":130}}},"2":{"name":"(anonymous_2)","line":40,"loc":{"start":{"line":40,"column":38},"end":{"line":40,"column":122}}},"3":{"name":"(anonymous_3)","line":84,"loc":{"start":{"line":84,"column":20},"end":{"line":84,"column":33}}},"4":{"name":"(anonymous_4)","line":85,"loc":{"start":{"line":85,"column":44},"end":{"line":85,"column":57}}},"5":{"name":"(anonymous_5)","line":92,"loc":{"start":{"line":92,"column":35},"end":{"line":92,"column":47}}},"6":{"name":"(anonymous_6)","line":97,"loc":{"start":{"line":97,"column":41},"end":{"line":97,"column":54}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":8,"column":31}},"2":{"start":{"line":14,"column":0},"end":{"line":28,"column":1}},"3":{"start":{"line":15,"column":1},"end":{"line":22,"column":2}},"4":{"start":{"line":16,"column":2},"end":{"line":16,"column":45}},"5":{"start":{"line":17,"column":2},"end":{"line":17,"column":39}},"6":{"start":{"line":19,"column":2},"end":{"line":19,"column":82}},"7":{"start":{"line":20,"column":2},"end":{"line":20,"column":32}},"8":{"start":{"line":21,"column":2},"end":{"line":21,"column":23}},"9":{"start":{"line":23,"column":1},"end":{"line":23,"column":88}},"10":{"start":{"line":24,"column":1},"end":{"line":24,"column":35}},"11":{"start":{"line":25,"column":1},"end":{"line":25,"column":18}},"12":{"start":{"line":27,"column":1},"end":{"line":27,"column":18}},"13":{"start":{"line":40,"column":0},"end":{"line":107,"column":1}},"14":{"start":{"line":41,"column":1},"end":{"line":41,"column":38}},"15":{"start":{"line":41,"column":16},"end":{"line":41,"column":38}},"16":{"start":{"line":42,"column":1},"end":{"line":42,"column":16}},"17":{"start":{"line":43,"column":1},"end":{"line":56,"column":2}},"18":{"start":{"line":44,"column":2},"end":{"line":44,"column":27}},"19":{"start":{"line":45,"column":2},"end":{"line":45,"column":35}},"20":{"start":{"line":46,"column":2},"end":{"line":46,"column":21}},"21":{"start":{"line":47,"column":2},"end":{"line":54,"column":4}},"22":{"start":{"line":47,"column":17},"end":{"line":54,"column":4}},"23":{"start":{"line":58,"column":1},"end":{"line":75,"column":2}},"24":{"start":{"line":59,"column":2},"end":{"line":59,"column":55}},"25":{"start":{"line":60,"column":2},"end":{"line":74,"column":3}},"26":{"start":{"line":61,"column":3},"end":{"line":61,"column":44}},"27":{"start":{"line":62,"column":3},"end":{"line":62,"column":33}},"28":{"start":{"line":63,"column":3},"end":{"line":63,"column":32}},"29":{"start":{"line":64,"column":3},"end":{"line":64,"column":23}},"30":{"start":{"line":66,"column":3},"end":{"line":73,"column":5}},"31":{"start":{"line":66,"column":18},"end":{"line":73,"column":5}},"32":{"start":{"line":77,"column":1},"end":{"line":78,"column":28}},"33":{"start":{"line":78,"column":2},"end":{"line":78,"column":28}},"34":{"start":{"line":79,"column":1},"end":{"line":82,"column":2}},"35":{"start":{"line":80,"column":2},"end":{"line":80,"column":28}},"36":{"start":{"line":81,"column":2},"end":{"line":81,"column":95}},"37":{"start":{"line":83,"column":1},"end":{"line":106,"column":2}},"38":{"start":{"line":84,"column":2},"end":{"line":84,"column":87}},"39":{"start":{"line":84,"column":34},"end":{"line":84,"column":84}},"40":{"start":{"line":85,"column":2},"end":{"line":85,"column":86}},"41":{"start":{"line":85,"column":59},"end":{"line":85,"column":83}},"42":{"start":{"line":90,"column":2},"end":{"line":99,"column":3}},"43":{"start":{"line":92,"column":3},"end":{"line":95,"column":6}},"44":{"start":{"line":94,"column":4},"end":{"line":94,"column":36}},"45":{"start":{"line":97,"column":3},"end":{"line":97,"column":82}},"46":{"start":{"line":97,"column":56},"end":{"line":97,"column":70}},"47":{"start":{"line":100,"column":2},"end":{"line":103,"column":4}},"48":{"start":{"line":105,"column":2},"end":{"line":105,"column":16}}},"branchMap":{"1":{"line":15,"type":"if","locations":[{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},{"start":{"line":15,"column":1},"end":{"line":15,"column":1}}]},"2":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},{"start":{"line":41,"column":1},"end":{"line":41,"column":1}}]},"3":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},{"start":{"line":43,"column":1},"end":{"line":43,"column":1}}]},"4":{"line":43,"type":"binary-expr","locations":[{"start":{"line":43,"column":5},"end":{"line":43,"column":9}},{"start":{"line":43,"column":13},"end":{"line":43,"column":24}}]},"5":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":2},"end":{"line":47,"column":2}},{"start":{"line":47,"column":2},"end":{"line":47,"column":2}}]},"6":{"line":59,"type":"cond-expr","locations":[{"start":{"line":59,"column":50},"end":{"line":59,"column":51}},{"start":{"line":59,"column":52},"end":{"line":59,"column":53}}]},"7":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":2},"end":{"line":60,"column":2}},{"start":{"line":60,"column":2},"end":{"line":60,"column":2}}]},"8":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":3},"end":{"line":66,"column":3}},{"start":{"line":66,"column":3},"end":{"line":66,"column":3}}]},"9":{"line":68,"type":"cond-expr","locations":[{"start":{"line":68,"column":36},"end":{"line":68,"column":84}},{"start":{"line":68,"column":87},"end":{"line":68,"column":94}}]},"10":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":36},"end":{"line":68,"column":79}},{"start":{"line":68,"column":81},"end":{"line":68,"column":84}}]},"11":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},{"start":{"line":77,"column":1},"end":{"line":77,"column":1}}]},"12":{"line":78,"type":"cond-expr","locations":[{"start":{"line":78,"column":22},"end":{"line":78,"column":23}},{"start":{"line":78,"column":25},"end":{"line":78,"column":26}}]},"13":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":1},"end":{"line":79,"column":1}},{"start":{"line":79,"column":1},"end":{"line":79,"column":1}}]},"14":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},{"start":{"line":83,"column":1},"end":{"line":83,"column":1}}]},"15":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":2},"end":{"line":90,"column":2}},{"start":{"line":90,"column":2},"end":{"line":90,"column":2}}]}},"code":["/**"," * Utilities common to SVM wrappers"," */","","var temp = require('temp')","  , fs   = require('fs')","  , svmlight = require('../../formats/svmlight')","  , _ = require('underscore')._","","/**"," * Writes the given dataset to a file in svm-light format."," * @return the file name."," */","module.exports.writeDatasetToFile = function(dataset, bias, binarize, model_file_prefix, default_file_prefix, firstFeatureNumber) {","\tif (model_file_prefix) {","\t\tvar learnFile = model_file_prefix+\".learn\";","\t\tvar fd = fs.openSync(learnFile, 'w');","\t} else {","\t\tvar tempFile = temp.openSync({prefix:default_file_prefix+\"-\", suffix:\".learn\"});","\t\tvar learnFile = tempFile.path;","\t\tvar fd = tempFile.fd;","\t}","\tvar datasetSvmlight = svmlight.toSvmLight(dataset, bias, binarize, firstFeatureNumber);","\tfs.writeSync(fd, datasetSvmlight);","\tfs.closeSync(fd);","\t","\treturn learnFile;","}","","/**"," * A utility that classifies a given sample (given as a feature-value map) using a model (given as a feature-weight map)."," * @param modelMap a map {feature_i: weight_i, ....} (i >= 0; 0 is the weight of the bias, if exists)."," * @param bias if nonzero, added at the beginning of features."," * @param features a map {feature_i: value_i, ....} (i >= 1)"," * @param explain (int) if positive, generate explanation about the classification."," * @param continuous_output (boolean) if true, return a score; if false, return 0 or 1."," * @param featureLookupTable if not null, used for creating meaningful explanations."," * @returns a classification value."," */","module.exports.classifyWithModelMap = function (modelMap, bias, features, explain, continuous_output, featureLookupTable) {","\tif (explain>0) var explanations = [];","\tvar result = 0;","\tif (bias && modelMap[0]) {","\t\tvar weight = modelMap[0];","\t\tvar relevance = bias*modelMap[0];","\t\tresult = relevance;","\t\tif (explain>0) explanations.push(","\t\t\t\t{","\t\t\t\t\tfeature: 'bias',","\t\t\t\t\tvalue: bias,","\t\t\t\t\tweight: weight,","\t\t\t\t\trelevance: relevance,","\t\t\t\t}","\t\t);","\t\t","\t}","\t","\tfor (var feature in features) {","\t\tvar featureInModelMap = parseInt(feature)+(bias?1:0);","\t\tif (featureInModelMap in modelMap) {","\t\t\tvar weight = modelMap[featureInModelMap];","\t\t\tvar value = features[feature];","\t\t\tvar relevance = weight*value;","\t\t\tresult += relevance;","","\t\t\tif (explain>0) explanations.push(","\t\t\t\t\t{","\t\t\t\t\t\tfeature: featureLookupTable? (featureLookupTable.numberToFeature(feature)||\"?\"): feature,","\t\t\t\t\t\tvalue: value,","\t\t\t\t\t\tweight: weight,","\t\t\t\t\t\trelevance: relevance,","\t\t\t\t\t}","\t\t\t);","\t\t}","\t}","\t","\tif (!continuous_output)","\t\tresult = (result>0? 1: 0);","\tif (_.isNaN(result)) {","\t\tconsole.dir(explanations);","\t\tthrow new Error(\"result is NaN when classifying \"+features+\" with \"+JSON.stringify(modelMap))","\t}","\tif (explain>0) {","\t\texplanations.sort(function(a,b){return Math.abs(b.relevance)-Math.abs(a.relevance)});","\t\tvar explanations = _.filter(explanations, function(num){ return num.relevance!=0 });","","\t\t// explanations.splice(explain, explanations.length-explain);  // \"explain\" is the max length of explanation.","","\t\t","\t\tif (!this.detailed_explanations) {","\t\t\t// var sprintf = require('sprintf').sprintf;","\t\t\texplanations = explanations.map(function(e) {","\t\t\t\t// return sprintf(\"%s%+1.2f\", e.feature, e.relevance);","\t\t\t\treturn [e.feature, e.relevance];","\t\t\t});","","\t\t\texplanations = _.sortBy(explanations, function(num){ return num[1] }).reverse()","","\t\t}","\t\treturn {","\t\t\tclassification: result,","\t\t\texplanation: explanations","\t\t};","\t} else {","\t\treturn result;","\t}","}","",""],"l":{"5":1,"14":1,"15":0,"16":0,"17":0,"19":0,"20":0,"21":0,"23":0,"24":0,"25":0,"27":0,"40":1,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"66":0,"77":0,"78":0,"79":0,"80":0,"81":0,"83":0,"84":0,"85":0,"90":0,"92":0,"94":0,"97":0,"100":0,"105":0}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/formats/svmlight.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/formats/svmlight.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":21},"end":{"line":15,"column":75}}},"2":{"name":"featureArrayToFeatureString","line":33,"loc":{"start":{"line":33,"column":0},"end":{"line":33,"column":73}}}},"statementMap":{"1":{"start":{"line":15,"column":0},"end":{"line":26,"column":1}},"2":{"start":{"line":16,"column":1},"end":{"line":16,"column":16}},"3":{"start":{"line":17,"column":1},"end":{"line":23,"column":2}},"4":{"start":{"line":18,"column":2},"end":{"line":21,"column":4}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":16}},"6":{"start":{"line":24,"column":1},"end":{"line":24,"column":15}},"7":{"start":{"line":25,"column":1},"end":{"line":25,"column":14}},"8":{"start":{"line":33,"column":0},"end":{"line":43,"column":1}},"9":{"start":{"line":34,"column":1},"end":{"line":35,"column":73}},"10":{"start":{"line":35,"column":2},"end":{"line":35,"column":73}},"11":{"start":{"line":36,"column":1},"end":{"line":36,"column":56}},"12":{"start":{"line":37,"column":1},"end":{"line":41,"column":2}},"13":{"start":{"line":38,"column":2},"end":{"line":38,"column":32}},"14":{"start":{"line":39,"column":2},"end":{"line":40,"column":82}},"15":{"start":{"line":40,"column":3},"end":{"line":40,"column":82}},"16":{"start":{"line":42,"column":1},"end":{"line":42,"column":13}}},"branchMap":{"1":{"line":18,"type":"cond-expr","locations":[{"start":{"line":18,"column":19},"end":{"line":18,"column":23}},{"start":{"line":18,"column":25},"end":{"line":18,"column":27}}]},"2":{"line":19,"type":"cond-expr","locations":[{"start":{"line":19,"column":15},"end":{"line":19,"column":45}},{"start":{"line":19,"column":48},"end":{"line":19,"column":65}}]},"3":{"line":19,"type":"cond-expr","locations":[{"start":{"line":19,"column":36},"end":{"line":19,"column":39}},{"start":{"line":19,"column":41},"end":{"line":19,"column":45}}]},"4":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},{"start":{"line":34,"column":1},"end":{"line":34,"column":1}}]},"5":{"line":36,"type":"cond-expr","locations":[{"start":{"line":36,"column":19},"end":{"line":36,"column":50}},{"start":{"line":36,"column":52},"end":{"line":36,"column":54}}]},"6":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":2},"end":{"line":39,"column":2}},{"start":{"line":39,"column":2},"end":{"line":39,"column":2}}]},"7":{"line":40,"type":"cond-expr","locations":[{"start":{"line":40,"column":50},"end":{"line":40,"column":51}},{"start":{"line":40,"column":52},"end":{"line":40,"column":53}}]}},"code":["/**"," * Small utility for writing a dataset in SVM-light format."," *"," * @author Erel Segal-Halevi"," * @since 2013-09"," */","","","/**"," * convert a single dataset to compact JSON format."," * @param dataset an array of samples in the format {input: [value1, value2, ...], output: (0|1)}"," * @param bias if nonzero, add it at the beginning of the vector."," * @param binarize if true, change output to -1/1. If false, leave output as it is"," */","exports.toSvmLight = function(dataset, bias, binarize, firstFeatureNumber) {","\tvar lines = \"\";","\tfor (var i=0; i<dataset.length; ++i) {","\t\tvar line = (i>0? \"\\n\": \"\") + ","\t\t\t(binarize? (dataset[i].output>0? \"1\": \"-1\"): dataset[i].output) +  // in svm-light, the output comes first:","\t\t\tfeatureArrayToFeatureString(dataset[i].input, bias, firstFeatureNumber)","\t\t\t;","\t\tlines += line;","\t};","\tlines += \"\\n\";","\treturn lines;","}","","","","/**"," * convert an array of features to a single line in SVM-light format. The line starts with a space."," */","function featureArrayToFeatureString(features, bias, firstFeatureNumber) {","\tif (!Array.isArray(features))","\t\tthrow new Error(\"Expected an array, but got \"+JSON.stringify(features))","\tvar line = (bias? \" \"+firstFeatureNumber+\":\"+bias: \"\");","\tfor (var feature=0; feature<features.length; ++feature) {","\t\tvar value = features[feature];","\t\tif (value)","\t\t\tline += (\" \"+(feature+firstFeatureNumber+(bias?1:0))+\":\"+value.toPrecision(5));","\t}","\treturn line;","}",""],"l":{"15":1,"16":0,"17":0,"18":0,"22":0,"24":0,"25":0,"33":1,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"42":0}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/svm/SvmLinear.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/svm/SvmLinear.js","s":{"1":1,"2":1,"3":1,"4":4,"5":4,"6":4,"7":4,"8":4,"9":4,"10":4,"11":4,"12":4,"13":4,"14":4,"15":4,"16":1,"17":4,"18":4,"19":4,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":1,"100":1,"101":1,"102":1,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":1},"b":{"1":[4,0],"2":[4,0],"3":[4,4],"4":[4,2],"5":[4,4],"6":[4,2],"7":[4,2],"8":[4,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0]},"f":{"1":4,"2":4,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},"fnMap":{"1":{"name":"SvmLinear","line":29,"loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":25}}},"2":{"name":"(anonymous_2)","line":46,"loc":{"start":{"line":46,"column":24},"end":{"line":46,"column":35}}},"3":{"name":"(anonymous_3)","line":56,"loc":{"start":{"line":56,"column":15},"end":{"line":56,"column":44}}},"4":{"name":"(anonymous_4)","line":65,"loc":{"start":{"line":65,"column":14},"end":{"line":65,"column":32}}},"5":{"name":"(anonymous_5)","line":69,"loc":{"start":{"line":69,"column":19},"end":{"line":69,"column":45}}},"6":{"name":"(anonymous_6)","line":80,"loc":{"start":{"line":80,"column":28},"end":{"line":80,"column":43}}},"7":{"name":"(anonymous_7)","line":85,"loc":{"start":{"line":85,"column":35},"end":{"line":85,"column":50}}},"8":{"name":"(anonymous_8)","line":115,"loc":{"start":{"line":115,"column":12},"end":{"line":115,"column":38}}},"9":{"name":"(anonymous_9)","line":123,"loc":{"start":{"line":123,"column":19},"end":{"line":123,"column":30}}},"10":{"name":"(anonymous_10)","line":136,"loc":{"start":{"line":136,"column":17},"end":{"line":136,"column":36}}},"11":{"name":"(anonymous_11)","line":139,"loc":{"start":{"line":139,"column":20},"end":{"line":139,"column":46}}},"12":{"name":"(anonymous_12)","line":156,"loc":{"start":{"line":156,"column":12},"end":{"line":156,"column":59}}},"13":{"name":"(anonymous_13)","line":193,"loc":{"start":{"line":193,"column":15},"end":{"line":193,"column":29}}},"14":{"name":"(anonymous_14)","line":198,"loc":{"start":{"line":198,"column":20},"end":{"line":198,"column":36}}},"15":{"name":"(anonymous_15)","line":223,"loc":{"start":{"line":223,"column":25},"end":{"line":223,"column":54}}},"16":{"name":"(anonymous_16)","line":227,"loc":{"start":{"line":227,"column":10},"end":{"line":227,"column":21}}},"17":{"name":"(anonymous_17)","line":231,"loc":{"start":{"line":231,"column":12},"end":{"line":231,"column":27}}},"18":{"name":"modelStringToModelMap","line":259,"loc":{"start":{"line":259,"column":0},"end":{"line":259,"column":44}}}},"statementMap":{"1":{"start":{"line":19,"column":1},"end":{"line":24,"column":32}},"2":{"start":{"line":26,"column":1},"end":{"line":26,"column":28}},"3":{"start":{"line":29,"column":0},"end":{"line":44,"column":1}},"4":{"start":{"line":30,"column":1},"end":{"line":30,"column":41}},"5":{"start":{"line":31,"column":1},"end":{"line":31,"column":57}},"6":{"start":{"line":32,"column":1},"end":{"line":32,"column":30}},"7":{"start":{"line":33,"column":1},"end":{"line":33,"column":44}},"8":{"start":{"line":34,"column":1},"end":{"line":34,"column":32}},"9":{"start":{"line":35,"column":1},"end":{"line":35,"column":62}},"10":{"start":{"line":36,"column":1},"end":{"line":36,"column":59}},"11":{"start":{"line":37,"column":1},"end":{"line":37,"column":20}},"12":{"start":{"line":39,"column":1},"end":{"line":43,"column":3}},"13":{"start":{"line":40,"column":16},"end":{"line":40,"column":156}},"14":{"start":{"line":41,"column":16},"end":{"line":41,"column":34}},"15":{"start":{"line":42,"column":16},"end":{"line":42,"column":37}},"16":{"start":{"line":46,"column":0},"end":{"line":53,"column":2}},"17":{"start":{"line":47,"column":1},"end":{"line":51,"column":2}},"18":{"start":{"line":48,"column":5},"end":{"line":48,"column":62}},"19":{"start":{"line":50,"column":5},"end":{"line":50,"column":17}},"20":{"start":{"line":52,"column":1},"end":{"line":52,"column":12}},"21":{"start":{"line":55,"column":0},"end":{"line":234,"column":2}},"22":{"start":{"line":57,"column":3},"end":{"line":57,"column":65}},"23":{"start":{"line":66,"column":3},"end":{"line":66,"column":56}},"24":{"start":{"line":69,"column":3},"end":{"line":77,"column":20}},"25":{"start":{"line":70,"column":4},"end":{"line":76,"column":6}},"26":{"start":{"line":71,"column":5},"end":{"line":76,"column":6}},"27":{"start":{"line":73,"column":6},"end":{"line":73,"column":47}},"28":{"start":{"line":74,"column":6},"end":{"line":74,"column":56}},"29":{"start":{"line":75,"column":6},"end":{"line":75,"column":21}},"30":{"start":{"line":80,"column":3},"end":{"line":83,"column":20}},"31":{"start":{"line":81,"column":4},"end":{"line":82,"column":35}},"32":{"start":{"line":82,"column":5},"end":{"line":82,"column":35}},"33":{"start":{"line":83,"column":4},"end":{"line":83,"column":17}},"34":{"start":{"line":85,"column":3},"end":{"line":85,"column":73}},"35":{"start":{"line":85,"column":51},"end":{"line":85,"column":70}},"36":{"start":{"line":86,"column":3},"end":{"line":86,"column":53}},"37":{"start":{"line":92,"column":3},"end":{"line":93,"column":11}},"38":{"start":{"line":93,"column":4},"end":{"line":93,"column":11}},"39":{"start":{"line":95,"column":3},"end":{"line":95,"column":51}},"40":{"start":{"line":95,"column":19},"end":{"line":95,"column":51}},"41":{"start":{"line":96,"column":3},"end":{"line":97,"column":123}},"42":{"start":{"line":98,"column":3},"end":{"line":98,"column":58}},"43":{"start":{"line":100,"column":3},"end":{"line":100,"column":86}},"44":{"start":{"line":101,"column":3},"end":{"line":101,"column":35}},"45":{"start":{"line":103,"column":3},"end":{"line":103,"column":48}},"46":{"start":{"line":104,"column":3},"end":{"line":108,"column":4}},"47":{"start":{"line":105,"column":4},"end":{"line":105,"column":24}},"48":{"start":{"line":106,"column":4},"end":{"line":106,"column":53}},"49":{"start":{"line":107,"column":4},"end":{"line":107,"column":51}},"50":{"start":{"line":110,"column":3},"end":{"line":110,"column":36}},"51":{"start":{"line":112,"column":3},"end":{"line":112,"column":49}},"52":{"start":{"line":112,"column":19},"end":{"line":112,"column":49}},"53":{"start":{"line":117,"column":3},"end":{"line":117,"column":63}},"54":{"start":{"line":118,"column":3},"end":{"line":118,"column":79}},"55":{"start":{"line":119,"column":3},"end":{"line":119,"column":67}},"56":{"start":{"line":120,"column":3},"end":{"line":120,"column":66}},"57":{"start":{"line":120,"column":19},"end":{"line":120,"column":66}},"58":{"start":{"line":124,"column":3},"end":{"line":125,"column":67}},"59":{"start":{"line":125,"column":32},"end":{"line":125,"column":67}},"60":{"start":{"line":126,"column":3},"end":{"line":126,"column":101}},"61":{"start":{"line":139,"column":3},"end":{"line":141,"column":11}},"62":{"start":{"line":140,"column":4},"end":{"line":140,"column":28}},"63":{"start":{"line":143,"column":3},"end":{"line":144,"column":145}},"64":{"start":{"line":146,"column":3},"end":{"line":146,"column":109}},"65":{"start":{"line":148,"column":3},"end":{"line":148,"column":47}},"66":{"start":{"line":149,"column":3},"end":{"line":149,"column":23}},"67":{"start":{"line":151,"column":3},"end":{"line":151,"column":82}},"68":{"start":{"line":153,"column":3},"end":{"line":153,"column":16}},"69":{"start":{"line":158,"column":3},"end":{"line":159,"column":39}},"70":{"start":{"line":159,"column":4},"end":{"line":159,"column":39}},"71":{"start":{"line":161,"column":3},"end":{"line":172,"column":4}},"72":{"start":{"line":162,"column":4},"end":{"line":165,"column":53}},"73":{"start":{"line":166,"column":4},"end":{"line":171,"column":14}},"74":{"start":{"line":173,"column":3},"end":{"line":173,"column":19}},"75":{"start":{"line":174,"column":3},"end":{"line":174,"column":40}},"76":{"start":{"line":174,"column":18},"end":{"line":174,"column":40}},"77":{"start":{"line":175,"column":3},"end":{"line":191,"column":4}},"78":{"start":{"line":176,"column":4},"end":{"line":176,"column":70}},"79":{"start":{"line":178,"column":4},"end":{"line":179,"column":108}},"80":{"start":{"line":181,"column":4},"end":{"line":181,"column":79}},"81":{"start":{"line":183,"column":4},"end":{"line":183,"column":49}},"82":{"start":{"line":184,"column":4},"end":{"line":188,"column":5}},"83":{"start":{"line":185,"column":5},"end":{"line":187,"column":35}},"84":{"start":{"line":190,"column":4},"end":{"line":190,"column":31}},"85":{"start":{"line":193,"column":3},"end":{"line":193,"column":49}},"86":{"start":{"line":193,"column":30},"end":{"line":193,"column":46}},"87":{"start":{"line":195,"column":3},"end":{"line":205,"column":4}},"88":{"start":{"line":196,"column":4},"end":{"line":204,"column":5}},"89":{"start":{"line":197,"column":5},"end":{"line":197,"column":27}},"90":{"start":{"line":198,"column":5},"end":{"line":201,"column":8}},"91":{"start":{"line":199,"column":6},"end":{"line":199,"column":92}},"92":{"start":{"line":200,"column":6},"end":{"line":200,"column":18}},"93":{"start":{"line":203,"column":5},"end":{"line":203,"column":68}},"94":{"start":{"line":207,"column":3},"end":{"line":210,"column":31}},"95":{"start":{"line":211,"column":3},"end":{"line":217,"column":12}},"96":{"start":{"line":224,"column":3},"end":{"line":224,"column":48}},"97":{"start":{"line":228,"column":3},"end":{"line":228,"column":34}},"98":{"start":{"line":232,"column":3},"end":{"line":232,"column":34}},"99":{"start":{"line":241,"column":0},"end":{"line":241,"column":32}},"100":{"start":{"line":243,"column":0},"end":{"line":250,"column":11}},"101":{"start":{"line":252,"column":0},"end":{"line":252,"column":22}},"102":{"start":{"line":259,"column":0},"end":{"line":296,"column":1}},"103":{"start":{"line":260,"column":1},"end":{"line":260,"column":58}},"104":{"start":{"line":261,"column":1},"end":{"line":264,"column":2}},"105":{"start":{"line":262,"column":2},"end":{"line":262,"column":27}},"106":{"start":{"line":263,"column":2},"end":{"line":263,"column":60}},"107":{"start":{"line":265,"column":1},"end":{"line":265,"column":38}},"108":{"start":{"line":266,"column":1},"end":{"line":266,"column":39}},"109":{"start":{"line":267,"column":1},"end":{"line":270,"column":2}},"110":{"start":{"line":268,"column":2},"end":{"line":268,"column":29}},"111":{"start":{"line":269,"column":2},"end":{"line":269,"column":41}},"112":{"start":{"line":272,"column":1},"end":{"line":272,"column":32}},"113":{"start":{"line":275,"column":1},"end":{"line":275,"column":49}},"114":{"start":{"line":276,"column":1},"end":{"line":293,"column":2}},"115":{"start":{"line":277,"column":2},"end":{"line":277,"column":51}},"116":{"start":{"line":278,"column":2},"end":{"line":278,"column":16}},"117":{"start":{"line":279,"column":2},"end":{"line":280,"column":12}},"118":{"start":{"line":280,"column":3},"end":{"line":280,"column":12}},"119":{"start":{"line":283,"column":2},"end":{"line":284,"column":28}},"120":{"start":{"line":284,"column":3},"end":{"line":284,"column":28}},"121":{"start":{"line":285,"column":2},"end":{"line":286,"column":155}},"122":{"start":{"line":286,"column":3},"end":{"line":286,"column":155}},"123":{"start":{"line":287,"column":2},"end":{"line":292,"column":3}},"124":{"start":{"line":288,"column":3},"end":{"line":288,"column":30}},"125":{"start":{"line":289,"column":3},"end":{"line":289,"column":44}},"126":{"start":{"line":290,"column":3},"end":{"line":291,"column":56}},"127":{"start":{"line":291,"column":4},"end":{"line":291,"column":56}},"128":{"start":{"line":295,"column":1},"end":{"line":295,"column":37}},"129":{"start":{"line":300,"column":0},"end":{"line":300,"column":27}}},"branchMap":{"1":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":19},"end":{"line":30,"column":34}},{"start":{"line":30,"column":38},"end":{"line":30,"column":40}}]},"2":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":26},"end":{"line":31,"column":48}},{"start":{"line":31,"column":52},"end":{"line":31,"column":56}}]},"3":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":13},"end":{"line":32,"column":22}},{"start":{"line":32,"column":26},"end":{"line":32,"column":29}}]},"4":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":19},"end":{"line":33,"column":34}},{"start":{"line":33,"column":38},"end":{"line":33,"column":43}}]},"5":{"line":34,"type":"binary-expr","locations":[{"start":{"line":34,"column":14},"end":{"line":34,"column":24}},{"start":{"line":34,"column":26},"end":{"line":34,"column":31}}]},"6":{"line":35,"type":"binary-expr","locations":[{"start":{"line":35,"column":22},"end":{"line":35,"column":40}},{"start":{"line":35,"column":44},"end":{"line":35,"column":61}}]},"7":{"line":36,"type":"binary-expr","locations":[{"start":{"line":36,"column":21},"end":{"line":36,"column":38}},{"start":{"line":36,"column":42},"end":{"line":36,"column":58}}]},"8":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},{"start":{"line":39,"column":1},"end":{"line":39,"column":1}}]},"9":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":4},"end":{"line":70,"column":4}},{"start":{"line":70,"column":4},"end":{"line":70,"column":4}}]},"10":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":5},"end":{"line":71,"column":5}},{"start":{"line":71,"column":5},"end":{"line":71,"column":5}}]},"11":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":4},"end":{"line":81,"column":4}},{"start":{"line":81,"column":4},"end":{"line":81,"column":4}}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":3},"end":{"line":92,"column":3}},{"start":{"line":92,"column":3},"end":{"line":92,"column":3}}]},"13":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":3},"end":{"line":95,"column":3}},{"start":{"line":95,"column":3},"end":{"line":95,"column":3}}]},"14":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":3},"end":{"line":104,"column":3}},{"start":{"line":104,"column":3},"end":{"line":104,"column":3}}]},"15":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":3},"end":{"line":112,"column":3}},{"start":{"line":112,"column":3},"end":{"line":112,"column":3}}]},"16":{"line":120,"type":"if","locations":[{"start":{"line":120,"column":3},"end":{"line":120,"column":3}},{"start":{"line":120,"column":3},"end":{"line":120,"column":3}}]},"17":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":3},"end":{"line":124,"column":3}},{"start":{"line":124,"column":3},"end":{"line":124,"column":3}}]},"18":{"line":126,"type":"cond-expr","locations":[{"start":{"line":126,"column":28},"end":{"line":126,"column":61}},{"start":{"line":126,"column":63},"end":{"line":126,"column":99}}]},"19":{"line":158,"type":"if","locations":[{"start":{"line":158,"column":3},"end":{"line":158,"column":3}},{"start":{"line":158,"column":3},"end":{"line":158,"column":3}}]},"20":{"line":161,"type":"if","locations":[{"start":{"line":161,"column":3},"end":{"line":161,"column":3}},{"start":{"line":161,"column":3},"end":{"line":161,"column":3}}]},"21":{"line":163,"type":"cond-expr","locations":[{"start":{"line":163,"column":28},"end":{"line":163,"column":45}},{"start":{"line":164,"column":7},"end":{"line":165,"column":51}}]},"22":{"line":164,"type":"cond-expr","locations":[{"start":{"line":164,"column":25},"end":{"line":164,"column":28}},{"start":{"line":165,"column":25},"end":{"line":165,"column":51}}]},"23":{"line":166,"type":"cond-expr","locations":[{"start":{"line":167,"column":6},"end":{"line":170,"column":7}},{"start":{"line":171,"column":6},"end":{"line":171,"column":12}}]},"24":{"line":174,"type":"if","locations":[{"start":{"line":174,"column":3},"end":{"line":174,"column":3}},{"start":{"line":174,"column":3},"end":{"line":174,"column":3}}]},"25":{"line":181,"type":"cond-expr","locations":[{"start":{"line":181,"column":28},"end":{"line":181,"column":59}},{"start":{"line":181,"column":61},"end":{"line":181,"column":77}}]},"26":{"line":184,"type":"if","locations":[{"start":{"line":184,"column":4},"end":{"line":184,"column":4}},{"start":{"line":184,"column":4},"end":{"line":184,"column":4}}]},"27":{"line":184,"type":"binary-expr","locations":[{"start":{"line":184,"column":8},"end":{"line":184,"column":36}},{"start":{"line":184,"column":40},"end":{"line":184,"column":49}}]},"28":{"line":185,"type":"cond-expr","locations":[{"start":{"line":186,"column":6},"end":{"line":186,"column":44}},{"start":{"line":187,"column":6},"end":{"line":187,"column":34}}]},"29":{"line":195,"type":"if","locations":[{"start":{"line":195,"column":3},"end":{"line":195,"column":3}},{"start":{"line":195,"column":3},"end":{"line":195,"column":3}}]},"30":{"line":196,"type":"if","locations":[{"start":{"line":196,"column":4},"end":{"line":196,"column":4}},{"start":{"line":196,"column":4},"end":{"line":196,"column":4}}]},"31":{"line":203,"type":"cond-expr","locations":[{"start":{"line":203,"column":41},"end":{"line":203,"column":53}},{"start":{"line":203,"column":55},"end":{"line":203,"column":67}}]},"32":{"line":208,"type":"cond-expr","locations":[{"start":{"line":208,"column":26},"end":{"line":208,"column":38}},{"start":{"line":209,"column":5},"end":{"line":210,"column":29}}]},"33":{"line":209,"type":"cond-expr","locations":[{"start":{"line":209,"column":24},"end":{"line":209,"column":66}},{"start":{"line":210,"column":23},"end":{"line":210,"column":29}}]},"34":{"line":209,"type":"cond-expr","locations":[{"start":{"line":209,"column":40},"end":{"line":209,"column":52}},{"start":{"line":209,"column":54},"end":{"line":209,"column":66}}]},"35":{"line":211,"type":"cond-expr","locations":[{"start":{"line":212,"column":4},"end":{"line":216,"column":5}},{"start":{"line":217,"column":4},"end":{"line":217,"column":10}}]},"36":{"line":261,"type":"if","locations":[{"start":{"line":261,"column":1},"end":{"line":261,"column":1}},{"start":{"line":261,"column":1},"end":{"line":261,"column":1}}]},"37":{"line":279,"type":"if","locations":[{"start":{"line":279,"column":2},"end":{"line":279,"column":2}},{"start":{"line":279,"column":2},"end":{"line":279,"column":2}}]},"38":{"line":283,"type":"if","locations":[{"start":{"line":283,"column":2},"end":{"line":283,"column":2}},{"start":{"line":283,"column":2},"end":{"line":283,"column":2}}]},"39":{"line":283,"type":"binary-expr","locations":[{"start":{"line":283,"column":6},"end":{"line":283,"column":23}},{"start":{"line":283,"column":27},"end":{"line":283,"column":43}}]},"40":{"line":285,"type":"if","locations":[{"start":{"line":285,"column":2},"end":{"line":285,"column":2}},{"start":{"line":285,"column":2},"end":{"line":285,"column":2}}]},"41":{"line":290,"type":"if","locations":[{"start":{"line":290,"column":3},"end":{"line":290,"column":3}},{"start":{"line":290,"column":3},"end":{"line":290,"column":3}}]}},"code":["/**"," * A wrapper for the LibLinear package, by Fan, Chang, Hsieh, Wang and Lin."," *"," * To use this wrapper, the LibLinear executable (liblinear_train) should be in your path."," *"," * You can download LibLinear here: http://www.csie.ntu.edu.tw/~cjlin/liblinear/"," * subject to the copyright license."," *"," * @author Erel Segal-haLevi"," * @since 2013-09-09"," *"," * @param opts options: <ul>"," *\t<li>learn_args - a string with arguments for liblinear_train"," *  <li>model_file_prefix - prefix to path to model file (optional; the default is to create a temporary file in the system temp folder)."," *  <li>bias - constant (bias) factor (default: 1)."," *  <li>multiclass - if true, the 'classify' function returns an array [label,score]. If false (default), it returns only a score."," */"," "," var util  = require('util')","   , child_process = require('child_process')","   , exec = require('child_process').exec","   , fs   = require('fs')","   , svmcommon = require('./svmcommon')","   , _ = require('underscore')._",""," var FIRST_FEATURE_NUMBER=1;  // in lib linear, feature numbers start with 1","","","function SvmLinear(opts) {","\tthis.learn_args = opts.learn_args || \"\";","\tthis.model_file_prefix = opts.model_file_prefix || null;","\tthis.bias = opts.bias || 1.0;","\tthis.multiclass = opts.multiclass || false;","\tthis.debug = opts.debug||false;","\tthis.train_command = opts.train_command || 'liblinear_train';","\tthis.test_command = opts.test_command || 'liblinear_test';","\tthis.timestamp = \"\"","","\tif (!SvmLinear.isInstalled()) {","                var msg = \"Cannot find the executable 'liblinear_train'. Please download it from the LibLinear website, and put a link to it in your path.\";","                console.error(msg)","                throw new Error(msg);","  }","}","","SvmLinear.isInstalled = function() {","\ttry {","\t    var result = child_process.execSync('liblinear_train .');","\t} catch (err) {","\t    return false","\t}","\treturn true","};","","SvmLinear.prototype = {","\t\ttrainOnline: function(features, expected) {","\t\t\tthrow new Error(\"LibLinear does not support online training\");","\t\t},","","\t\t/**","\t\t * Send the given dataset to liblinear_train.","\t\t *","\t\t * @param dataset an array of samples of the form {input: [value1, value2, ...] , output: 0/1}","\t\t */","\t\ttrainBatch: function(dataset) {","\t\t\tthis.timestamp = new Date().getTime()+\"_\"+process.pid","","\t\t\t// check for multilabel","\t\t\t_.each(dataset, function(datum, key, list){","\t\t\t\tif (_.isArray(datum.output))","\t\t\t\t\tif (datum.output.length > 1)","\t\t\t\t\t{","\t\t\t\t\t\tconsole.log(\"Multi-label is not allowed\")","\t\t\t\t\t\tconsole.log(JSON.stringify(darum.output, null, 4))","\t\t\t\t\t\tprocess.exit(0)","\t\t\t\t\t}","            }, this)","","            //  convert all arraay-like outputs to just values","\t\t\tdataset = _.map(dataset, function(datum){","\t\t\t\tif (_.isArray(datum.output))","\t\t\t\t\tdatum.output = datum.output[0]","\t\t\t\treturn datum });","","\t\t\tthis.allLabels = _(dataset).map(function(datum){return datum.output});","\t\t\tthis.allLabels = _.uniq(_.flatten(this.allLabels))","","\t\t\t// dataset = _.map(dataset, function(datum){","\t\t\t// \tdatum.output = this.allLabels.indexOf(datum.output)","\t\t\t// \treturn datum });","","\t\t\tif (this.allLabels.length==1) // a single label","\t\t\t\treturn;","\t\t\t//console.log(util.inspect(dataset,{depth:1}));","\t\t\tif (this.debug) console.log(\"trainBatch start\");","\t\t\tvar learnFile = svmcommon.writeDatasetToFile(","\t\t\t\t\tdataset, this.bias, /*binarize=*/false, this.model_file_prefix+\"_\"+this.timestamp, \"SvmLinear\", FIRST_FEATURE_NUMBER);","\t\t\tvar modelFile = learnFile.replace(/[.]learn/,\".model\");","","\t\t\tvar command = this.train_command+\" \"+this.learn_args+\" \"+learnFile + \" \"+modelFile;","\t\t\tconsole.log(\"running \"+command);","","\t\t\tvar result = child_process.execSync(command);","\t\t\tif (result.code>0) {","\t\t\t\tconsole.dir(result);","\t\t\t\tconsole.log(fs.readFileSync(learnFile, 'utf-8'));","\t\t\t\tthrow new Error(\"Failed to execute: \"+command);","\t\t\t}","","\t\t\tthis.modelFileString = modelFile;","","\t\t\tif (this.debug) console.log(\"trainBatch end\");","\t\t},","","\t\tsetModel: function(modelFileString) {","\t\t\t// this.modelFileString = modelFileString;","\t\t\tthis.modelString = fs.readFileSync(modelFileString, \"utf-8\")","\t\t\tthis.mapLabelToMapFeatureToWeight = modelStringToModelMap(this.modelString);","\t\t\tthis.allLabels = Object.keys(this.mapLabelToMapFeatureToWeight);","\t\t\tif (this.debug) console.dir(this.mapLabelToMapFeatureToWeight);","\t\t},","","\t\tgetModelWeights: function() {","\t\t\tif (!this.mapLabelToMapFeatureToWeight)","                                this.setModel(this.modelFileString)","\t\t\treturn (this.multiclass? this.mapLabelToMapFeatureToWeight: this.mapLabelToMapFeatureToWeight[1]);","\t\t},","","\t\t/**","\t\t * @param features - a feature-value hash.","\t\t * @param explain - int - if positive, an \"explanation\" field, with the given length, will be added to the result.","\t\t * @param continuous_output if true, return the net classification score. If false [default], return 0 or 1.","\t\t * @return the binary classification - 0 or 1.","\t\t */","","\t\tclassifyBatch: function(trainset) {","","\t\t\t// console.log(JSON.stringify(this.modelFileString, null, 4))","\t\t\t_.each(trainset, function(value, key, list){","\t\t\t\ttrainset[key].output = 0","\t\t\t}, this)","","\t\t\tvar testFile = svmcommon.writeDatasetToFile(","                                        trainset, this.bias, /*binarize=*/false, \"/tmp/test_\"+this.timestamp, \"SvmLinear\", FIRST_FEATURE_NUMBER);","","\t\t\tvar command = this.test_command+\" \"+testFile + \" \" + this.modelFileString + \" /tmp/out_\" + this.timestamp;","","\t\t\tvar output = child_process.execSync(command)","\t\t\tconsole.log(command)","","\t\t\tvar result = fs.readFileSync(\"/tmp/out_\" + this.timestamp, \"utf-8\").split(\"\\n\")","","\t\t\treturn result","\t\t},","","\t\tclassify: function(features, explain, continuous_output) {","","\t\t\tif (!this.mapLabelToMapFeatureToWeight)","\t\t\t\tthis.setModel(this.modelFileString)","","\t\t\tif (this.allLabels.length==1) {  // a single label","\t\t\t\tvar result = (","\t\t\t\t\t\t!continuous_output?   this.allLabels[0]:","\t\t\t\t\t\t\t!this.multiclass? 1.0:","\t\t\t\t\t\t\t                  [[this.allLabels[0], 1.0]]);","\t\t\t\treturn (explain>0?","\t\t\t\t\t\t{","\t\t\t\t\t\t\tclasses: result,","\t\t\t\t\t\t\texplanation: [\"Single label (\"+result+\") - no classification needed\"],","\t\t\t\t\t\t}:","\t\t\t\t\t\tresult);","\t\t\t}","\t\t\tvar labels = [];","\t\t\tif (explain>0) var explanations = [];","\t\t\tfor (var label in this.mapLabelToMapFeatureToWeight) {","\t\t\t\tvar mapFeatureToWeight = this.mapLabelToMapFeatureToWeight[label];","","\t\t\t\tvar scoreWithExplain = svmcommon.classifyWithModelMap(","\t\t\t\t\tmapFeatureToWeight, this.bias, features, explain, /*continuous_output=*/true, this.featureLookupTable);","","\t\t\t\tvar score = (explain>0? scoreWithExplain.classification: scoreWithExplain);","","\t\t\t\tvar labelAndScore = [parseInt(label), score];","\t\t\t\tif (scoreWithExplain.explanation && explain>0) {","\t\t\t\t\tlabelAndScore.push(this.multiclass?","\t\t\t\t\t\tscoreWithExplain.explanation.join(\" \"):","\t\t\t\t\t\tscoreWithExplain.explanation)","\t\t\t\t}","","\t\t\t\tlabels.push(labelAndScore);","\t\t\t}","","\t\t\tlabels.sort(function(a,b) {return b[1]-a[1]}); // sort by decreasing score","","\t\t\tif (explain>0) {","\t\t\t\tif (this.multiclass) {","\t\t\t\t\tvar explanations = [];","\t\t\t\t\tlabels.forEach(function(datum) {","\t\t\t\t\t\texplanations.push(datum[0]+\": score=\"+JSON.stringify(datum[1])+\" features=\"+datum[2]);","\t\t\t\t\t\tdatum.pop();","\t\t\t\t\t});","\t\t\t\t} else {","\t\t\t\t\tvar explanations = (labels[0][0]>0? labels[0][2]: labels[1][2])","\t\t\t\t}","\t\t\t}","","\t\t\tvar result = (","\t\t\t\t!continuous_output?   labels[0][0]:","\t\t\t\t\t!this.multiclass? (labels[0][0]>0? labels[0][1]: labels[1][1]):","\t\t\t\t\t                  labels);","\t\t\treturn (explain>0?","\t\t\t\t{","\t\t\t\t\tclasses: result,","\t\t\t\t\tclassification: result,","\t\t\t\t\texplanation: explanations,","\t\t\t\t}:","\t\t\t\tresult);","\t\t},","","\t\t/**","\t\t * Link to a FeatureLookupTable from a higher level in the hierarchy (typically from an EnhancedClassifier), used ONLY for generating meaningful explanations.","\t\t */","\t\tsetFeatureLookupTable: function(featureLookupTable) {","\t\t\tthis.featureLookupTable = featureLookupTable;","\t\t},","","\t\ttoJSON: function() {","\t\t\treturn this.mapFeatureToWeight;","\t\t},","","\t\tfromJSON: function(json) {","\t\t\tthis.mapFeatureToWeight = json;","\t\t},","};","","","/*"," * UTILS"," */","","var NEWLINE = require('os').EOL;","","var LIB_LINEAR_MODEL_PATTERN = new RegExp(","\t\t\"[\\\\S\\\\s]*\"+    // skip the beginning of string","\t\t\"^label (.*)\"+NEWLINE+  // parse the label-list line","\t\t\"^nr_feature .*\"+NEWLINE+  // parse the feature-count line (not used)","\t\t\"^bias (.*)\"+NEWLINE+  // parse the bias line (not used - we use our own bias)","\t\t\"^w\"+NEWLINE+                // start of weight matrix","\t\t\"([\\\\S\\\\s]*)\" + // parse the weights","\t\t\"\", \"m\");","","var MIN_WEIGHT = 1e-5; // weights smaller than this are ignored, to save space","","/**"," * A utility that converts a model in the SvmLinear format to a matrix of feature weights per label."," * @param modelString a string."," * @returns mapLabelToMapFeatureToWeight."," */","function modelStringToModelMap(modelString) {","\tvar matches = LIB_LINEAR_MODEL_PATTERN.exec(modelString);","\tif (!matches) {","\t\tconsole.log(modelString);","\t\tthrow new Error(\"Model does not match SVM-Linear format\");","\t};","\tvar labels = matches[1].split(/\\s+/);","\tvar mapLabelToMapFeatureToWeight = {};","\tfor (var iLabel in labels) {","\t\tvar label = labels[iLabel];","\t\tmapLabelToMapFeatureToWeight[label]={};","\t}","","\tvar weightsMatrix = matches[3];","\t// each line represents a feature; each column represents a label:","","\tvar weightsLines = weightsMatrix.split(NEWLINE);","\tfor (var feature in weightsLines) {","\t\tvar weights = weightsLines[feature].split(/\\s+/);","\t\tweights.pop(); // ignore lal]st weight, which is empty (-space)","\t\tif (weights.length==0)","\t\t\tcontinue; // ignore empty lines","//\t\tif (isNaN(parseFloat(weights[weights.length-1])))","//\t\t\tweights.pop();","\t\tif (weights.length==1 && labels.length==2)","\t\t\tweights[1] = -weights[0];","\t\tif (weights.length!=labels.length)","\t\t\tthrow new Error(\"Model does not match SVM-Linear format: there are \"+labels.length+\" labels (\"+labels+\") and \"+weights.length+\" weights (\"+weights+\")\");","\t\tfor (var iLabel in labels) {","\t\t\tvar label = labels[iLabel];","\t\t\tvar weight = parseFloat(weights[iLabel]);","\t\t\tif (Math.abs(weight)>=MIN_WEIGHT)","\t\t\t\tmapLabelToMapFeatureToWeight[label][feature]=weight;","\t\t}","\t}","","\treturn mapLabelToMapFeatureToWeight;","}","","","","module.exports = SvmLinear;",""],"l":{"19":1,"26":1,"29":1,"30":4,"31":4,"32":4,"33":4,"34":4,"35":4,"36":4,"37":4,"39":4,"40":4,"41":4,"42":4,"46":1,"47":4,"48":4,"50":4,"52":0,"55":1,"57":0,"66":0,"69":0,"70":0,"71":0,"73":0,"74":0,"75":0,"80":0,"81":0,"82":0,"83":0,"85":0,"86":0,"92":0,"93":0,"95":0,"96":0,"98":0,"100":0,"101":0,"103":0,"104":0,"105":0,"106":0,"107":0,"110":0,"112":0,"117":0,"118":0,"119":0,"120":0,"124":0,"125":0,"126":0,"139":0,"140":0,"143":0,"146":0,"148":0,"149":0,"151":0,"153":0,"158":0,"159":0,"161":0,"162":0,"166":0,"173":0,"174":0,"175":0,"176":0,"178":0,"181":0,"183":0,"184":0,"185":0,"190":0,"193":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"203":0,"207":0,"211":0,"224":0,"228":0,"232":0,"241":1,"243":1,"252":1,"259":1,"260":0,"261":0,"262":0,"263":0,"265":0,"266":0,"267":0,"268":0,"269":0,"272":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"295":0,"300":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/perceptron/PerceptronHash.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/perceptron/PerceptronHash.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":21},"end":{"line":23,"column":36}}},"2":{"name":"(anonymous_2)","line":40,"loc":{"start":{"line":40,"column":9},"end":{"line":40,"column":20}}},"3":{"name":"(anonymous_3)","line":47,"loc":{"start":{"line":47,"column":11},"end":{"line":47,"column":26}}},"4":{"name":"(anonymous_4)","line":52,"loc":{"start":{"line":52,"column":22},"end":{"line":52,"column":67}}},"5":{"name":"(anonymous_5)","line":69,"loc":{"start":{"line":69,"column":17},"end":{"line":69,"column":46}}},"6":{"name":"(anonymous_6)","line":98,"loc":{"start":{"line":98,"column":14},"end":{"line":98,"column":43}}},"7":{"name":"(anonymous_7)","line":109,"loc":{"start":{"line":109,"column":13},"end":{"line":109,"column":31}}},"8":{"name":"(anonymous_8)","line":120,"loc":{"start":{"line":120,"column":9},"end":{"line":120,"column":52}}},"9":{"name":"(anonymous_9)","line":134,"loc":{"start":{"line":134,"column":20},"end":{"line":134,"column":95}}},"10":{"name":"(anonymous_10)","line":154,"loc":{"start":{"line":154,"column":11},"end":{"line":154,"column":58}}}},"statementMap":{"1":{"start":{"line":21,"column":0},"end":{"line":21,"column":39}},"2":{"start":{"line":23,"column":0},"end":{"line":35,"column":1}},"3":{"start":{"line":24,"column":1},"end":{"line":24,"column":22}},"4":{"start":{"line":24,"column":12},"end":{"line":24,"column":22}},"5":{"start":{"line":26,"column":1},"end":{"line":26,"column":32}},"6":{"start":{"line":27,"column":1},"end":{"line":27,"column":46}},"7":{"start":{"line":28,"column":1},"end":{"line":28,"column":46}},"8":{"start":{"line":29,"column":1},"end":{"line":29,"column":54}},"9":{"start":{"line":30,"column":1},"end":{"line":30,"column":46}},"10":{"start":{"line":31,"column":1},"end":{"line":31,"column":69}},"11":{"start":{"line":33,"column":1},"end":{"line":33,"column":19}},"12":{"start":{"line":34,"column":1},"end":{"line":34,"column":46}},"13":{"start":{"line":34,"column":24},"end":{"line":34,"column":46}},"14":{"start":{"line":38,"column":0},"end":{"line":161,"column":1}},"15":{"start":{"line":41,"column":2},"end":{"line":44,"column":3}},"16":{"start":{"line":48,"column":2},"end":{"line":48,"column":30}},"17":{"start":{"line":49,"column":2},"end":{"line":49,"column":38}},"18":{"start":{"line":53,"column":2},"end":{"line":53,"column":23}},"19":{"start":{"line":54,"column":2},"end":{"line":58,"column":3}},"20":{"start":{"line":55,"column":3},"end":{"line":57,"column":30}},"21":{"start":{"line":56,"column":4},"end":{"line":57,"column":30}},"22":{"start":{"line":57,"column":5},"end":{"line":57,"column":30}},"23":{"start":{"line":59,"column":2},"end":{"line":60,"column":47}},"24":{"start":{"line":60,"column":3},"end":{"line":60,"column":47}},"25":{"start":{"line":61,"column":2},"end":{"line":61,"column":18}},"26":{"start":{"line":70,"column":2},"end":{"line":72,"column":48}},"27":{"start":{"line":71,"column":3},"end":{"line":72,"column":48}},"28":{"start":{"line":72,"column":4},"end":{"line":72,"column":48}},"29":{"start":{"line":74,"column":2},"end":{"line":74,"column":77}},"30":{"start":{"line":76,"column":2},"end":{"line":76,"column":97}},"31":{"start":{"line":76,"column":18},"end":{"line":76,"column":97}},"32":{"start":{"line":78,"column":2},"end":{"line":86,"column":3}},"33":{"start":{"line":80,"column":3},"end":{"line":80,"column":81}},"34":{"start":{"line":80,"column":19},"end":{"line":80,"column":81}},"35":{"start":{"line":81,"column":3},"end":{"line":82,"column":62}},"36":{"start":{"line":82,"column":4},"end":{"line":82,"column":62}},"37":{"start":{"line":83,"column":3},"end":{"line":83,"column":60}},"38":{"start":{"line":83,"column":19},"end":{"line":83,"column":60}},"39":{"start":{"line":85,"column":3},"end":{"line":85,"column":67}},"40":{"start":{"line":85,"column":26},"end":{"line":85,"column":67}},"41":{"start":{"line":88,"column":2},"end":{"line":88,"column":30}},"42":{"start":{"line":99,"column":2},"end":{"line":100,"column":84}},"43":{"start":{"line":110,"column":2},"end":{"line":110,"column":31}},"44":{"start":{"line":111,"column":2},"end":{"line":112,"column":106}},"45":{"start":{"line":112,"column":3},"end":{"line":112,"column":106}},"46":{"start":{"line":114,"column":2},"end":{"line":116,"column":67}},"47":{"start":{"line":115,"column":3},"end":{"line":116,"column":67}},"48":{"start":{"line":116,"column":4},"end":{"line":116,"column":67}},"49":{"start":{"line":121,"column":2},"end":{"line":121,"column":63}},"50":{"start":{"line":122,"column":2},"end":{"line":122,"column":127}},"51":{"start":{"line":122,"column":20},"end":{"line":122,"column":127}},"52":{"start":{"line":123,"column":2},"end":{"line":123,"column":33}},"53":{"start":{"line":124,"column":2},"end":{"line":124,"column":99}},"54":{"start":{"line":124,"column":36},"end":{"line":124,"column":99}},"55":{"start":{"line":135,"column":2},"end":{"line":135,"column":71}},"56":{"start":{"line":136,"column":2},"end":{"line":136,"column":75}},"57":{"start":{"line":136,"column":18},"end":{"line":136,"column":75}},"58":{"start":{"line":137,"column":2},"end":{"line":137,"column":63}},"59":{"start":{"line":138,"column":2},"end":{"line":144,"column":3}},"60":{"start":{"line":139,"column":3},"end":{"line":143,"column":4}},"61":{"start":{"line":145,"column":2},"end":{"line":145,"column":16}},"62":{"start":{"line":155,"column":2},"end":{"line":159,"column":12}},"63":{"start":{"line":164,"column":0},"end":{"line":164,"column":32}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},{"start":{"line":24,"column":1},"end":{"line":24,"column":1}}]},"2":{"line":26,"type":"binary-expr","locations":[{"start":{"line":26,"column":14},"end":{"line":26,"column":24}},{"start":{"line":26,"column":26},"end":{"line":26,"column":31}}]},"3":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":23},"end":{"line":27,"column":42}},{"start":{"line":27,"column":44},"end":{"line":27,"column":45}}]},"4":{"line":28,"type":"binary-expr","locations":[{"start":{"line":28,"column":21},"end":{"line":28,"column":38}},{"start":{"line":28,"column":40},"end":{"line":28,"column":45}}]},"5":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":25},"end":{"line":29,"column":46}},{"start":{"line":29,"column":48},"end":{"line":29,"column":53}}]},"6":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":22},"end":{"line":30,"column":40}},{"start":{"line":30,"column":42},"end":{"line":30,"column":45}}]},"7":{"line":31,"type":"cond-expr","locations":[{"start":{"line":31,"column":47},"end":{"line":31,"column":65}},{"start":{"line":31,"column":67},"end":{"line":31,"column":68}}]},"8":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},{"start":{"line":34,"column":1},"end":{"line":34,"column":1}}]},"9":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":2},"end":{"line":54,"column":2}},{"start":{"line":54,"column":2},"end":{"line":54,"column":2}}]},"10":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":4},"end":{"line":56,"column":4}},{"start":{"line":56,"column":4},"end":{"line":56,"column":4}}]},"11":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":2},"end":{"line":59,"column":2}},{"start":{"line":59,"column":2},"end":{"line":59,"column":2}}]},"12":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":3},"end":{"line":71,"column":3}},{"start":{"line":71,"column":3},"end":{"line":71,"column":3}}]},"13":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":2},"end":{"line":76,"column":2}},{"start":{"line":76,"column":2},"end":{"line":76,"column":2}}]},"14":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":2},"end":{"line":78,"column":2}},{"start":{"line":78,"column":2},"end":{"line":78,"column":2}}]},"15":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":3},"end":{"line":80,"column":3}},{"start":{"line":80,"column":3},"end":{"line":80,"column":3}}]},"16":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":3},"end":{"line":83,"column":3}},{"start":{"line":83,"column":3},"end":{"line":83,"column":3}}]},"17":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":3},"end":{"line":85,"column":3}},{"start":{"line":85,"column":3},"end":{"line":85,"column":3}}]},"18":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":2},"end":{"line":122,"column":2}},{"start":{"line":122,"column":2},"end":{"line":122,"column":2}}]},"19":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":2},"end":{"line":124,"column":2}},{"start":{"line":124,"column":2},"end":{"line":124,"column":2}}]},"20":{"line":136,"type":"if","locations":[{"start":{"line":136,"column":2},"end":{"line":136,"column":2}},{"start":{"line":136,"column":2},"end":{"line":136,"column":2}}]},"21":{"line":137,"type":"cond-expr","locations":[{"start":{"line":137,"column":35},"end":{"line":137,"column":40}},{"start":{"line":137,"column":43},"end":{"line":137,"column":60}}]},"22":{"line":137,"type":"cond-expr","locations":[{"start":{"line":137,"column":55},"end":{"line":137,"column":56}},{"start":{"line":137,"column":59},"end":{"line":137,"column":60}}]},"23":{"line":138,"type":"if","locations":[{"start":{"line":138,"column":2},"end":{"line":138,"column":2}},{"start":{"line":138,"column":2},"end":{"line":138,"column":2}}]},"24":{"line":158,"type":"cond-expr","locations":[{"start":{"line":158,"column":23},"end":{"line":158,"column":39}},{"start":{"line":158,"column":41},"end":{"line":158,"column":53}}]}},"code":["/**"," * A simple Perceptron implementation."," *"," * Based on code by John Chesley:  https://github.com/chesles/perceptron"," *"," * the weights vector is a hash (not a numeric array), so the features can be any objects (not just nubmers)."," *"," * @author Erel Segal-haLevi"," * @since 2013-05-27"," * "," * @param opts optional parameters: <ul>"," *\t<li>debug "," *  <li>default_weight: default weight for a newly discovered feature (default = 0)."," *  <li>do_averaging: boolean, see http://ciml.info/dl/v0_8/ciml-v0_8-ch03.pdf . But count only weight vectors with successful predictions (Carvalho and Cohen, 2006)."," *  <li>do_normalization: boolean, normalize sum of features to 1."," *\t<li>learning_rate: defaults to 0.1."," *  <li>retrain_count: in batch training mode, how many times to retrain. 0=no retrain. Default=1."," * "," */","","var hash = require(\"../../utils/hash\");","","var PerceptronHash = function(opts) {","\tif (!opts) opts = {};","\t","\tthis.debug = opts.debug||false;","\tthis.default_weight = opts.default_weight||0;","\tthis.do_averaging = opts.do_averaging||false;","\tthis.do_normalization = opts.do_normalization||false;","\tthis.learning_rate = opts.learning_rate||0.1;","\tthis.retrain_count = 'retrain_count' in opts? opts.retrain_count: 1;","\t","\tthis.weights = {};","\tif (this.do_averaging) this.weights_sum = {};   // for averaging; see http://ciml.info/dl/v0_8/ciml-v0_8-ch03.pdf . But count only weight vectors with successful predictions (Carvalho and Cohen, 2006).","}","","","PerceptronHash.prototype = {","","\ttoJSON: function() {","\t\treturn {","\t\t\tweights: this.weights,","\t\t\tweights_sum: this.weights_sum","\t\t}","\t},","","\tfromJSON: function(json) {","\t\tthis.weights = json.weights;","\t\tthis.weights_sum = json.weights_sum;","\t},","","\tnormalized_features: function (features, remove_unknown_features) {","\t\tfeatures['bias'] = 1;","\t\tif (remove_unknown_features) {","\t\t\tfor (var feature in features)","\t\t\t\tif (!(feature in this.weights))","\t\t\t\t\tdelete features[feature];","\t\t} ","\t\tif (this.do_normalization) ","\t\t\thash.normalize_sum_of_values_to_1(features);","\t\treturn features;","\t},","","\t/**","\t * @param features a SINGLE training sample; a hash (feature => value).","\t * @param expected the classification value for that sample (0 or 1)","\t * @return true if the input sample got its correct classification (i.e. no change made).","\t */","\ttrain_features: function(features, expected) {","\t\tfor (feature in features) ","\t\t\tif (!(feature in this.weights)) ","\t\t\t\tthis.weights[feature] = this.default_weight;","","\t\tvar result = this.perceive_features(features, /*net=*/false, this.weights); // always use the running 'weights' vector for training, and NOT the weights_sum!","","\t\tif (this.debug) console.log('> training ',features,', expecting: ',expected, ' got: ', result);","","\t\tif (result != expected) {","\t\t\t// Current model is incorrect - adjustment needed!","\t\t\tif (this.debug) console.log('> adjusting weights...', this.weights, features);","\t\t\tfor (var feature in features) ","\t\t\t\tthis.adjust(result, expected, features[feature], feature);","\t\t\tif (this.debug) console.log(' -> weights:', this.weights)","\t\t} else {","\t\t\tif (this.do_averaging) hash.add(this.weights_sum, this.weights);","\t\t}","\t\t","\t\treturn (result == expected);","\t},","","\t/**","\t * Online training (a single sample).","\t *","\t * @param features a SINGLE training sample; a hash (feature => value).","\t * @param expected the classification value for that sample (0 or 1)","\t * @return true if the input sample got its correct classification (i.e. no change made).","\t */","\ttrainOnline: function(features, expected) {","\t\treturn this.train_features(","\t\t\tthis.normalized_features(features, /*remove_unknown_features=*/false), expected);","\t},","\t","","\t/**","\t * Batch training (a set of samples). Uses the option this.retrain_count.","\t *","\t * @param dataset an array of samples of the form {input: {feature1: value1...} , output: 0/1} ","\t */","\ttrainBatch: function(dataset) {","\t\tvar normalized_features = [];","\t\tfor (var i=0; i<dataset.length; ++i)","\t\t\tnormalized_features[i] = this.normalized_features(dataset[i].input, /*remove_unknown_features=*/false);","","\t\tfor (var r=0; r<=this.retrain_count; ++r)","\t\t\tfor (var i=0; i<normalized_features.length; ++i) ","\t\t\t\tthis.train_features(normalized_features[i], dataset[i].output);","\t},","","","\tadjust: function(result, expected, input, feature) {","\t\tvar delta = (expected - result) * this.learning_rate * input;","\t\tif (isNaN(delta)) throw new Error('delta is NaN!! result='+result+\" expected=\"+expected+\" input=\"+input+\" feature=\"+feature);","\t\tthis.weights[feature] += delta;","\t\tif (isNaN(this.weights[feature])) throw new Error('weights['+feature+'] went to NaN!! delta='+d);","\t},","\t\t","","\t/**","\t * @param features a SINGLE sample; a hash (feature => value).","\t * @param weights_for_classification the weights vector to use (either the running 'weights' or 'weights_sum').  ","\t * @param continuous_output if true, return the net classification value. If false [default], return 0 or 1.","\t * @return the classification of the sample.","\t */","\tperceive_features: function(features, continuous_output, weights_for_classification, explain) {","\t\tvar score = hash.inner_product(features, weights_for_classification);","\t\tif (this.debug) console.log(\"> perceive_features \",features,\" = \",score);","\t\tvar result = (continuous_output? score: (score > 0 ? 1 : 0));","\t\tif (explain) {","\t\t\tresult = {","\t\t\t\tclassification: result,","\t\t\t\texplanation: [\"Perceptron does not support explanations yet\"],","\t\t\t\tnet_score: score, ","\t\t\t}","\t\t}","\t\treturn result;","\t},","","\t/**","\t * @param features a SINGLE sample, as a hash {feature:value}","\t * @param explain (int) if positive, add an explanation (currently ignored).","\t * @param continuous_output if true, return the net classification score. If false [default], return 0 or 1.","\t * @return the classification of the sample.","\t */","\tclassify: function(features, explain, continuous_output) {","\t\treturn this.perceive_features(","\t\t\tthis.normalized_features(features, /*remove_unknown_features=*/true), ","\t\t\tcontinuous_output,","\t\t\t(this.do_averaging? this.weights_sum: this.weights),","\t\t\texplain);","\t},","}","","","module.exports = PerceptronHash;",""],"l":{"21":1,"23":1,"24":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"33":0,"34":0,"38":1,"41":0,"48":0,"49":0,"53":0,"54":0,"55":0,"56":0,"57":0,"59":0,"60":0,"61":0,"70":0,"71":0,"72":0,"74":0,"76":0,"78":0,"80":0,"81":0,"82":0,"83":0,"85":0,"88":0,"99":0,"110":0,"111":0,"112":0,"114":0,"115":0,"116":0,"121":0,"122":0,"123":0,"124":0,"135":0,"136":0,"137":0,"138":0,"139":0,"145":0,"155":0,"164":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/utils/hash.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/utils/hash.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":1,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":1,"44":62,"45":213,"46":0,"47":213,"48":62,"49":1,"50":0,"51":0,"52":0,"53":0,"54":0,"55":1,"56":0,"57":0,"58":0,"59":0,"60":1,"61":0,"62":0,"63":0,"64":0,"65":1,"66":62,"67":62,"68":213,"69":62,"70":1,"71":0,"72":0,"73":0,"74":0,"75":1,"76":62,"77":62,"78":62,"79":1,"80":0,"81":0,"82":0,"83":1,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":1,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":1,"109":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,213],"12":[0,0],"13":[62,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":62,"6":0,"7":0,"8":0,"9":62,"10":0,"11":62,"12":0,"13":0,"14":0,"15":0},"fnMap":{"1":{"name":"(anonymous_1)","line":19,"loc":{"start":{"line":19,"column":21},"end":{"line":19,"column":38}}},"2":{"name":"(anonymous_2)","line":47,"loc":{"start":{"line":47,"column":15},"end":{"line":47,"column":40}}},"3":{"name":"(anonymous_3)","line":63,"loc":{"start":{"line":63,"column":20},"end":{"line":63,"column":53}}},"4":{"name":"(anonymous_4)","line":78,"loc":{"start":{"line":78,"column":20},"end":{"line":78,"column":45}}},"5":{"name":"(anonymous_5)","line":93,"loc":{"start":{"line":93,"column":27},"end":{"line":93,"column":52}}},"6":{"name":"(anonymous_6)","line":108,"loc":{"start":{"line":108,"column":24},"end":{"line":108,"column":52}}},"7":{"name":"(anonymous_7)","line":127,"loc":{"start":{"line":127,"column":31},"end":{"line":127,"column":59}}},"8":{"name":"(anonymous_8)","line":135,"loc":{"start":{"line":135,"column":24},"end":{"line":135,"column":42}}},"9":{"name":"(anonymous_9)","line":142,"loc":{"start":{"line":142,"column":33},"end":{"line":142,"column":51}}},"10":{"name":"(anonymous_10)","line":149,"loc":{"start":{"line":149,"column":31},"end":{"line":149,"column":49}}},"11":{"name":"(anonymous_11)","line":160,"loc":{"start":{"line":160,"column":39},"end":{"line":160,"column":58}}},"12":{"name":"(anonymous_12)","line":170,"loc":{"start":{"line":170,"column":40},"end":{"line":170,"column":59}}},"13":{"name":"(anonymous_13)","line":181,"loc":{"start":{"line":181,"column":27},"end":{"line":181,"column":56}}},"14":{"name":"(anonymous_14)","line":204,"loc":{"start":{"line":204,"column":21},"end":{"line":204,"column":38}}},"15":{"name":"(anonymous_15)","line":220,"loc":{"start":{"line":220,"column":24},"end":{"line":220,"column":41}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":40,"column":2}},"2":{"start":{"line":20,"column":1},"end":{"line":20,"column":37}},"3":{"start":{"line":21,"column":1},"end":{"line":21,"column":15}},"4":{"start":{"line":22,"column":1},"end":{"line":38,"column":2}},"5":{"start":{"line":23,"column":2},"end":{"line":23,"column":29}},"6":{"start":{"line":24,"column":2},"end":{"line":24,"column":38}},"7":{"start":{"line":25,"column":2},"end":{"line":25,"column":30}},"8":{"start":{"line":25,"column":21},"end":{"line":25,"column":30}},"9":{"start":{"line":27,"column":2},"end":{"line":27,"column":37}},"10":{"start":{"line":28,"column":2},"end":{"line":31,"column":3}},"11":{"start":{"line":29,"column":3},"end":{"line":29,"column":22}},"12":{"start":{"line":30,"column":3},"end":{"line":30,"column":41}},"13":{"start":{"line":32,"column":2},"end":{"line":32,"column":21}},"14":{"start":{"line":33,"column":2},"end":{"line":33,"column":23}},"15":{"start":{"line":34,"column":2},"end":{"line":36,"column":3}},"16":{"start":{"line":35,"column":3},"end":{"line":35,"column":89}},"17":{"start":{"line":37,"column":2},"end":{"line":37,"column":18}},"18":{"start":{"line":39,"column":1},"end":{"line":39,"column":13}},"19":{"start":{"line":47,"column":0},"end":{"line":55,"column":2}},"20":{"start":{"line":48,"column":1},"end":{"line":53,"column":2}},"21":{"start":{"line":49,"column":2},"end":{"line":50,"column":21}},"22":{"start":{"line":50,"column":3},"end":{"line":50,"column":21}},"23":{"start":{"line":51,"column":2},"end":{"line":51,"column":68}},"24":{"start":{"line":51,"column":59},"end":{"line":51,"column":68}},"25":{"start":{"line":52,"column":2},"end":{"line":52,"column":37}},"26":{"start":{"line":54,"column":1},"end":{"line":54,"column":15}},"27":{"start":{"line":63,"column":0},"end":{"line":71,"column":2}},"28":{"start":{"line":64,"column":1},"end":{"line":69,"column":2}},"29":{"start":{"line":65,"column":2},"end":{"line":66,"column":21}},"30":{"start":{"line":66,"column":3},"end":{"line":66,"column":21}},"31":{"start":{"line":67,"column":2},"end":{"line":67,"column":68}},"32":{"start":{"line":67,"column":59},"end":{"line":67,"column":68}},"33":{"start":{"line":68,"column":2},"end":{"line":68,"column":44}},"34":{"start":{"line":70,"column":1},"end":{"line":70,"column":15}},"35":{"start":{"line":78,"column":0},"end":{"line":86,"column":2}},"36":{"start":{"line":79,"column":1},"end":{"line":84,"column":2}},"37":{"start":{"line":80,"column":2},"end":{"line":81,"column":21}},"38":{"start":{"line":81,"column":3},"end":{"line":81,"column":21}},"39":{"start":{"line":82,"column":2},"end":{"line":82,"column":68}},"40":{"start":{"line":82,"column":59},"end":{"line":82,"column":68}},"41":{"start":{"line":83,"column":2},"end":{"line":83,"column":37}},"42":{"start":{"line":85,"column":1},"end":{"line":85,"column":15}},"43":{"start":{"line":93,"column":0},"end":{"line":99,"column":2}},"44":{"start":{"line":94,"column":1},"end":{"line":97,"column":2}},"45":{"start":{"line":95,"column":2},"end":{"line":95,"column":68}},"46":{"start":{"line":95,"column":59},"end":{"line":95,"column":68}},"47":{"start":{"line":96,"column":2},"end":{"line":96,"column":28}},"48":{"start":{"line":98,"column":1},"end":{"line":98,"column":15}},"49":{"start":{"line":108,"column":0},"end":{"line":118,"column":2}},"50":{"start":{"line":109,"column":1},"end":{"line":109,"column":16}},"51":{"start":{"line":110,"column":1},"end":{"line":116,"column":2}},"52":{"start":{"line":111,"column":3},"end":{"line":115,"column":4}},"53":{"start":{"line":112,"column":4},"end":{"line":112,"column":51}},"54":{"start":{"line":117,"column":1},"end":{"line":117,"column":15}},"55":{"start":{"line":127,"column":0},"end":{"line":133,"column":2}},"56":{"start":{"line":128,"column":1},"end":{"line":128,"column":17}},"57":{"start":{"line":129,"column":1},"end":{"line":131,"column":2}},"58":{"start":{"line":130,"column":2},"end":{"line":130,"column":72}},"59":{"start":{"line":132,"column":1},"end":{"line":132,"column":15}},"60":{"start":{"line":135,"column":0},"end":{"line":140,"column":2}},"61":{"start":{"line":136,"column":1},"end":{"line":136,"column":16}},"62":{"start":{"line":137,"column":1},"end":{"line":138,"column":29}},"63":{"start":{"line":138,"column":2},"end":{"line":138,"column":29}},"64":{"start":{"line":139,"column":1},"end":{"line":139,"column":15}},"65":{"start":{"line":142,"column":0},"end":{"line":147,"column":2}},"66":{"start":{"line":143,"column":1},"end":{"line":143,"column":16}},"67":{"start":{"line":144,"column":1},"end":{"line":145,"column":39}},"68":{"start":{"line":145,"column":2},"end":{"line":145,"column":39}},"69":{"start":{"line":146,"column":1},"end":{"line":146,"column":15}},"70":{"start":{"line":149,"column":0},"end":{"line":154,"column":2}},"71":{"start":{"line":150,"column":1},"end":{"line":150,"column":16}},"72":{"start":{"line":151,"column":1},"end":{"line":152,"column":41}},"73":{"start":{"line":152,"column":2},"end":{"line":152,"column":41}},"74":{"start":{"line":153,"column":1},"end":{"line":153,"column":15}},"75":{"start":{"line":160,"column":0},"end":{"line":164,"column":2}},"76":{"start":{"line":161,"column":1},"end":{"line":161,"column":52}},"77":{"start":{"line":162,"column":1},"end":{"line":163,"column":43}},"78":{"start":{"line":163,"column":2},"end":{"line":163,"column":43}},"79":{"start":{"line":170,"column":0},"end":{"line":174,"column":2}},"80":{"start":{"line":171,"column":1},"end":{"line":171,"column":50}},"81":{"start":{"line":172,"column":1},"end":{"line":173,"column":54}},"82":{"start":{"line":173,"column":2},"end":{"line":173,"column":54}},"83":{"start":{"line":181,"column":0},"end":{"line":195,"column":2}},"84":{"start":{"line":182,"column":1},"end":{"line":182,"column":30}},"85":{"start":{"line":183,"column":1},"end":{"line":183,"column":33}},"86":{"start":{"line":184,"column":1},"end":{"line":184,"column":13}},"87":{"start":{"line":185,"column":1},"end":{"line":185,"column":26}},"88":{"start":{"line":186,"column":1},"end":{"line":192,"column":2}},"89":{"start":{"line":187,"column":2},"end":{"line":187,"column":20}},"90":{"start":{"line":188,"column":2},"end":{"line":188,"column":28}},"91":{"start":{"line":189,"column":2},"end":{"line":189,"column":33}},"92":{"start":{"line":190,"column":2},"end":{"line":190,"column":26}},"93":{"start":{"line":190,"column":14},"end":{"line":190,"column":26}},"94":{"start":{"line":191,"column":2},"end":{"line":191,"column":22}},"95":{"start":{"line":193,"column":1},"end":{"line":193,"column":15}},"96":{"start":{"line":194,"column":1},"end":{"line":194,"column":15}},"97":{"start":{"line":204,"column":0},"end":{"line":217,"column":2}},"98":{"start":{"line":205,"column":1},"end":{"line":216,"column":2}},"99":{"start":{"line":206,"column":2},"end":{"line":206,"column":18}},"100":{"start":{"line":207,"column":2},"end":{"line":208,"column":45}},"101":{"start":{"line":208,"column":3},"end":{"line":208,"column":45}},"102":{"start":{"line":209,"column":2},"end":{"line":209,"column":16}},"103":{"start":{"line":210,"column":8},"end":{"line":216,"column":2}},"104":{"start":{"line":211,"column":2},"end":{"line":211,"column":16}},"105":{"start":{"line":213,"column":2},"end":{"line":213,"column":18}},"106":{"start":{"line":214,"column":2},"end":{"line":214,"column":41}},"107":{"start":{"line":215,"column":2},"end":{"line":215,"column":16}},"108":{"start":{"line":220,"column":0},"end":{"line":222,"column":2}},"109":{"start":{"line":221,"column":1},"end":{"line":221,"column":65}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":2},"end":{"line":25,"column":2}},{"start":{"line":25,"column":2},"end":{"line":25,"column":2}}]},"2":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":2},"end":{"line":28,"column":2}},{"start":{"line":28,"column":2},"end":{"line":28,"column":2}}]},"3":{"line":28,"type":"binary-expr","locations":[{"start":{"line":28,"column":6},"end":{"line":28,"column":20}},{"start":{"line":28,"column":24},"end":{"line":28,"column":33}},{"start":{"line":28,"column":37},"end":{"line":28,"column":46}}]},"4":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":2},"end":{"line":34,"column":2}},{"start":{"line":34,"column":2},"end":{"line":34,"column":2}}]},"5":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":2},"end":{"line":49,"column":2}},{"start":{"line":49,"column":2},"end":{"line":49,"column":2}}]},"6":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":2},"end":{"line":51,"column":2}},{"start":{"line":51,"column":2},"end":{"line":51,"column":2}}]},"7":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":2},"end":{"line":65,"column":2}},{"start":{"line":65,"column":2},"end":{"line":65,"column":2}}]},"8":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":2},"end":{"line":67,"column":2}},{"start":{"line":67,"column":2},"end":{"line":67,"column":2}}]},"9":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":2},"end":{"line":80,"column":2}},{"start":{"line":80,"column":2},"end":{"line":80,"column":2}}]},"10":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":2},"end":{"line":82,"column":2}},{"start":{"line":82,"column":2},"end":{"line":82,"column":2}}]},"11":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":2},"end":{"line":95,"column":2}},{"start":{"line":95,"column":2},"end":{"line":95,"column":2}}]},"12":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":3},"end":{"line":111,"column":3}},{"start":{"line":111,"column":3},"end":{"line":111,"column":3}}]},"13":{"line":162,"type":"if","locations":[{"start":{"line":162,"column":1},"end":{"line":162,"column":1}},{"start":{"line":162,"column":1},"end":{"line":162,"column":1}}]},"14":{"line":172,"type":"if","locations":[{"start":{"line":172,"column":1},"end":{"line":172,"column":1}},{"start":{"line":172,"column":1},"end":{"line":172,"column":1}}]},"15":{"line":190,"type":"if","locations":[{"start":{"line":190,"column":2},"end":{"line":190,"column":2}},{"start":{"line":190,"column":2},"end":{"line":190,"column":2}}]},"16":{"line":205,"type":"if","locations":[{"start":{"line":205,"column":1},"end":{"line":205,"column":1}},{"start":{"line":205,"column":1},"end":{"line":205,"column":1}}]},"17":{"line":210,"type":"if","locations":[{"start":{"line":210,"column":8},"end":{"line":210,"column":8}},{"start":{"line":210,"column":8},"end":{"line":210,"column":8}}]},"18":{"line":221,"type":"cond-expr","locations":[{"start":{"line":221,"column":35},"end":{"line":221,"column":40}},{"start":{"line":221,"column":42},"end":{"line":221,"column":63}}]}},"code":["/**"," * Static utilities for hashes (= associative arrays = Javascript objects)."," * "," * @author Erel Segal-Halevi"," * @since 2013-06"," * @note see performance tests of adding hashes versus arrays here: http://jsperf.com/adding-sparse-feature-vectors"," */","","","/**"," * create a hash from a string in the format:"," "," * key1 / value1"," * key2 / value2"," * ..."," *"," * Comments start with '#' and end with end-of-line."," */","exports.fromString = function(string) {","\tvar lines = string.split(/[\\n\\r]/g);","\tvar hash = {};","\tfor (var i=0; i<lines.length; ++i) {","\t\tvar line = lines[i].trim();","\t\tline = line.replace(/\\s*#.*?$/, \"\");  // remove comments","\t\tif (line.length<1) continue; // skip empty lines","","\t\tvar parts = line.split(/\\s*\\/\\s*/);","\t\tif (parts.length<2 || !parts[0] || !parts[1]) {","\t\t\tconsole.dir(parts);","\t\t\tthrow new Error(\"empty key or value\");","\t\t}","\t\tvar key = parts[0];","\t\tvar value = parts[1];","\t\tif (key in hash) {","\t\t\tconsole.warn(\"key \"+key+\" already exists. Old value=\"+hash[key]+\", new value=\"+value);","\t\t}","\t\thash[key]=value;","\t}","\treturn hash;","};","","/**"," * add one hash to another (target += source)"," * @param target [input and output]"," * @param source [input]: will be added to target."," */","exports.add  = function(target, source) {","\tfor (var feature in source) {","\t\tif (!(feature in target))","\t\t\ttarget[feature]=0;","\t\tif (toString.call(target[feature]) != '[object Number]') continue;","\t\ttarget[feature] += source[feature];","\t}","\treturn target;","};"," ","/**"," * add one hash to another (target += scalar * source)"," * @param target [input and output]"," * @param source [input]"," * @param scalar [input]"," */","exports.addtimes  = function(target, scalar, source) {","\tfor (var feature in source) {","\t\tif (!(feature in target))","\t\t\ttarget[feature]=0;","\t\tif (toString.call(target[feature]) != '[object Number]') continue;","\t\ttarget[feature] += scalar*source[feature];","\t}","\treturn target;","};","","/**"," * multiply one hash by another (elementwise multiplication)."," * @param target [input and output]"," * @param source [input]: target will be multiplied by it."," */","exports.multiply  = function(target, source) {","\tfor (var feature in source) {","\t\tif (!(feature in target))","\t\t\ttarget[feature]=1;","\t\tif (toString.call(target[feature]) != '[object Number]') continue;","\t\ttarget[feature] *= source[feature];","\t}","\treturn target;","};","","/**"," * multiply a hash by a scalar."," * @param target [input and output]"," * @param source [input]: target will be multiplied by it."," */","exports.multiply_scalar  = function(target, source) {","\tfor (var feature in target) {","\t\tif (toString.call(target[feature]) != '[object Number]') continue;","\t\ttarget[feature] *= source;","\t}","\treturn target;","};","","/**"," * calculate the scalar product (dot product) of the given two hashes."," * @param features [input] - a hash representing a 1-dimensional vector."," * @param weights [input] - a hash representing a 1-dimensional vector."," * @return a scalar - the sum of elementwise products."," * @note Usually, there are much less features than weights."," */","exports.inner_product = function(features, weights) {","\tvar result = 0;","\tfor (var feature in features) {","\t\t\tif (feature in weights) {","\t\t\t\tresult += features[feature] * weights[feature];","\t\t\t} else {","\t\t\t\t\t/* the sample contains a feature that was never seen in training - ignore it for now */ ","\t\t\t}","\t}","\treturn result;","};","","/**"," * calculate the vector dot product of the given two hashes."," * @param features [input] - a hash representing a 1-dimensional vector."," * @param weights [input] - a hash of hashes, representing a 2-dimensional matrix."," * @return a hash - for each key of weights, return the dot product of the given row with the features vector."," * @note Usually, there are much less features than weights."," */","exports.inner_product_matrix = function(features, weights) {","\tvar result = {};","\tfor (category in weights) {","\t\tresult[category] = exports.inner_product(features, weights[category]);","\t}","\treturn result;","};","","exports.sum_of_values = function(weights) {","\tvar result = 0;","\tfor (var feature in weights)","\t\tresult += weights[feature];","\treturn result;","};","","exports.sum_of_absolute_values = function(weights) {","\tvar result = 0;","\tfor (var feature in weights)","\t\tresult += Math.abs(weights[feature]);","\treturn result;","};","","exports.sum_of_square_values = function(weights) {","\tvar result = 0;","\tfor (var feature in weights)","\t\tresult += Math.pow(weights[feature],2);","\treturn result;","};","","/**"," * Normalize the given hash, such that the sum of values is 1."," * Unless, of course, the current sum is 0, in which case, nothing is done. "," */","exports.normalize_sum_of_values_to_1 = function(features) {","\tvar sum = exports.sum_of_absolute_values(features);","\tif (sum!=0)","\t\texports.multiply_scalar(features, 1/sum);","};","","/**"," * Normalize the given hash, such that the sum of squares of the values is 1."," * Unless, of course, the current sum is 0, in which case, nothing is done. "," */","exports.normalize_sum_of_squares_to_1 = function(features) {","\tvar sum = exports.sum_of_square_values(features);","\tif (sum!=0)","\t\texports.multiply_scalar(features, 1/Math.sqrt(sum));","};","","","/**"," * @param array [input]"," * @return a string of the given hash, sorted by keys."," */","exports.stringify_sorted = function(weights, separator) {","\tvar result = \"{\" + separator;","\tvar keys = Object.keys(weights);","\tkeys.sort();","\tvar last = keys.length-1;","\tfor (var i=0; i <= last; i++) {","\t\tvar key = keys[i];","\t\tvar weight = weights[key]; ","\t\tresult += '\"'+key+'\": '+weight;","\t\tif (i<last) result+=\",\";","\t\tresult += separator;","\t}","\tresult += \"}\";","\treturn result;\t","};","","","/**"," * Convert any object to a hash (representing a set):"," *"," * - an array ['a', 'b', 'c'..] to a hash {'a': true, 'b': true, 'c': true};"," * - a string 'a' to a hash {'a': true}."," */","exports.normalized = function(object) {","\tif (Array.isArray(object)) {","\t\tvar result = {}; ","\t\tfor (var i=0; i<object.length; ++i) ","\t\t\tresult[stringifyIfNeeded(object[i])]=true;","\t\treturn result;","\t} else if (object instanceof Object) {","\t\treturn object;","\t} else {","\t\tvar result = {};","\t\tresult[stringifyIfNeeded(object)]=true; ","\t\treturn result;","\t}","};","","","var stringifyIfNeeded = function (label) {","\treturn (typeof(label)==='string'? label: JSON.stringify(label));","};","","/*","var toStringOrStringArray = function (classes) {","\tif (classes instanceof Array)","\t\tclasses = classes.map(stringifyIfNeeded);","\telse ","\t\tclasses = stringifyIfNeeded(classes);","\treturn hash.normalized(classes);","}","*/",""],"l":{"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"27":0,"28":0,"29":0,"30":0,"32":0,"33":0,"34":0,"35":0,"37":0,"39":0,"47":1,"48":0,"49":0,"50":0,"51":0,"52":0,"54":0,"63":1,"64":0,"65":0,"66":0,"67":0,"68":0,"70":0,"78":1,"79":0,"80":0,"81":0,"82":0,"83":0,"85":0,"93":1,"94":62,"95":213,"96":213,"98":62,"108":1,"109":0,"110":0,"111":0,"112":0,"117":0,"127":1,"128":0,"129":0,"130":0,"132":0,"135":1,"136":0,"137":0,"138":0,"139":0,"142":1,"143":62,"144":62,"145":213,"146":62,"149":1,"150":0,"151":0,"152":0,"153":0,"160":1,"161":62,"162":62,"163":62,"170":1,"171":0,"172":0,"173":0,"181":1,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"193":0,"194":0,"204":1,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"213":0,"214":0,"215":0,"220":1,"221":0}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/winnow/WinnowHash.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/winnow/WinnowHash.js","s":{"1":1,"2":1,"3":1,"4":4,"5":0,"6":4,"7":4,"8":4,"9":4,"10":4,"11":4,"12":4,"13":4,"14":4,"15":4,"16":4,"17":4,"18":4,"19":4,"20":4,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":62,"32":24,"33":62,"34":50,"35":182,"36":14,"37":62,"38":102,"39":0,"40":102,"41":405,"42":21,"43":405,"44":21,"45":102,"46":0,"47":102,"48":102,"49":20,"50":10,"51":39,"52":39,"53":39,"54":10,"55":39,"56":39,"57":39,"58":20,"59":0,"60":20,"61":82,"62":0,"63":0,"64":82,"65":3,"66":3,"67":3,"68":9,"69":3,"70":33,"71":99,"72":152,"73":152,"74":152,"75":573,"76":573,"77":573,"78":0,"79":0,"80":573,"81":573,"82":0,"83":0,"84":573,"85":573,"86":573,"87":0,"88":0,"89":573,"90":573,"91":573,"92":0,"93":573,"94":87,"95":152,"96":0,"97":152,"98":152,"99":0,"100":152,"101":152,"102":26,"103":72,"104":26,"105":26,"106":26,"107":85,"108":26,"109":152,"110":50,"111":50,"112":1},"b":{"1":[0,4],"2":[4,4],"3":[4,3],"4":[4,3],"5":[4,4],"6":[1,3],"7":[4,4],"8":[4,4],"9":[1,3],"10":[4,1],"11":[4,4],"12":[0,4],"13":[0,0],"14":[0,0],"15":[24,38],"16":[62,62],"17":[50,12],"18":[14,168],"19":[0,102],"20":[21,384],"21":[21,384],"22":[0,102],"23":[20,82],"24":[102,34,92,68],"25":[10,10],"26":[0,20],"27":[0,82],"28":[573,0],"29":[0,573],"30":[0,573],"31":[0,573],"32":[0,573],"33":[87,486],"34":[0,152],"35":[0,152],"36":[126,26],"37":[11,15],"38":[26,126],"39":[26,0],"40":[0,50],"41":[0,50]},"f":{"1":4,"2":0,"3":0,"4":62,"5":102,"6":3,"7":3,"8":152,"9":72,"10":85,"11":50},"fnMap":{"1":{"name":"WinnowHash","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":26}}},"2":{"name":"(anonymous_2)","line":46,"loc":{"start":{"line":46,"column":10},"end":{"line":46,"column":27}}},"3":{"name":"(anonymous_3)","line":55,"loc":{"start":{"line":55,"column":12},"end":{"line":55,"column":27}}},"4":{"name":"(anonymous_4)","line":64,"loc":{"start":{"line":64,"column":21},"end":{"line":64,"column":66}}},"5":{"name":"(anonymous_5)","line":80,"loc":{"start":{"line":80,"column":18},"end":{"line":80,"column":47}}},"6":{"name":"(anonymous_6)","line":129,"loc":{"start":{"line":129,"column":15},"end":{"line":129,"column":44}}},"7":{"name":"(anonymous_7)","line":140,"loc":{"start":{"line":140,"column":14},"end":{"line":140,"column":32}}},"8":{"name":"(anonymous_8)","line":160,"loc":{"start":{"line":160,"column":21},"end":{"line":160,"column":142}}},"9":{"name":"(anonymous_9)","line":202,"loc":{"start":{"line":202,"column":22},"end":{"line":202,"column":35}}},"10":{"name":"(anonymous_10)","line":206,"loc":{"start":{"line":206,"column":37},"end":{"line":206,"column":49}}},"11":{"name":"(anonymous_11)","line":225,"loc":{"start":{"line":225,"column":12},"end":{"line":225,"column":59}}}},"statementMap":{"1":{"start":{"line":16,"column":0},"end":{"line":16,"column":39}},"2":{"start":{"line":17,"column":0},"end":{"line":17,"column":41}},"3":{"start":{"line":19,"column":0},"end":{"line":41,"column":1}},"4":{"start":{"line":20,"column":1},"end":{"line":20,"column":21}},"5":{"start":{"line":20,"column":12},"end":{"line":20,"column":21}},"6":{"start":{"line":22,"column":1},"end":{"line":22,"column":34}},"7":{"start":{"line":25,"column":1},"end":{"line":25,"column":68}},"8":{"start":{"line":26,"column":1},"end":{"line":26,"column":68}},"9":{"start":{"line":27,"column":1},"end":{"line":27,"column":48}},"10":{"start":{"line":28,"column":1},"end":{"line":28,"column":59}},"11":{"start":{"line":29,"column":1},"end":{"line":29,"column":40}},"12":{"start":{"line":30,"column":1},"end":{"line":30,"column":38}},"13":{"start":{"line":31,"column":1},"end":{"line":31,"column":52}},"14":{"start":{"line":32,"column":1},"end":{"line":32,"column":46}},"15":{"start":{"line":33,"column":1},"end":{"line":33,"column":66}},"16":{"start":{"line":35,"column":1},"end":{"line":35,"column":46}},"17":{"start":{"line":37,"column":1},"end":{"line":37,"column":28}},"18":{"start":{"line":38,"column":1},"end":{"line":38,"column":28}},"19":{"start":{"line":39,"column":1},"end":{"line":39,"column":32}},"20":{"start":{"line":40,"column":1},"end":{"line":40,"column":32}},"21":{"start":{"line":44,"column":0},"end":{"line":235,"column":1}},"22":{"start":{"line":47,"column":3},"end":{"line":52,"column":4}},"23":{"start":{"line":56,"column":3},"end":{"line":56,"column":101}},"24":{"start":{"line":56,"column":31},"end":{"line":56,"column":101}},"25":{"start":{"line":57,"column":3},"end":{"line":57,"column":49}},"26":{"start":{"line":58,"column":3},"end":{"line":58,"column":57}},"27":{"start":{"line":59,"column":3},"end":{"line":59,"column":101}},"28":{"start":{"line":59,"column":31},"end":{"line":59,"column":101}},"29":{"start":{"line":60,"column":3},"end":{"line":60,"column":49}},"30":{"start":{"line":61,"column":3},"end":{"line":61,"column":57}},"31":{"start":{"line":65,"column":3},"end":{"line":66,"column":25}},"32":{"start":{"line":66,"column":4},"end":{"line":66,"column":25}},"33":{"start":{"line":67,"column":3},"end":{"line":71,"column":4}},"34":{"start":{"line":68,"column":4},"end":{"line":70,"column":31}},"35":{"start":{"line":69,"column":5},"end":{"line":70,"column":31}},"36":{"start":{"line":70,"column":6},"end":{"line":70,"column":31}},"37":{"start":{"line":72,"column":3},"end":{"line":72,"column":47}},"38":{"start":{"line":81,"column":3},"end":{"line":81,"column":90}},"39":{"start":{"line":81,"column":19},"end":{"line":81,"column":90}},"40":{"start":{"line":82,"column":3},"end":{"line":87,"column":4}},"41":{"start":{"line":83,"column":4},"end":{"line":84,"column":67}},"42":{"start":{"line":84,"column":5},"end":{"line":84,"column":67}},"43":{"start":{"line":85,"column":4},"end":{"line":86,"column":67}},"44":{"start":{"line":86,"column":5},"end":{"line":86,"column":67}},"45":{"start":{"line":89,"column":3},"end":{"line":89,"column":164}},"46":{"start":{"line":89,"column":19},"end":{"line":89,"column":164}},"47":{"start":{"line":91,"column":3},"end":{"line":91,"column":122}},"48":{"start":{"line":96,"column":3},"end":{"line":119,"column":4}},"49":{"start":{"line":98,"column":4},"end":{"line":110,"column":5}},"50":{"start":{"line":99,"column":5},"end":{"line":103,"column":6}},"51":{"start":{"line":100,"column":6},"end":{"line":100,"column":36}},"52":{"start":{"line":101,"column":6},"end":{"line":101,"column":71}},"53":{"start":{"line":102,"column":6},"end":{"line":102,"column":70}},"54":{"start":{"line":105,"column":5},"end":{"line":109,"column":6}},"55":{"start":{"line":106,"column":6},"end":{"line":106,"column":36}},"56":{"start":{"line":107,"column":6},"end":{"line":107,"column":70}},"57":{"start":{"line":108,"column":6},"end":{"line":108,"column":71}},"58":{"start":{"line":111,"column":4},"end":{"line":111,"column":165}},"59":{"start":{"line":111,"column":20},"end":{"line":111,"column":165}},"60":{"start":{"line":112,"column":4},"end":{"line":112,"column":17}},"61":{"start":{"line":114,"column":4},"end":{"line":117,"column":5}},"62":{"start":{"line":115,"column":5},"end":{"line":115,"column":64}},"63":{"start":{"line":116,"column":5},"end":{"line":116,"column":64}},"64":{"start":{"line":118,"column":4},"end":{"line":118,"column":16}},"65":{"start":{"line":130,"column":3},"end":{"line":130,"column":71}},"66":{"start":{"line":131,"column":3},"end":{"line":131,"column":50}},"67":{"start":{"line":142,"column":3},"end":{"line":143,"column":80}},"68":{"start":{"line":143,"column":4},"end":{"line":143,"column":80}},"69":{"start":{"line":146,"column":3},"end":{"line":148,"column":62}},"70":{"start":{"line":147,"column":4},"end":{"line":148,"column":62}},"71":{"start":{"line":148,"column":5},"end":{"line":148,"column":62}},"72":{"start":{"line":161,"column":3},"end":{"line":161,"column":17}},"73":{"start":{"line":162,"column":3},"end":{"line":162,"column":25}},"74":{"start":{"line":163,"column":3},"end":{"line":194,"column":4}},"75":{"start":{"line":164,"column":4},"end":{"line":193,"column":5}},"76":{"start":{"line":165,"column":5},"end":{"line":165,"column":72}},"77":{"start":{"line":166,"column":5},"end":{"line":169,"column":6}},"78":{"start":{"line":167,"column":6},"end":{"line":167,"column":55}},"79":{"start":{"line":168,"column":6},"end":{"line":168,"column":71}},"80":{"start":{"line":170,"column":5},"end":{"line":170,"column":72}},"81":{"start":{"line":171,"column":5},"end":{"line":174,"column":6}},"82":{"start":{"line":172,"column":6},"end":{"line":172,"column":55}},"83":{"start":{"line":173,"column":6},"end":{"line":173,"column":71}},"84":{"start":{"line":175,"column":5},"end":{"line":175,"column":54}},"85":{"start":{"line":176,"column":5},"end":{"line":176,"column":35}},"86":{"start":{"line":177,"column":5},"end":{"line":180,"column":6}},"87":{"start":{"line":178,"column":6},"end":{"line":178,"column":28}},"88":{"start":{"line":179,"column":6},"end":{"line":179,"column":134}},"89":{"start":{"line":181,"column":5},"end":{"line":181,"column":40}},"90":{"start":{"line":182,"column":5},"end":{"line":182,"column":24}},"91":{"start":{"line":183,"column":5},"end":{"line":184,"column":134}},"92":{"start":{"line":184,"column":6},"end":{"line":184,"column":134}},"93":{"start":{"line":185,"column":5},"end":{"line":192,"column":7}},"94":{"start":{"line":185,"column":20},"end":{"line":192,"column":7}},"95":{"start":{"line":195,"column":3},"end":{"line":196,"column":72}},"96":{"start":{"line":196,"column":4},"end":{"line":196,"column":72}},"97":{"start":{"line":197,"column":3},"end":{"line":197,"column":27}},"98":{"start":{"line":199,"column":3},"end":{"line":199,"column":92}},"99":{"start":{"line":199,"column":19},"end":{"line":199,"column":92}},"100":{"start":{"line":200,"column":3},"end":{"line":200,"column":64}},"101":{"start":{"line":201,"column":3},"end":{"line":215,"column":4}},"102":{"start":{"line":202,"column":4},"end":{"line":202,"column":91}},"103":{"start":{"line":202,"column":36},"end":{"line":202,"column":87}},"104":{"start":{"line":203,"column":4},"end":{"line":203,"column":62}},"105":{"start":{"line":205,"column":4},"end":{"line":209,"column":5}},"106":{"start":{"line":206,"column":5},"end":{"line":208,"column":8}},"107":{"start":{"line":207,"column":6},"end":{"line":207,"column":57}},"108":{"start":{"line":211,"column":4},"end":{"line":214,"column":6}},"109":{"start":{"line":216,"column":3},"end":{"line":216,"column":17}},"110":{"start":{"line":226,"column":3},"end":{"line":226,"column":70}},"111":{"start":{"line":227,"column":3},"end":{"line":233,"column":14}},"112":{"start":{"line":237,"column":0},"end":{"line":237,"column":28}}},"branchMap":{"1":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},{"start":{"line":20,"column":1},"end":{"line":20,"column":1}}]},"2":{"line":22,"type":"binary-expr","locations":[{"start":{"line":22,"column":14},"end":{"line":22,"column":24}},{"start":{"line":22,"column":28},"end":{"line":22,"column":33}}]},"3":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":32},"end":{"line":25,"column":60}},{"start":{"line":25,"column":64},"end":{"line":25,"column":67}}]},"4":{"line":26,"type":"binary-expr","locations":[{"start":{"line":26,"column":32},"end":{"line":26,"column":60}},{"start":{"line":26,"column":64},"end":{"line":26,"column":67}}]},"5":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":21},"end":{"line":27,"column":38}},{"start":{"line":27,"column":42},"end":{"line":27,"column":47}}]},"6":{"line":28,"type":"cond-expr","locations":[{"start":{"line":28,"column":40},"end":{"line":28,"column":54}},{"start":{"line":28,"column":56},"end":{"line":28,"column":57}}]},"7":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":18},"end":{"line":29,"column":32}},{"start":{"line":29,"column":36},"end":{"line":29,"column":39}}]},"8":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":17},"end":{"line":30,"column":30}},{"start":{"line":30,"column":34},"end":{"line":30,"column":37}}]},"9":{"line":31,"type":"cond-expr","locations":[{"start":{"line":31,"column":34},"end":{"line":31,"column":45}},{"start":{"line":31,"column":47},"end":{"line":31,"column":50}}]},"10":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":22},"end":{"line":32,"column":40}},{"start":{"line":32,"column":44},"end":{"line":32,"column":45}}]},"11":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":30},"end":{"line":33,"column":56}},{"start":{"line":33,"column":60},"end":{"line":33,"column":65}}]},"12":{"line":35,"type":"cond-expr","locations":[{"start":{"line":35,"column":30},"end":{"line":35,"column":39}},{"start":{"line":35,"column":41},"end":{"line":35,"column":44}}]},"13":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":3},"end":{"line":56,"column":3}},{"start":{"line":56,"column":3},"end":{"line":56,"column":3}}]},"14":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":3},"end":{"line":59,"column":3}},{"start":{"line":59,"column":3},"end":{"line":59,"column":3}}]},"15":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":3},"end":{"line":65,"column":3}},{"start":{"line":65,"column":3},"end":{"line":65,"column":3}}]},"16":{"line":65,"type":"binary-expr","locations":[{"start":{"line":65,"column":7},"end":{"line":65,"column":16}},{"start":{"line":65,"column":20},"end":{"line":65,"column":41}}]},"17":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":3},"end":{"line":67,"column":3}},{"start":{"line":67,"column":3},"end":{"line":67,"column":3}}]},"18":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":5},"end":{"line":69,"column":5}},{"start":{"line":69,"column":5},"end":{"line":69,"column":5}}]},"19":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":3},"end":{"line":81,"column":3}},{"start":{"line":81,"column":3},"end":{"line":81,"column":3}}]},"20":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":4},"end":{"line":83,"column":4}},{"start":{"line":83,"column":4},"end":{"line":83,"column":4}}]},"21":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":4},"end":{"line":85,"column":4}},{"start":{"line":85,"column":4},"end":{"line":85,"column":4}}]},"22":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":3},"end":{"line":89,"column":3}},{"start":{"line":89,"column":3},"end":{"line":89,"column":3}}]},"23":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":3},"end":{"line":96,"column":3}},{"start":{"line":96,"column":3},"end":{"line":96,"column":3}}]},"24":{"line":96,"type":"binary-expr","locations":[{"start":{"line":96,"column":8},"end":{"line":96,"column":16}},{"start":{"line":96,"column":20},"end":{"line":96,"column":38}},{"start":{"line":96,"column":44},"end":{"line":96,"column":53}},{"start":{"line":96,"column":57},"end":{"line":96,"column":76}}]},"25":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":4},"end":{"line":98,"column":4}},{"start":{"line":98,"column":4},"end":{"line":98,"column":4}}]},"26":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":4},"end":{"line":111,"column":4}},{"start":{"line":111,"column":4},"end":{"line":111,"column":4}}]},"27":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":4},"end":{"line":114,"column":4}},{"start":{"line":114,"column":4},"end":{"line":114,"column":4}}]},"28":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":4},"end":{"line":164,"column":4}},{"start":{"line":164,"column":4},"end":{"line":164,"column":4}}]},"29":{"line":166,"type":"if","locations":[{"start":{"line":166,"column":5},"end":{"line":166,"column":5}},{"start":{"line":166,"column":5},"end":{"line":166,"column":5}}]},"30":{"line":171,"type":"if","locations":[{"start":{"line":171,"column":5},"end":{"line":171,"column":5}},{"start":{"line":171,"column":5},"end":{"line":171,"column":5}}]},"31":{"line":177,"type":"if","locations":[{"start":{"line":177,"column":5},"end":{"line":177,"column":5}},{"start":{"line":177,"column":5},"end":{"line":177,"column":5}}]},"32":{"line":183,"type":"if","locations":[{"start":{"line":183,"column":5},"end":{"line":183,"column":5}},{"start":{"line":183,"column":5},"end":{"line":183,"column":5}}]},"33":{"line":185,"type":"if","locations":[{"start":{"line":185,"column":5},"end":{"line":185,"column":5}},{"start":{"line":185,"column":5},"end":{"line":185,"column":5}}]},"34":{"line":195,"type":"if","locations":[{"start":{"line":195,"column":3},"end":{"line":195,"column":3}},{"start":{"line":195,"column":3},"end":{"line":195,"column":3}}]},"35":{"line":199,"type":"if","locations":[{"start":{"line":199,"column":3},"end":{"line":199,"column":3}},{"start":{"line":199,"column":3},"end":{"line":199,"column":3}}]},"36":{"line":200,"type":"cond-expr","locations":[{"start":{"line":200,"column":36},"end":{"line":200,"column":41}},{"start":{"line":200,"column":44},"end":{"line":200,"column":61}}]},"37":{"line":200,"type":"cond-expr","locations":[{"start":{"line":200,"column":56},"end":{"line":200,"column":57}},{"start":{"line":200,"column":60},"end":{"line":200,"column":61}}]},"38":{"line":201,"type":"if","locations":[{"start":{"line":201,"column":3},"end":{"line":201,"column":3}},{"start":{"line":201,"column":3},"end":{"line":201,"column":3}}]},"39":{"line":205,"type":"if","locations":[{"start":{"line":205,"column":4},"end":{"line":205,"column":4}},{"start":{"line":205,"column":4},"end":{"line":205,"column":4}}]},"40":{"line":231,"type":"cond-expr","locations":[{"start":{"line":231,"column":24},"end":{"line":231,"column":49}},{"start":{"line":231,"column":51},"end":{"line":231,"column":72}}]},"41":{"line":232,"type":"cond-expr","locations":[{"start":{"line":232,"column":24},"end":{"line":232,"column":49}},{"start":{"line":232,"column":51},"end":{"line":232,"column":72}}]}},"code":["/**"," * A version of Modified Balanced Winnow (Carvalho and Cohen, 2006)"," *    where the weights vector is a hash (not a numeric array), "," *    so the features can be any objects (not just nubmers)."," * @author Erel Segal-haLevi"," * @since 2013-06-03"," * "," * @param opts optional parameters: <ul>"," *\t<li>debug "," *  <li>default_positive_weight, default_negative_weight: default weight for a newly discovered feature (default = 2, 1)."," *  <li>promotion, demotion, threshold, margin - explained in the paper."," *  <li>retrain_count - number of times to retrain in batch mode. Default = 0 (no retrain)."," *  <li>bias - constant (bias) factor (default: 1)."," */"," ","var hash = require(\"../../utils/hash\");","var sprintf = require(\"sprintf\").sprintf;  // for explanations","","function WinnowHash(opts) {","\tif (!opts) opts = {}","","\tthis.debug = opts.debug || false; ","\t\t","\t// Default values are based on Carvalho and Cohen, 2006, section 4.2:\t","\tthis.default_positive_weight = opts.default_positive_weight || 2.0;","\tthis.default_negative_weight = opts.default_negative_weight || 1.0;","\tthis.do_averaging = opts.do_averaging || false;","\tthis.threshold = ('threshold' in opts? opts.threshold: 1);","\tthis.promotion = opts.promotion || 1.5;","\tthis.demotion = opts.demotion || 0.5;","\tthis.margin = ('margin' in opts? opts.margin: 1.0);","\tthis.retrain_count = opts.retrain_count || 0;","\tthis.detailed_explanations = opts.detailed_explanations || false;","\t","\tthis.bias = ('bias' in opts? opts.bias: 1.0);","","\tthis.positive_weights = {};","\tthis.negative_weights = {};","\tthis.positive_weights_sum = {};   // for averaging; count only weight vectors with successful predictions (Carvalho and Cohen, 2006).","\tthis.negative_weights_sum = {};   // for averaging; count only weight vectors with successful predictions (Carvalho and Cohen, 2006).","}","","","WinnowHash.prototype = {","\t\t","\t\ttoJSON: function(folder) {","\t\t\treturn {","\t\t\t\tpositive_weights: this.positive_weights,","\t\t\t\tnegative_weights: this.negative_weights,","\t\t\t\tpositive_weights_sum: this.positive_weights_sum,","\t\t\t\tnegative_weights_sum: this.negative_weights_sum,","\t\t\t}","\t\t},","","\t\tfromJSON: function(json) {","\t\t\tif (!json.positive_weights) throw new Error(\"No positive weights in json: \"+JSON.stringify(json));","\t\t\tthis.positive_weights = json.positive_weights;","\t\t\tthis.positive_weights_sum = json.positive_weights_sum;","\t\t\tif (!json.negative_weights) throw new Error(\"No negative weights in json: \"+JSON.stringify(json));","\t\t\tthis.negative_weights = json.negative_weights;","\t\t\tthis.negative_weights_sum = json.negative_weights_sum;","\t\t},","\t\t","\t\teditFeatureValues: function (features, remove_unknown_features) {","\t\t\tif (this.bias && !('bias' in features))","\t\t\t\tfeatures['bias'] = 1;","\t\t\tif (remove_unknown_features) {","\t\t\t\tfor (var feature in features)","\t\t\t\t\tif (!(feature in this.positive_weights))","\t\t\t\t\t\tdelete features[feature];","\t\t\t}","\t\t\thash.normalize_sum_of_values_to_1(features);","\t\t},","","\t\t/**","\t\t * @param inputs a SINGLE training sample; a hash (feature => value).","\t\t * @param expected the classification value for that sample (0 or 1)","\t\t * @return true if the input sample got its correct classification (i.e. no change made).","\t\t */","\t\ttrain_features: function(features, expected) {","\t\t\tif (this.debug) console.log(\"train_features \"+JSON.stringify(features)+\" , \"+expected);","\t\t\tfor (feature in features) {","\t\t\t\tif (!(feature in this.positive_weights)) ","\t\t\t\t\tthis.positive_weights[feature] = this.default_positive_weight;","\t\t\t\tif (!(feature in this.negative_weights)) ","\t\t\t\t\tthis.negative_weights[feature] = this.default_negative_weight;","\t\t\t}","","\t\t\tif (this.debug) console.log('> this.positive_weights  ',JSON.stringify(this.positive_weights),', this.negative_weights: ',JSON.stringify(this.negative_weights));","","\t\t\tvar score = this.perceive_features(features, /*continuous_output=*/true, this.positive_weights, this.negative_weights);","\t\t\t\t // always use the running 'weights' vector for training, and NOT the weights_sum!","","\t\t\t//if (this.debug) console.log('> training ',features,', expecting: ',expected, ' got score=', score);","\t\t\t","\t\t\tif ((expected && score<=this.margin) || (!expected && score>=-this.margin)) {","\t\t\t\t// Current model is incorrect - adjustment needed!","\t\t\t\tif (expected) {","\t\t\t\t\tfor (var feature in features) {","\t\t\t\t\t\tvar value = features[feature]; ","\t\t\t\t\t\tthis.positive_weights[feature] *= (this.promotion * (1 + value));","\t\t\t\t\t\tthis.negative_weights[feature] *= (this.demotion * (1 - value));","\t\t\t\t\t}","\t\t\t\t} else {","\t\t\t\t\tfor (var feature in features) { ","\t\t\t\t\t\tvar value = features[feature]; ","\t\t\t\t\t\tthis.positive_weights[feature] *= (this.demotion * (1 - value));","\t\t\t\t\t\tthis.negative_weights[feature] *= (this.promotion * (1 + value));","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tif (this.debug) console.log('--> this.positive_weights',JSON.stringify(this.positive_weights),', this.negative_weights: ',JSON.stringify(this.negative_weights));","\t\t\t\treturn false;","\t\t\t} else {","\t\t\t\tif (this.do_averaging) {","\t\t\t\t\thash.add(this.positive_weights_sum, this.positive_weights);","\t\t\t\t\thash.add(this.negative_weights_sum, this.negative_weights);","\t\t\t\t}","\t\t\t\treturn true;","\t\t\t}","\t\t},","","\t\t/**","\t\t * train online (a single instance).","\t\t *","\t\t * @param features a SINGLE training sample (a hash of feature-value pairs).","\t\t * @param expected the classification value for that sample (0 or 1).","\t\t * @return true if the input sample got its correct classification (i.e. no change made).","\t\t */","\t\ttrainOnline: function(features, expected) {","\t\t\tthis.editFeatureValues(features, /*remove_unknown_features=*/false);","\t\t\treturn this.train_features(features, expected);","\t\t\t\t//this.normalized_features(features, /*remove_unknown_features=*/false), expected);","\t\t},","","\t\t/**","\t\t * Batch training (a set of samples). Uses the option this.retrain_count.","\t\t *","\t\t * @param dataset an array of samples of the form {input: {feature1: value1...} , output: 0/1} ","\t\t */","\t\ttrainBatch: function(dataset) {","//\t\t\tvar normalized_inputs = [];","\t\t\tfor (var i=0; i<dataset.length; ++i)","\t\t\t\tthis.editFeatureValues(dataset[i].input, /*remove_unknown_features=*/false);","//\t\t\t\tnormalized_inputs[i] = this.normalized_features(dataset[i].input, /*remove_unknown_features=*/false);","\t","\t\t\tfor (var r=0; r<=this.retrain_count; ++r)","\t\t\t\tfor (var i=0; i<dataset.length; ++i) ","\t\t\t\t\tthis.train_features(dataset[i].input, dataset[i].output);","\t\t},","\t\t","","\t\t/**","\t\t * @param inputs a SINGLE sample; a hash (feature => value).","\t\t * @param continuous_output if true, return the net classification score. If false [default], return 0 or 1.","\t\t * @param explain - int - if positive, an \"explanation\" field, with the given length, will be added to the result.  ","\t\t * @param positive_weights_for_classification, negative_weights_for_classification -","\t\t  the weights vector to use (either the running 'weights' or 'weights_sum').  ","\t\t * @return the classification of the sample.","\t\t */","\t\tperceive_features: function(features, continuous_output, positive_weights_for_classification, negative_weights_for_classification, explain) {","\t\t\tvar score = 0;","\t\t\tvar explanations = [];","\t\t\tfor (var feature in features) {","\t\t\t\tif (feature in positive_weights_for_classification) {","\t\t\t\t\tvar positive_weight = positive_weights_for_classification[feature];","\t\t\t\t\tif (!isFinite(positive_weight)) {","\t\t\t\t\t\tconsole.dir(positive_weights_for_classification);","\t\t\t\t\t\tthrow new Error(\"positive_weight[\"+feature+\"]=\"+positive_weight);","\t\t\t\t\t}","\t\t\t\t\tvar negative_weight = negative_weights_for_classification[feature];","\t\t\t\t\tif (!isFinite(negative_weight)) {","\t\t\t\t\t\tconsole.dir(negative_weights_for_classification);","\t\t\t\t\t\tthrow new Error(\"negative_weight[\"+feature+\"]=\"+negative_weight);","\t\t\t\t\t}","\t\t\t\t\tvar net_weight = positive_weight-negative_weight;","\t\t\t\t\tvar value = features[feature];","\t\t\t\t\tif (isNaN(value)) {","\t\t\t\t\t\tconsole.dir(features);","\t\t\t\t\t\tthrow new Error(\"score is NaN! features[\"+feature+\"]=\"+value+\" net_weight=\"+positive_weight+\"-\"+negative_weight+\"=\"+net_weight);","\t\t\t\t\t}","\t\t\t\t\tvar relevance = value * net_weight;","\t\t\t\t\tscore += relevance;","\t\t\t\t\tif (isNaN(score)) ","\t\t\t\t\t\tthrow new Error(\"score is NaN! features[\"+feature+\"]=\"+value+\" net_weight=\"+positive_weight+\"-\"+negative_weight+\"=\"+net_weight);","\t\t\t\t\tif (explain>0) explanations.push(","\t\t\t\t\t\t\t{","\t\t\t\t\t\t\t\tfeature: feature,","\t\t\t\t\t\t\t\tvalue: value,","\t\t\t\t\t\t\t\tweight: sprintf(\"+%1.3f-%1.3f=%1.3f\",positive_weight,negative_weight,net_weight),","\t\t\t\t\t\t\t\trelevance: relevance,","\t\t\t\t\t\t\t}","\t\t\t\t\t);","\t\t\t\t}","\t\t\t}","\t\t\tif (isNaN(score)) ","\t\t\t\tthrow new Error(\"score is NaN! features=\"+JSON.stringify(features));","\t\t\tscore -= this.threshold;","","\t\t\tif (this.debug) console.log(\"> perceive_features \",JSON.stringify(features),\" = \",score);","\t\t\tvar result = (continuous_output? score: (score > 0 ? 1 : 0));","\t\t\tif (explain>0) {","\t\t\t\texplanations.sort(function(a,b){return Math.abs(b.relevance)-Math.abs(a.relevance); });","\t\t\t\texplanations.splice(explain, explanations.length-explain);  // \"explain\" is the max length of explanation.","\t\t\t\t","\t\t\t\tif (!this.detailed_explanations) {","\t\t\t\t\texplanations = explanations.map(function(e) {","\t\t\t\t\t\treturn sprintf(\"%s%+1.2f\", e.feature, e.relevance);","\t\t\t\t\t});","\t\t\t\t}","\t\t\t\t","\t\t\t\tresult = {","\t\t\t\t\tclassification: result,","\t\t\t\t\texplanation: explanations,","\t\t\t\t};","\t\t\t}","\t\t\treturn result;","\t\t},","","\t\t/**","\t\t * @param inputs a SINGLE sample (a hash of feature-value pairs).","\t\t * @param continuous_output if true, return the net classification value. If false [default], return 0 or 1.","\t\t * @param explain - int - if positive, an \"explanation\" field, with the given length, will be added to the result.  ","\t\t * @return the classification of the sample.","\t\t */","\t\tclassify: function(features, explain, continuous_output) {","\t\t\tthis.editFeatureValues(features, /*remove_unknown_features=*/true);","\t\t\treturn this.perceive_features(","\t\t\t\t//this.normalized_features(features, /*remove_unknown_features=*/true),","\t\t\t\tfeatures, ","\t\t\t\tcontinuous_output,","\t\t\t\t(this.do_averaging? this.positive_weights_sum: this.positive_weights),","\t\t\t\t(this.do_averaging? this.negative_weights_sum: this.negative_weights),","\t\t\t\texplain );","\t\t},","}","","module.exports = WinnowHash;","",""],"l":{"16":1,"17":1,"19":1,"20":4,"22":4,"25":4,"26":4,"27":4,"28":4,"29":4,"30":4,"31":4,"32":4,"33":4,"35":4,"37":4,"38":4,"39":4,"40":4,"44":1,"47":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"65":62,"66":24,"67":62,"68":50,"69":182,"70":14,"72":62,"81":102,"82":102,"83":405,"84":21,"85":405,"86":21,"89":102,"91":102,"96":102,"98":20,"99":10,"100":39,"101":39,"102":39,"105":10,"106":39,"107":39,"108":39,"111":20,"112":20,"114":82,"115":0,"116":0,"118":82,"130":3,"131":3,"142":3,"143":9,"146":3,"147":33,"148":99,"161":152,"162":152,"163":152,"164":573,"165":573,"166":573,"167":0,"168":0,"170":573,"171":573,"172":0,"173":0,"175":573,"176":573,"177":573,"178":0,"179":0,"181":573,"182":573,"183":573,"184":0,"185":573,"195":152,"196":0,"197":152,"199":152,"200":152,"201":152,"202":72,"203":26,"205":26,"206":26,"207":85,"211":26,"216":152,"226":50,"227":50,"237":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/decisiontree/DecisionTree.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/decisiontree/DecisionTree.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":1,"8":0,"9":0,"10":5,"11":5,"12":3,"13":2,"14":0,"15":0,"16":2,"17":2,"18":2,"19":2,"20":2,"21":2,"22":4,"23":10,"24":4,"25":4,"26":4,"27":2,"28":0,"29":0,"30":0,"31":0,"32":9,"33":1,"34":1,"35":3,"36":6,"37":1,"38":9,"39":9,"40":9,"41":9,"42":18,"43":48,"44":18,"45":9,"46":18,"47":9,"48":27,"49":27,"50":42,"51":27,"52":42,"53":27,"54":42,"55":42,"56":84,"57":42,"58":42,"59":42,"60":2,"61":9,"62":0,"63":1,"64":1,"65":2,"66":2,"67":3,"68":3,"69":3,"70":5,"71":3,"72":3,"73":0,"74":2,"75":1},"b":{"1":[0,1],"2":[3,2],"3":[0,2],"4":[3,0]},"f":{"1":1,"2":0,"3":0,"4":5,"5":4,"6":10,"7":0,"8":0,"9":0,"10":0,"11":9,"12":1,"13":9,"14":18,"15":48,"16":18,"17":27,"18":42,"19":42,"20":42,"21":42,"22":84,"23":42,"24":2,"25":9,"26":0,"27":1,"28":2,"29":5},"fnMap":{"1":{"name":"DecisionTree","line":8,"loc":{"start":{"line":8,"column":0},"end":{"line":8,"column":28}}},"2":{"name":"(anonymous_2)","line":15,"loc":{"start":{"line":15,"column":10},"end":{"line":15,"column":27}}},"3":{"name":"(anonymous_3)","line":19,"loc":{"start":{"line":19,"column":12},"end":{"line":19,"column":27}}},"4":{"name":"(anonymous_4)","line":23,"loc":{"start":{"line":23,"column":14},"end":{"line":23,"column":42}}},"5":{"name":"(anonymous_5)","line":39,"loc":{"start":{"line":39,"column":42},"end":{"line":39,"column":53}}},"6":{"name":"(anonymous_6)","line":40,"loc":{"start":{"line":40,"column":43},"end":{"line":40,"column":55}}},"7":{"name":"(anonymous_7)","line":49,"loc":{"start":{"line":49,"column":14},"end":{"line":49,"column":26}}},"8":{"name":"(anonymous_8)","line":50,"loc":{"start":{"line":50,"column":28},"end":{"line":50,"column":39}}},"9":{"name":"(anonymous_9)","line":53,"loc":{"start":{"line":53,"column":9},"end":{"line":53,"column":24}}},"10":{"name":"(anonymous_10)","line":54,"loc":{"start":{"line":54,"column":27},"end":{"line":54,"column":39}}},"11":{"name":"(anonymous_11)","line":57,"loc":{"start":{"line":57,"column":13},"end":{"line":57,"column":24}}},"12":{"name":"(anonymous_12)","line":61,"loc":{"start":{"line":61,"column":19},"end":{"line":61,"column":37}}},"13":{"name":"(anonymous_13)","line":73,"loc":{"start":{"line":73,"column":8},"end":{"line":73,"column":34}}},"14":{"name":"(anonymous_14)","line":77,"loc":{"start":{"line":77,"column":38},"end":{"line":77,"column":49}}},"15":{"name":"(anonymous_15)","line":78,"loc":{"start":{"line":78,"column":41},"end":{"line":78,"column":52}}},"16":{"name":"(anonymous_16)","line":81,"loc":{"start":{"line":81,"column":48},"end":{"line":81,"column":61}}},"17":{"name":"(anonymous_17)","line":85,"loc":{"start":{"line":85,"column":11},"end":{"line":85,"column":25}}},"18":{"name":"(anonymous_18)","line":87,"loc":{"start":{"line":87,"column":36},"end":{"line":87,"column":47}}},"19":{"name":"(anonymous_19)","line":88,"loc":{"start":{"line":88,"column":33},"end":{"line":88,"column":44}}},"20":{"name":"(anonymous_20)","line":89,"loc":{"start":{"line":89,"column":31},"end":{"line":89,"column":44}}},"21":{"name":"(anonymous_21)","line":92,"loc":{"start":{"line":92,"column":8},"end":{"line":92,"column":26}}},"22":{"name":"(anonymous_22)","line":93,"loc":{"start":{"line":93,"column":39},"end":{"line":93,"column":51}}},"23":{"name":"(anonymous_23)","line":98,"loc":{"start":{"line":98,"column":8},"end":{"line":98,"column":19}}},"24":{"name":"(anonymous_24)","line":102,"loc":{"start":{"line":102,"column":11},"end":{"line":102,"column":39}}},"25":{"name":"(anonymous_25)","line":103,"loc":{"start":{"line":103,"column":31},"end":{"line":103,"column":42}}},"26":{"name":"(anonymous_26)","line":106,"loc":{"start":{"line":106,"column":25},"end":{"line":106,"column":54}}},"27":{"name":"(anonymous_27)","line":115,"loc":{"start":{"line":115,"column":14},"end":{"line":115,"column":32}}},"28":{"name":"(anonymous_28)","line":126,"loc":{"start":{"line":126,"column":12},"end":{"line":126,"column":59}}},"29":{"name":"(anonymous_29)","line":131,"loc":{"start":{"line":131,"column":59},"end":{"line":131,"column":71}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":30}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":39}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":41}},"4":{"start":{"line":8,"column":0},"end":{"line":11,"column":1}},"5":{"start":{"line":9,"column":1},"end":{"line":9,"column":21}},"6":{"start":{"line":9,"column":12},"end":{"line":9,"column":21}},"7":{"start":{"line":13,"column":0},"end":{"line":140,"column":1}},"8":{"start":{"line":16,"column":3},"end":{"line":16,"column":19}},"9":{"start":{"line":20,"column":3},"end":{"line":20,"column":19}},"10":{"start":{"line":24,"column":3},"end":{"line":24,"column":54}},"11":{"start":{"line":25,"column":3},"end":{"line":28,"column":10}},"12":{"start":{"line":27,"column":16},"end":{"line":27,"column":110}},"13":{"start":{"line":29,"column":10},"end":{"line":33,"column":10}},"14":{"start":{"line":31,"column":16},"end":{"line":31,"column":57}},"15":{"start":{"line":32,"column":16},"end":{"line":32,"column":107}},"16":{"start":{"line":34,"column":9},"end":{"line":34,"column":59}},"17":{"start":{"line":35,"column":3},"end":{"line":35,"column":59}},"18":{"start":{"line":36,"column":9},"end":{"line":36,"column":88}},"19":{"start":{"line":37,"column":9},"end":{"line":37,"column":76}},"20":{"start":{"line":38,"column":9},"end":{"line":38,"column":31}},"21":{"start":{"line":39,"column":9},"end":{"line":44,"column":17}},"22":{"start":{"line":40,"column":16},"end":{"line":40,"column":94}},"23":{"start":{"line":40,"column":56},"end":{"line":40,"column":91}},"24":{"start":{"line":41,"column":16},"end":{"line":41,"column":89}},"25":{"start":{"line":42,"column":16},"end":{"line":42,"column":77}},"26":{"start":{"line":43,"column":16},"end":{"line":43,"column":34}},"27":{"start":{"line":46,"column":8},"end":{"line":46,"column":20}},"28":{"start":{"line":50,"column":9},"end":{"line":50,"column":86}},"29":{"start":{"line":50,"column":41},"end":{"line":50,"column":64}},"30":{"start":{"line":54,"column":9},"end":{"line":54,"column":64}},"31":{"start":{"line":54,"column":41},"end":{"line":54,"column":55}},"32":{"start":{"line":58,"column":9},"end":{"line":58,"column":66}},"33":{"start":{"line":62,"column":3},"end":{"line":62,"column":20}},"34":{"start":{"line":63,"column":3},"end":{"line":69,"column":4}},"35":{"start":{"line":65,"column":4},"end":{"line":68,"column":5}},"36":{"start":{"line":67,"column":5},"end":{"line":67,"column":23}},"37":{"start":{"line":70,"column":3},"end":{"line":70,"column":18}},"38":{"start":{"line":74,"column":9},"end":{"line":74,"column":78}},"39":{"start":{"line":75,"column":12},"end":{"line":75,"column":70}},"40":{"start":{"line":76,"column":9},"end":{"line":76,"column":39}},"41":{"start":{"line":77,"column":9},"end":{"line":80,"column":19}},"42":{"start":{"line":78,"column":13},"end":{"line":78,"column":88}},"43":{"start":{"line":78,"column":53},"end":{"line":78,"column":85}},"44":{"start":{"line":79,"column":16},"end":{"line":79,"column":86}},"45":{"start":{"line":81,"column":9},"end":{"line":81,"column":77}},"46":{"start":{"line":81,"column":62},"end":{"line":81,"column":72}},"47":{"start":{"line":82,"column":9},"end":{"line":82,"column":44}},"48":{"start":{"line":86,"column":9},"end":{"line":86,"column":41}},"49":{"start":{"line":87,"column":9},"end":{"line":87,"column":81}},"50":{"start":{"line":87,"column":48},"end":{"line":87,"column":72}},"51":{"start":{"line":88,"column":9},"end":{"line":88,"column":77}},"52":{"start":{"line":88,"column":45},"end":{"line":88,"column":68}},"53":{"start":{"line":89,"column":9},"end":{"line":89,"column":60}},"54":{"start":{"line":89,"column":45},"end":{"line":89,"column":55}},"55":{"start":{"line":93,"column":9},"end":{"line":93,"column":78}},"56":{"start":{"line":93,"column":52},"end":{"line":93,"column":68}},"57":{"start":{"line":94,"column":9},"end":{"line":94,"column":33}},"58":{"start":{"line":95,"column":9},"end":{"line":95,"column":32}},"59":{"start":{"line":99,"column":9},"end":{"line":99,"column":40}},"60":{"start":{"line":103,"column":9},"end":{"line":103,"column":78}},"61":{"start":{"line":103,"column":43},"end":{"line":103,"column":70}},"62":{"start":{"line":107,"column":3},"end":{"line":107,"column":48}},"63":{"start":{"line":116,"column":3},"end":{"line":116,"column":43}},"64":{"start":{"line":117,"column":3},"end":{"line":117,"column":49}},"65":{"start":{"line":127,"column":6},"end":{"line":127,"column":23}},"66":{"start":{"line":128,"column":12},"end":{"line":137,"column":17}},"67":{"start":{"line":129,"column":16},"end":{"line":129,"column":37}},"68":{"start":{"line":130,"column":16},"end":{"line":130,"column":47}},"69":{"start":{"line":131,"column":24},"end":{"line":131,"column":103}},"70":{"start":{"line":131,"column":73},"end":{"line":131,"column":100}},"71":{"start":{"line":132,"column":24},"end":{"line":136,"column":25}},"72":{"start":{"line":133,"column":32},"end":{"line":133,"column":55}},"73":{"start":{"line":135,"column":32},"end":{"line":135,"column":58}},"74":{"start":{"line":138,"column":12},"end":{"line":138,"column":28}},"75":{"start":{"line":142,"column":0},"end":{"line":142,"column":30}}},"branchMap":{"1":{"line":9,"type":"if","locations":[{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},{"start":{"line":9,"column":1},"end":{"line":9,"column":1}}]},"2":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":3},"end":{"line":25,"column":3}},{"start":{"line":25,"column":3},"end":{"line":25,"column":3}}]},"3":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":10},"end":{"line":29,"column":10}},{"start":{"line":29,"column":10},"end":{"line":29,"column":10}}]},"4":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":24},"end":{"line":132,"column":24}},{"start":{"line":132,"column":24},"end":{"line":132,"column":24}}]}},"code":["/* Implementation of Decision Tree classifier, ID3 implementation","   the code based on https://github.com/bugless/nodejs-decision-tree-id3/blob/master/lib/decision-tree.js"," */","var _ = require('underscore');","var hash = require(\"../../utils/hash\");","var sprintf = require(\"sprintf\").sprintf;  // for explanations","","function DecisionTree(opts) {","\tif (!opts) opts = {}","\t// this.debug = opts.debug || false; ","}","","DecisionTree.prototype = {","\t\t","\t\ttoJSON: function(folder) {","\t\t\treturn this.root","\t\t},","","\t\tfromJSON: function(json) {","\t\t\tthis.root = json","\t\t},","","\t\tcreateTree: function(dataset, features) {","\t\t\tvar targets = _.unique(_.pluck(dataset, 'output'));","\t\t\tif (targets.length == 1){","                // console.log(\"end node! \"+targets[0]);","                return {type:\"result\", val: targets[0], name: targets[0], alias:targets[0]+this.randomTag() }; ","        \t}","        \t if(features.length == 0){","                // console.log(\"returning the most dominate feature!!!\");","                var topTarget = this.mostCommon(targets);","                return {type:\"result\", val: topTarget, name: topTarget, alias: topTarget+this.randomTag()};","        \t}","        \tvar bestFeature = this.maxGain(dataset, features);","\t\t\tvar remainingFeatures = _.without(features,bestFeature);","        \tvar possibleValues = _.unique(_.pluck(_.pluck(dataset, 'input'), bestFeature));","        \tvar node = {name: bestFeature,alias: bestFeature+this.randomTag()};","        \tnode.type = \"feature\";","        \tnode.vals = _.map(possibleValues,function(v){","                var _newS = dataset.filter(function(x) {return x['input'][bestFeature] == v});","                var child_node = {name:v,alias:v+this.randomTag(),type: \"feature_value\"};","                child_node.child =  this.createTree(_newS,remainingFeatures);","                return child_node;","        }, this);","        ","        return node;","\t\t},","","\t\tmostCommon: function(l) {","        \treturn  _.sortBy(l,function(a){ return this.count(a,l); },this).reverse()[0];","\t\t},","","\t\tcount: function(a, l) {","        \treturn _.filter(l,function(b) { return b === a}).length","\t\t},","","\t\trandomTag: function() {","        \treturn \"_r\"+Math.round(Math.random()*1000000).toString();","\t\t},","","\t\textractFeatures: function(dataset) {","\t\t\tvar features = []","\t\t\tfor (record in dataset)","\t\t\t{","\t\t\t\tfor (key in dataset[record]['input'])","\t\t\t\t{","\t\t\t\t\tfeatures.push(key)","\t\t\t\t}","\t\t\t}","\t\t\treturn features","\t\t},","","\t\tgain: function(dataset, feature){","        \tvar attrVals = _.unique(_.pluck(_.pluck(dataset, 'input'), feature));","            var setEntropy = this.entropy(_.pluck(dataset, 'output'));","        \tvar setSize = _.size(dataset);","        \tvar entropies = attrVals.map(function(n){","            \tvar subset = dataset.filter(function(x){return x['input'][feature] === n});","                return (subset.length/setSize)*this.entropy(_.pluck(subset,'output'));","        \t }, this);","        \tvar sumOfEntropies =  entropies.reduce(function(a,b){return a+b},0);","        \treturn setEntropy - sumOfEntropies;","\t\t},","\t\t","\t\tentropy: function(vals){","\t        var uniqueVals = _.unique(vals);","\t        var probs = uniqueVals.map(function(x){return this.prob(x,vals)}, this);","\t        var logVals = probs.map(function(p){return -p*this.log2(p) }, this);","\t        return logVals.reduce(function(a,b){return a+b},0);","\t\t},","","\t\tprob: function(val,vals){","\t        var instances = _.filter(vals,function(x) {return x === val}).length;","\t        var total = vals.length;","\t        return instances/total;","\t\t},","","\t\tlog2: function(n){","\t        return Math.log(n)/Math.log(2);","\t\t},","","\t\tmaxGain: function(dataset, features) {","\t        return _.max(features,function(e){return this.gain(dataset,e)}, this)","\t\t},","","\t\tsetFeatureLookupTable: function(featureLookupTable) {","\t\t\tthis.featureLookupTable = featureLookupTable;","\t\t},","\t\t","  \t\t/**","\t\t * Batch training (a set of samples). Uses the option this.retrain_count.","\t\t *","\t\t * @param dataset an array of samples of the form {input: {feature1: value1...} , output: 0/1} ","\t\t */","\t\ttrainBatch: function(dataset) {","\t\t\tfeatures = this.extractFeatures(dataset)","\t\t\tthis.root = this.createTree(dataset, features)","\t\t},","\t\t","\t\t/**","\t\t * @param inputs a SINGLE sample (a hash of feature-value pairs).","\t\t * @param continuous_output if true, return the net classification value. If false [default], return 0 or 1.","\t\t * @param explain - int - if positive, an \"explanation\" field, with the given length, will be added to the result.  ","\t\t * @return the classification of the sample.","\t\t */","\t\tclassify: function(features, explain, continuous_output) {","\t\t    root = this.root;","            while (root.type !== \"result\") {","                var attr = root.name;","                var sampleVal = features[attr];","                        var childNode = _.detect(root.vals,function(x) { return x.name == sampleVal });","                        if (childNode) {","                                root = childNode.child;","                        } else {","                                root = root.vals[0].child;","                        }","                }","            return root.val;","\t\t},","}","","module.exports = DecisionTree;","",""],"l":{"4":1,"5":1,"6":1,"8":1,"9":1,"13":1,"16":0,"20":0,"24":5,"25":5,"27":3,"29":2,"31":0,"32":0,"34":2,"35":2,"36":2,"37":2,"38":2,"39":2,"40":10,"41":4,"42":4,"43":4,"46":2,"50":0,"54":0,"58":9,"62":1,"63":1,"65":3,"67":6,"70":1,"74":9,"75":9,"76":9,"77":9,"78":48,"79":18,"81":18,"82":9,"86":27,"87":42,"88":42,"89":42,"93":84,"94":42,"95":42,"99":42,"103":9,"107":0,"116":1,"117":1,"127":2,"128":2,"129":3,"130":3,"131":5,"132":3,"133":3,"135":0,"138":2,"142":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/multilabel/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/multilabel/index.js","s":{"1":1,"2":1,"3":10,"4":10,"5":0},"b":{"1":[10,0],"2":[10,10]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":61},"end":{"line":17,"column":78}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":12,"column":1}},"2":{"start":{"line":15,"column":0},"end":{"line":20,"column":1}},"3":{"start":{"line":16,"column":1},"end":{"line":19,"column":3}},"4":{"start":{"line":17,"column":2},"end":{"line":19,"column":3}},"5":{"start":{"line":18,"column":3},"end":{"line":18,"column":52}}},"branchMap":{"1":{"line":16,"type":"if","locations":[{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},{"start":{"line":16,"column":1},"end":{"line":16,"column":1}}]},"2":{"line":16,"type":"binary-expr","locations":[{"start":{"line":16,"column":5},"end":{"line":16,"column":46}},{"start":{"line":16,"column":50},"end":{"line":16,"column":100}}]}},"code":["module.exports = {","\tBinaryRelevance:        require('./BinaryRelevance'),","\tPassiveAggressive:      require('./PassiveAggressiveHash'),","\tBinarySegmentation:     require('./BinarySegmentation'),","\tMulticlassSegmentation: require('./MulticlassSegmentation'),","\tHomer:                  require('./Homer'),","\tMetaLabeler:            require('./MetaLabeler'),","\tCrossLanguageModel:     require('./CrossLangaugeModelClassifier'),","\tThresholdClassifier:    require('./ThresholdClassifier'),","\tAdaboost:  \t\t\t\trequire('./Adaboost'),","\tPartialClassification:  require('./PartialClassification'),","}","","// add a \"classify and log\" method to all classifiers, for demos:","for (var classifierClass in module.exports) {","\tif (module.exports[classifierClass].prototype && module.exports[classifierClass].prototype.classify)","\t\tmodule.exports[classifierClass].prototype.classifyAndLog = function(sample) {","\t\t\tconsole.log(sample+\" is \"+this.classify(sample));","\t\t}","}",""],"l":{"1":1,"15":1,"16":10,"17":10,"18":0}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/multilabel/BinaryRelevance.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/multilabel/BinaryRelevance.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":1,"10":1,"11":1,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":1,"23":3,"24":3,"25":3,"26":3,"27":3,"28":3,"29":3,"30":3,"31":3,"32":1,"33":3,"34":3,"35":3,"36":9,"37":0,"38":9,"39":6,"40":1,"41":3,"42":0,"43":3,"44":16,"45":16,"46":16,"47":16,"48":16,"49":16,"50":48,"51":48,"52":0,"53":48,"54":48,"55":0,"56":48,"57":48,"58":0,"59":48,"60":48,"61":20,"62":20,"63":10,"64":28,"65":14,"66":48,"67":16,"68":0,"69":16,"70":8,"71":24,"72":8,"73":8,"74":14,"75":8,"76":14,"77":8,"78":16,"79":20,"80":16,"81":20,"82":16,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":3,"115":3,"116":3,"117":0,"118":1},"b":{"1":[0,1],"2":[1,1],"3":[0,0],"4":[3,0],"5":[0,9],"6":[6,3],"7":[0,3],"8":[0,48],"9":[0,48],"10":[24,24],"11":[0,48],"12":[20,28],"13":[10,10],"14":[14,14],"15":[0,16],"16":[8,8],"17":[8,8],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[3,0],"23":[0,3],"24":[3,0]},"f":{"1":1,"2":0,"3":1,"4":16,"5":24,"6":14,"7":14,"8":20,"9":20,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":3},"fnMap":{"1":{"name":"(anonymous_1)","line":14,"loc":{"start":{"line":14,"column":22},"end":{"line":14,"column":37}}},"2":{"name":"(anonymous_2)","line":34,"loc":{"start":{"line":34,"column":14},"end":{"line":34,"column":39}}},"3":{"name":"(anonymous_3)","line":54,"loc":{"start":{"line":54,"column":14},"end":{"line":54,"column":32}}},"4":{"name":"(anonymous_4)","line":114,"loc":{"start":{"line":114,"column":11},"end":{"line":114,"column":49}}},"5":{"name":"(anonymous_5)","line":154,"loc":{"start":{"line":154,"column":29},"end":{"line":154,"column":42}}},"6":{"name":"(anonymous_6)","line":157,"loc":{"start":{"line":157,"column":59},"end":{"line":157,"column":72}}},"7":{"name":"(anonymous_7)","line":158,"loc":{"start":{"line":158,"column":56},"end":{"line":158,"column":69}}},"8":{"name":"(anonymous_8)","line":163,"loc":{"start":{"line":163,"column":28},"end":{"line":163,"column":41}}},"9":{"name":"(anonymous_9)","line":164,"loc":{"start":{"line":164,"column":35},"end":{"line":164,"column":48}}},"10":{"name":"(anonymous_10)","line":178,"loc":{"start":{"line":178,"column":16},"end":{"line":178,"column":34}}},"11":{"name":"(anonymous_11)","line":189,"loc":{"start":{"line":189,"column":18},"end":{"line":189,"column":44}}},"12":{"name":"(anonymous_12)","line":191,"loc":{"start":{"line":191,"column":19},"end":{"line":191,"column":44}}},"13":{"name":"(anonymous_13)","line":200,"loc":{"start":{"line":200,"column":16},"end":{"line":200,"column":27}}},"14":{"name":"(anonymous_14)","line":207,"loc":{"start":{"line":207,"column":24},"end":{"line":207,"column":53}}},"15":{"name":"(anonymous_15)","line":215,"loc":{"start":{"line":215,"column":10},"end":{"line":215,"column":21}}},"16":{"name":"(anonymous_16)","line":230,"loc":{"start":{"line":230,"column":12},"end":{"line":230,"column":27}}},"17":{"name":"(anonymous_17)","line":238,"loc":{"start":{"line":238,"column":27},"end":{"line":238,"column":43}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":39}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":41}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":32}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":51}},"5":{"start":{"line":14,"column":0},"end":{"line":22,"column":1}},"6":{"start":{"line":15,"column":1},"end":{"line":18,"column":2}},"7":{"start":{"line":16,"column":2},"end":{"line":16,"column":20}},"8":{"start":{"line":17,"column":2},"end":{"line":17,"column":57}},"9":{"start":{"line":19,"column":1},"end":{"line":19,"column":55}},"10":{"start":{"line":20,"column":1},"end":{"line":20,"column":33}},"11":{"start":{"line":21,"column":1},"end":{"line":21,"column":36}},"12":{"start":{"line":24,"column":0},"end":{"line":246,"column":1}},"13":{"start":{"line":35,"column":2},"end":{"line":35,"column":57}},"14":{"start":{"line":36,"column":2},"end":{"line":40,"column":3}},"15":{"start":{"line":37,"column":3},"end":{"line":37,"column":33}},"16":{"start":{"line":38,"column":3},"end":{"line":38,"column":48}},"17":{"start":{"line":39,"column":3},"end":{"line":39,"column":71}},"18":{"start":{"line":41,"column":2},"end":{"line":44,"column":3}},"19":{"start":{"line":42,"column":3},"end":{"line":43,"column":72}},"20":{"start":{"line":43,"column":4},"end":{"line":43,"column":72}},"21":{"start":{"line":56,"column":2},"end":{"line":56,"column":33}},"22":{"start":{"line":59,"column":2},"end":{"line":74,"column":3}},"23":{"start":{"line":60,"column":3},"end":{"line":60,"column":33}},"24":{"start":{"line":61,"column":3},"end":{"line":61,"column":80}},"25":{"start":{"line":62,"column":3},"end":{"line":62,"column":34}},"26":{"start":{"line":64,"column":3},"end":{"line":73,"column":4}},"27":{"start":{"line":65,"column":4},"end":{"line":65,"column":35}},"28":{"start":{"line":66,"column":4},"end":{"line":66,"column":49}},"29":{"start":{"line":67,"column":4},"end":{"line":68,"column":47}},"30":{"start":{"line":68,"column":5},"end":{"line":68,"column":47}},"31":{"start":{"line":69,"column":4},"end":{"line":72,"column":6}},"32":{"start":{"line":77,"column":2},"end":{"line":89,"column":3}},"33":{"start":{"line":78,"column":3},"end":{"line":78,"column":33}},"34":{"start":{"line":79,"column":3},"end":{"line":79,"column":34}},"35":{"start":{"line":80,"column":3},"end":{"line":88,"column":4}},"36":{"start":{"line":81,"column":4},"end":{"line":82,"column":47}},"37":{"start":{"line":82,"column":5},"end":{"line":82,"column":47}},"38":{"start":{"line":83,"column":4},"end":{"line":87,"column":8}},"39":{"start":{"line":84,"column":5},"end":{"line":87,"column":8}},"40":{"start":{"line":92,"column":2},"end":{"line":96,"column":3}},"41":{"start":{"line":93,"column":3},"end":{"line":93,"column":53}},"42":{"start":{"line":93,"column":19},"end":{"line":93,"column":53}},"43":{"start":{"line":94,"column":3},"end":{"line":95,"column":47}},"44":{"start":{"line":115,"column":2},"end":{"line":115,"column":17}},"45":{"start":{"line":116,"column":2},"end":{"line":116,"column":17}},"46":{"start":{"line":117,"column":2},"end":{"line":117,"column":24}},"47":{"start":{"line":118,"column":2},"end":{"line":118,"column":33}},"48":{"start":{"line":119,"column":2},"end":{"line":119,"column":32}},"49":{"start":{"line":121,"column":2},"end":{"line":148,"column":3}},"50":{"start":{"line":122,"column":3},"end":{"line":122,"column":57}},"51":{"start":{"line":124,"column":3},"end":{"line":124,"column":59}},"52":{"start":{"line":124,"column":19},"end":{"line":124,"column":59}},"53":{"start":{"line":128,"column":3},"end":{"line":128,"column":75}},"54":{"start":{"line":129,"column":3},"end":{"line":129,"column":73}},"55":{"start":{"line":129,"column":19},"end":{"line":129,"column":73}},"56":{"start":{"line":131,"column":3},"end":{"line":131,"column":96}},"57":{"start":{"line":132,"column":3},"end":{"line":132,"column":46}},"58":{"start":{"line":132,"column":19},"end":{"line":132,"column":46}},"59":{"start":{"line":134,"column":3},"end":{"line":134,"column":53}},"60":{"start":{"line":137,"column":3},"end":{"line":145,"column":5}},"61":{"start":{"line":139,"column":4},"end":{"line":139,"column":31}},"62":{"start":{"line":140,"column":4},"end":{"line":140,"column":78}},"63":{"start":{"line":140,"column":29},"end":{"line":140,"column":78}},"64":{"start":{"line":144,"column":4},"end":{"line":144,"column":92}},"65":{"start":{"line":144,"column":29},"end":{"line":144,"column":92}},"66":{"start":{"line":147,"column":3},"end":{"line":147,"column":29}},"67":{"start":{"line":150,"column":2},"end":{"line":150,"column":37}},"68":{"start":{"line":150,"column":18},"end":{"line":150,"column":37}},"69":{"start":{"line":152,"column":2},"end":{"line":161,"column":3}},"70":{"start":{"line":154,"column":3},"end":{"line":154,"column":70}},"71":{"start":{"line":154,"column":44},"end":{"line":154,"column":58}},"72":{"start":{"line":155,"column":3},"end":{"line":155,"column":37}},"73":{"start":{"line":157,"column":3},"end":{"line":157,"column":100}},"74":{"start":{"line":157,"column":74},"end":{"line":157,"column":88}},"75":{"start":{"line":158,"column":3},"end":{"line":158,"column":97}},"76":{"start":{"line":158,"column":71},"end":{"line":158,"column":94}},"77":{"start":{"line":160,"column":3},"end":{"line":160,"column":67}},"78":{"start":{"line":163,"column":2},"end":{"line":163,"column":60}},"79":{"start":{"line":163,"column":43},"end":{"line":163,"column":57}},"80":{"start":{"line":164,"column":2},"end":{"line":164,"column":67}},"81":{"start":{"line":164,"column":50},"end":{"line":164,"column":64}},"82":{"start":{"line":166,"column":2},"end":{"line":175,"column":11}},"83":{"start":{"line":179,"column":2},"end":{"line":179,"column":17}},"84":{"start":{"line":180,"column":2},"end":{"line":180,"column":18}},"85":{"start":{"line":181,"column":2},"end":{"line":181,"column":17}},"86":{"start":{"line":183,"column":2},"end":{"line":187,"column":3}},"87":{"start":{"line":184,"column":3},"end":{"line":184,"column":56}},"88":{"start":{"line":185,"column":3},"end":{"line":185,"column":59}},"89":{"start":{"line":186,"column":3},"end":{"line":186,"column":36}},"90":{"start":{"line":189,"column":2},"end":{"line":195,"column":10}},"91":{"start":{"line":190,"column":3},"end":{"line":190,"column":30}},"92":{"start":{"line":191,"column":3},"end":{"line":194,"column":11}},"93":{"start":{"line":192,"column":4},"end":{"line":193,"column":39}},"94":{"start":{"line":193,"column":5},"end":{"line":193,"column":39}},"95":{"start":{"line":197,"column":2},"end":{"line":197,"column":16}},"96":{"start":{"line":201,"column":2},"end":{"line":201,"column":52}},"97":{"start":{"line":209,"column":2},"end":{"line":209,"column":47}},"98":{"start":{"line":210,"column":2},"end":{"line":212,"column":83}},"99":{"start":{"line":211,"column":3},"end":{"line":212,"column":83}},"100":{"start":{"line":212,"column":4},"end":{"line":212,"column":83}},"101":{"start":{"line":216,"column":2},"end":{"line":216,"column":18}},"102":{"start":{"line":217,"column":2},"end":{"line":226,"column":3}},"103":{"start":{"line":218,"column":3},"end":{"line":218,"column":63}},"104":{"start":{"line":219,"column":3},"end":{"line":224,"column":4}},"105":{"start":{"line":220,"column":4},"end":{"line":220,"column":34}},"106":{"start":{"line":221,"column":4},"end":{"line":221,"column":31}},"107":{"start":{"line":222,"column":4},"end":{"line":222,"column":44}},"108":{"start":{"line":223,"column":4},"end":{"line":223,"column":78}},"109":{"start":{"line":225,"column":3},"end":{"line":225,"column":45}},"110":{"start":{"line":227,"column":2},"end":{"line":227,"column":16}},"111":{"start":{"line":231,"column":2},"end":{"line":234,"column":3}},"112":{"start":{"line":232,"column":3},"end":{"line":232,"column":74}},"113":{"start":{"line":233,"column":3},"end":{"line":233,"column":62}},"114":{"start":{"line":239,"column":2},"end":{"line":244,"column":3}},"115":{"start":{"line":240,"column":3},"end":{"line":240,"column":74}},"116":{"start":{"line":241,"column":3},"end":{"line":242,"column":88}},"117":{"start":{"line":242,"column":4},"end":{"line":242,"column":88}},"118":{"start":{"line":249,"column":0},"end":{"line":249,"column":33}}},"branchMap":{"1":{"line":15,"type":"if","locations":[{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},{"start":{"line":15,"column":1},"end":{"line":15,"column":1}}]},"2":{"line":20,"type":"binary-expr","locations":[{"start":{"line":20,"column":14},"end":{"line":20,"column":24}},{"start":{"line":20,"column":28},"end":{"line":20,"column":33}}]},"3":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":3},"end":{"line":42,"column":3}},{"start":{"line":42,"column":3},"end":{"line":42,"column":3}}]},"4":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":4},"end":{"line":67,"column":4}},{"start":{"line":67,"column":4},"end":{"line":67,"column":4}}]},"5":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":4},"end":{"line":81,"column":4}},{"start":{"line":81,"column":4},"end":{"line":81,"column":4}}]},"6":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":4},"end":{"line":83,"column":4}},{"start":{"line":83,"column":4},"end":{"line":83,"column":4}}]},"7":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":3},"end":{"line":93,"column":3}},{"start":{"line":93,"column":3},"end":{"line":93,"column":3}}]},"8":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":3},"end":{"line":124,"column":3}},{"start":{"line":124,"column":3},"end":{"line":124,"column":3}}]},"9":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":3},"end":{"line":129,"column":3}},{"start":{"line":129,"column":3},"end":{"line":129,"column":3}}]},"10":{"line":131,"type":"cond-expr","locations":[{"start":{"line":131,"column":46},"end":{"line":131,"column":77}},{"start":{"line":131,"column":79},"end":{"line":131,"column":95}}]},"11":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":3},"end":{"line":132,"column":3}},{"start":{"line":132,"column":3},"end":{"line":132,"column":3}}]},"12":{"line":137,"type":"if","locations":[{"start":{"line":137,"column":3},"end":{"line":137,"column":3}},{"start":{"line":137,"column":3},"end":{"line":137,"column":3}}]},"13":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":4},"end":{"line":140,"column":4}},{"start":{"line":140,"column":4},"end":{"line":140,"column":4}}]},"14":{"line":144,"type":"if","locations":[{"start":{"line":144,"column":4},"end":{"line":144,"column":4}},{"start":{"line":144,"column":4},"end":{"line":144,"column":4}}]},"15":{"line":150,"type":"if","locations":[{"start":{"line":150,"column":2},"end":{"line":150,"column":2}},{"start":{"line":150,"column":2},"end":{"line":150,"column":2}}]},"16":{"line":152,"type":"if","locations":[{"start":{"line":152,"column":2},"end":{"line":152,"column":2}},{"start":{"line":152,"column":2},"end":{"line":152,"column":2}}]},"17":{"line":166,"type":"cond-expr","locations":[{"start":{"line":167,"column":3},"end":{"line":174,"column":4}},{"start":{"line":175,"column":3},"end":{"line":175,"column":9}}]},"18":{"line":192,"type":"if","locations":[{"start":{"line":192,"column":4},"end":{"line":192,"column":4}},{"start":{"line":192,"column":4},"end":{"line":192,"column":4}}]},"19":{"line":211,"type":"if","locations":[{"start":{"line":211,"column":3},"end":{"line":211,"column":3}},{"start":{"line":211,"column":3},"end":{"line":211,"column":3}}]},"20":{"line":211,"type":"binary-expr","locations":[{"start":{"line":211,"column":7},"end":{"line":211,"column":25}},{"start":{"line":211,"column":29},"end":{"line":211,"column":87}}]},"21":{"line":219,"type":"if","locations":[{"start":{"line":219,"column":3},"end":{"line":219,"column":3}},{"start":{"line":219,"column":3},"end":{"line":219,"column":3}}]},"22":{"line":239,"type":"if","locations":[{"start":{"line":239,"column":2},"end":{"line":239,"column":2}},{"start":{"line":239,"column":2},"end":{"line":239,"column":2}}]},"23":{"line":241,"type":"if","locations":[{"start":{"line":241,"column":3},"end":{"line":241,"column":3}},{"start":{"line":241,"column":3},"end":{"line":241,"column":3}}]},"24":{"line":241,"type":"binary-expr","locations":[{"start":{"line":241,"column":7},"end":{"line":241,"column":30}},{"start":{"line":241,"column":34},"end":{"line":241,"column":92}}]}},"code":["var hash = require(\"../../utils/hash\");","var sprintf = require(\"sprintf\").sprintf;","var _ = require(\"underscore\")._;","var multilabelutils = require('./multilabelutils');","// var fs = require('fs');","","/**"," * BinaryRelevance - Multi-label classifier, based on a collection of binary classifiers. "," * Also known as: One-vs-All."," * "," * @param opts"," *            binaryClassifierType (mandatory) - the type of the base binary classifier. There is one such classifier per label. "," */","var BinaryRelevance = function(opts) {","\tif (!opts.binaryClassifierType) {","\t\tconsole.dir(opts);","\t\tthrow new Error(\"opts.binaryClassifierType not found\");","\t}","\tthis.binaryClassifierType = opts.binaryClassifierType;","\tthis.debug = opts.debug || false","\tthis.mapClassnameToClassifier = {};","}","","BinaryRelevance.prototype = {","","\t/**","\t * Tell the classifier that the given sample belongs to the given labels.","\t * ","\t * @param sample","\t *            a document.","\t * @param labels","\t *            an object whose KEYS are labels, or an array whose VALUES are labels.","\t */","\ttrainOnline: function(sample, labels) {","\t\tlabels = multilabelutils.normalizeOutputLabels(labels);","\t\tfor (var l in labels) {","\t\t\tvar positiveLabel = labels[l];","\t\t\tthis.makeSureClassifierExists(positiveLabel);","\t\t\tthis.mapClassnameToClassifier[positiveLabel].trainOnline(sample, 1);","\t\t}","\t\tfor (var negativeLabel in this.mapClassnameToClassifier) {","\t\t\tif (labels.indexOf(negativeLabel)<0)","\t\t\t\tthis.mapClassnameToClassifier[negativeLabel].trainOnline(sample, 0);","\t\t}","\t},","","\t/**","\t * Train the classifier with all the given documents.","\t * ","\t * @param dataset","\t *            an array with objects of the format: ","\t *            {input: sample1, output: [class11, class12...]}","\t */","\ttrainBatch : function(dataset) {","\t\t// this variable will hold a dataset for each binary classifier:","\t\tvar mapClassnameToDataset = {}; ","","\t\t// create positive samples for each class:","\t\tfor (var d in dataset) {","\t\t\tvar sample = dataset[d].input;","\t\t\tdataset[d].output = multilabelutils.normalizeOutputLabels(dataset[d].output);","\t\t\tvar labels = dataset[d].output;","","\t\t\tfor (var l in labels) {","\t\t\t\tvar positiveLabel  = labels[l];","\t\t\t\tthis.makeSureClassifierExists(positiveLabel);","\t\t\t\tif (!(positiveLabel in mapClassnameToDataset)) // make sure dataset for this class exists","\t\t\t\t\tmapClassnameToDataset[positiveLabel] = [];","\t\t\t\tmapClassnameToDataset[positiveLabel].push({","\t\t\t\t\tinput : sample,","\t\t\t\t\toutput : 1","\t\t\t\t})","\t\t\t}","\t\t}","","\t\t// create negative samples for each class (after all labels are in the array):","\t\tfor (var d in dataset) {","\t\t\tvar sample = dataset[d].input;","\t\t\tvar labels = dataset[d].output;","\t\t\tfor (var negativeLabel in this.mapClassnameToClassifier) {","\t\t\t\tif (!(negativeLabel in mapClassnameToDataset)) // make sure dataset for this class exists","\t\t\t\t\tmapClassnameToDataset[negativeLabel] = [];","\t\t\t\tif (labels.indexOf(negativeLabel)<0)","\t\t\t\t\tmapClassnameToDataset[negativeLabel].push({","\t\t\t\t\t\tinput : sample,","\t\t\t\t\t\toutput : 0","\t\t\t\t\t});","\t\t\t}","\t\t}","","\t\t// train all classifiers:","\t\tfor (var label in mapClassnameToDataset) {","\t\t\tif (this.debug) console.dir(\"TRAIN class=\"+label);","\t\t\tthis.mapClassnameToClassifier[label]","\t\t\t\t\t.trainBatch(mapClassnameToDataset[label]);","\t\t}","\t},","","\t/**","\t * Use the model trained so far to classify a new sample.","\t * ","\t * @param sample a document.","\t * @param explain - int - if positive, an \"explanation\" field, with the given length, will be added to the result.","\t * @param withScores - boolean - if true, return an array of [class,score], ordered by decreasing order of score.","\t *  ","\t * @return an array whose VALUES are the labels.","\t * @output","\t * scores [hash] - the scores of each binary classifier in the class","\t * explanations [hash] positive - features of the classifier with positive labels","\t *\t\t\t\t\t   negative - features of classifiers with negative labels","\t * classes [list] the list of given labels","\t */","","\tclassify: function(sample, explain, withScores) {","\t\tvar labels = []","\t\tvar scores = []","\t\tvar explanations = [];","\t\tvar positive_explanations = {};","\t\tvar negative_explanations = []","","\t\tfor (var label in this.mapClassnameToClassifier) {","\t\t\tvar classifier = this.mapClassnameToClassifier[label];","","\t\t\tif (this.debug) console.dir(\"Classify for class=\"+label)","\t\t\t","\t\t\t// fs.writeFileSync('/tmp/labels/'+label, JSON.stringify(classifier.getFeatures(), null, 4), 'utf8');","","\t\t\tvar scoreWithExplain = classifier.classify(sample, explain, withScores);","\t\t\tif (this.debug) console.log(JSON.stringify(scoreWithExplain, null, 4))","","\t\t\tvar score = scoreWithExplain.explanation?  scoreWithExplain.classification: scoreWithExplain;","\t\t\tif (this.debug) console.dir(\"score=\"+score)","","\t\t\texplanations_string = scoreWithExplain.explanation","","\t\t\t// if (score>0.5)","\t\t\tif (score>0)","\t\t\t\t{","\t\t\t\tlabels.push([label, score])","\t\t\t\tif (explanations_string) positive_explanations[label]=explanations_string;","\t\t\t\t}","\t\t\telse","\t\t\t\t{","\t\t\t\tif (explanations_string) negative_explanations.push([label, score, explanations_string])","\t\t\t\t}","","\t\t\tscores.push([label,score])","\t\t}","","\t\tif (this.debug) console.dir(scores)","","\t\tif (explain>0)","\t\t{","\t\t\tscores = _.sortBy(scores, function(num){ return num[1] }).reverse()","\t\t\tvar scores_hash = _.object(scores)","","\t\t\tnegative_explanations = _.sortBy(negative_explanations, function(num){ return num[1] }).reverse()","\t\t\tnegative_explanations = _.map(negative_explanations, function(num){ return [num[0],num[2]] });","","\t\t\tvar negative_explanations_hash = _.object(negative_explanations)","\t\t}","","\t\tlabels = _.sortBy(labels, function(num){ return num[1] });","\t\tlabels = _.map(labels.reverse(), function(num){ return num[0] });","","\t\treturn (explain>0?","\t\t\t{","\t\t\t\tclasses: labels, ","\t\t\t\tscores: scores_hash,","\t\t\t\texplanation: {","\t\t\t\t\tpositive: positive_explanations, ","\t\t\t\t\tnegative: negative_explanations_hash,","\t\t\t\t}","\t\t\t}:","\t\t\tlabels);","\t},","","\tclassifyBatch: function(testSet) {","\t\tvar labels = []","\t\tvar results = {}","\t\tvar output = []","","\t\tfor (var label in this.mapClassnameToClassifier) {","\t\t\tvar classifier = this.mapClassnameToClassifier[label]","\t\t\tvar scoreWithExplain = classifier.classifyBatch(testSet)","\t\t\tresults[label] = scoreWithExplain","\t\t}","","\t\t_.each(testSet, function(value, key, list){","\t\t\ttestSet[key]['output'] = []","\t\t\t_.each(results, function(ar, label, list){","\t\t\t\tif (ar[key]!=0)","\t\t\t\t\ttestSet[key]['output'].push(label)","\t\t\t}, this)","\t\t}, this)","","\t\treturn testSet","\t},","\t","\tgetAllClasses: function() {","\t\treturn Object.keys(this.mapClassnameToClassifier);","\t},","\t","\t/**","\t * Link to a FeatureLookupTable from a higher level in the hierarchy (typically from an EnhancedClassifier), used ONLY for generating meaningful explanations. ","\t */","\tsetFeatureLookupTable: function(featureLookupTable) {","\t\t//console.log(\"BR setFeatureLookupTable \"+featureLookupTable);","\t\tthis.featureLookupTable = featureLookupTable;","\t\tfor (var label in this.mapClassnameToClassifier)","\t\t\tif (featureLookupTable && this.mapClassnameToClassifier[label].setFeatureLookupTable)","\t\t\t\tthis.mapClassnameToClassifier[label].setFeatureLookupTable(featureLookupTable);","\t},","","\ttoJSON : function() {","\t\tvar result = {};","\t\tfor (var label in this.mapClassnameToClassifier) {","\t\t\tvar binaryClassifier = this.mapClassnameToClassifier[label];","\t\t\tif (!binaryClassifier.toJSON) {","\t\t\t\tconsole.dir(binaryClassifier);","\t\t\t\tconsole.log(\"prototype: \");","\t\t\t\tconsole.dir(binaryClassifier.__proto__);","\t\t\t\tthrow new Error(\"this binary classifier does not have a toJSON function\");","\t\t\t}","\t\t\tresult[label] = binaryClassifier.toJSON();","\t\t}","\t\treturn result;","\t},","","\tfromJSON : function(json) {","\t\tfor (var label in json) {","\t\t\tthis.mapClassnameToClassifier[label] = new this.binaryClassifierType();","\t\t\tthis.mapClassnameToClassifier[label].fromJSON(json[label]);","\t\t}","\t},","\t","\t// private function: ","\tmakeSureClassifierExists: function(label) {","\t\tif (!this.mapClassnameToClassifier[label]) { // make sure classifier exists","\t\t\tthis.mapClassnameToClassifier[label] = new this.binaryClassifierType();","\t\t\tif (this.featureLookupTable && this.mapClassnameToClassifier[label].setFeatureLookupTable)","\t\t\t\tthis.mapClassnameToClassifier[label].setFeatureLookupTable(this.featureLookupTable);","\t\t\t","\t\t}","\t},","}","","","module.exports = BinaryRelevance;","",""],"l":{"1":1,"2":1,"3":1,"4":1,"14":1,"15":1,"16":0,"17":0,"19":1,"20":1,"21":1,"24":1,"35":0,"36":0,"37":0,"38":0,"39":0,"41":0,"42":0,"43":0,"56":1,"59":1,"60":3,"61":3,"62":3,"64":3,"65":3,"66":3,"67":3,"68":3,"69":3,"77":1,"78":3,"79":3,"80":3,"81":9,"82":0,"83":9,"84":6,"92":1,"93":3,"94":3,"115":16,"116":16,"117":16,"118":16,"119":16,"121":16,"122":48,"124":48,"128":48,"129":48,"131":48,"132":48,"134":48,"137":48,"139":20,"140":20,"144":28,"147":48,"150":16,"152":16,"154":24,"155":8,"157":14,"158":14,"160":8,"163":20,"164":20,"166":16,"179":0,"180":0,"181":0,"183":0,"184":0,"185":0,"186":0,"189":0,"190":0,"191":0,"192":0,"193":0,"197":0,"201":0,"209":0,"210":0,"211":0,"212":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"225":0,"227":0,"231":0,"232":0,"233":0,"239":3,"240":3,"241":3,"242":0,"249":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/multilabel/multilabelutils.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/multilabel/multilabelutils.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":3,"14":3,"15":3,"16":3,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},"b":{"1":[0,0],"2":[0,0],"3":[3,0],"4":[3,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":3,"5":3,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":12},"end":{"line":12,"column":28}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":34},"end":{"line":19,"column":61}}},"3":{"name":"(anonymous_3)","line":28,"loc":{"start":{"line":28,"column":18},"end":{"line":28,"column":36}}},"4":{"name":"(anonymous_4)","line":32,"loc":{"start":{"line":32,"column":21},"end":{"line":32,"column":38}}},"5":{"name":"(anonymous_5)","line":36,"loc":{"start":{"line":36,"column":25},"end":{"line":36,"column":42}}},"6":{"name":"(anonymous_6)","line":42,"loc":{"start":{"line":42,"column":37},"end":{"line":42,"column":92}}},"7":{"name":"(anonymous_7)","line":48,"loc":{"start":{"line":48,"column":25},"end":{"line":48,"column":40}}},"8":{"name":"(anonymous_8)","line":55,"loc":{"start":{"line":55,"column":34},"end":{"line":55,"column":49}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":32}},"2":{"start":{"line":10,"column":0},"end":{"line":59,"column":1}},"3":{"start":{"line":13,"column":19},"end":{"line":13,"column":27}},"4":{"start":{"line":14,"column":26},"end":{"line":15,"column":58}},"5":{"start":{"line":15,"column":33},"end":{"line":15,"column":57}},"6":{"start":{"line":16,"column":19},"end":{"line":16,"column":29}},"7":{"start":{"line":20,"column":10},"end":{"line":21,"column":47}},"8":{"start":{"line":21,"column":11},"end":{"line":21,"column":47}},"9":{"start":{"line":23,"column":10},"end":{"line":23,"column":69}},"10":{"start":{"line":24,"column":10},"end":{"line":24,"column":33}},"11":{"start":{"line":25,"column":10},"end":{"line":25,"column":33}},"12":{"start":{"line":29,"column":10},"end":{"line":29,"column":72}},"13":{"start":{"line":33,"column":3},"end":{"line":33,"column":67}},"14":{"start":{"line":37,"column":3},"end":{"line":38,"column":22}},"15":{"start":{"line":38,"column":4},"end":{"line":38,"column":22}},"16":{"start":{"line":39,"column":3},"end":{"line":39,"column":55}},"17":{"start":{"line":43,"column":3},"end":{"line":43,"column":15}},"18":{"start":{"line":44,"column":3},"end":{"line":52,"column":4}},"19":{"start":{"line":45,"column":4},"end":{"line":45,"column":27}},"20":{"start":{"line":47,"column":4},"end":{"line":47,"column":17}},"21":{"start":{"line":48,"column":4},"end":{"line":51,"column":7}},"22":{"start":{"line":49,"column":5},"end":{"line":50,"column":28}},"23":{"start":{"line":50,"column":6},"end":{"line":50,"column":28}},"24":{"start":{"line":53,"column":3},"end":{"line":57,"column":11}},"25":{"start":{"line":55,"column":50},"end":{"line":55,"column":78}}},"branchMap":{"1":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":10},"end":{"line":20,"column":10}},{"start":{"line":20,"column":10},"end":{"line":20,"column":10}}]},"2":{"line":29,"type":"cond-expr","locations":[{"start":{"line":29,"column":40},"end":{"line":29,"column":46}},{"start":{"line":29,"column":48},"end":{"line":29,"column":70}}]},"3":{"line":33,"type":"cond-expr","locations":[{"start":{"line":33,"column":37},"end":{"line":33,"column":42}},{"start":{"line":33,"column":44},"end":{"line":33,"column":65}}]},"4":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":3},"end":{"line":37,"column":3}},{"start":{"line":37,"column":3},"end":{"line":37,"column":3}}]},"5":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":3},"end":{"line":44,"column":3}},{"start":{"line":44,"column":3},"end":{"line":44,"column":3}}]},"6":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":5},"end":{"line":49,"column":5}},{"start":{"line":49,"column":5},"end":{"line":49,"column":5}}]},"7":{"line":53,"type":"cond-expr","locations":[{"start":{"line":53,"column":22},"end":{"line":56,"column":4}},{"start":{"line":57,"column":3},"end":{"line":57,"column":10}}]}},"code":["var _ = require(\"underscore\")._;","/**"," * A utility function, used by several multi-label classifiers."," * "," * @param scoresVector [[label1,score1],[label2,score2],...]"," * @param explain (int) if >0, return explanation."," * @param withScores (boolean) if true, return the original scores vector."," * @param threshold if withScores is false, all labels with scores above this threshold will be returned."," */","module.exports = {","\t\t// iterate the list and collect the second item from the every element of the list","\t\tgetvalue: function (list) {","\t                  val = []","                          for (elem in list)","                               { val.push(list[elem][1]) }","\t                  return val","                },","","                normalizeClasses: function (expectedClasses) {","\t\t        if (!_(expectedClasses).isArray())","\t\t\t        expectedClasses = [expectedClasses];","","\t\t        expectedClasses = expectedClasses.map(this.stringifyClass);","\t\t        expectedClasses.sort();","\t\t        return expectedClasses;","\t        },","","\t\tstringifyClass: function (aClass) {","\t\t        return (_(aClass).isString()? aClass: JSON.stringify(aClass));","\t\t},","\t\t","\t\tstringifyIfNeeded: function (label) {","\t\t\treturn (typeof(label)==='string'? label: JSON.stringify(label));","\t\t},","","\t\tnormalizeOutputLabels: function(labels) {","\t\t\tif (!Array.isArray(labels))","\t\t\t\tlabels = [labels];","\t\t\treturn labels.map(module.exports.stringifyIfNeeded);","\t\t},","\t\t","\t\tmapScoresVectorToMultilabelResult: function(scoresVector, explain, withScores, threshold) {","\t\t\tvar results;","\t\t\tif (withScores) {","\t\t\t\tresults = scoresVector;","\t\t\t} else {","\t\t\t\tresults = [];","\t\t\t\tscoresVector.forEach(function(pair) {","\t\t\t\t\tif (pair[1]>=threshold)","\t\t\t\t\t\tresults.push(pair[0]);","\t\t\t\t});","\t\t\t}","\t\t\treturn explain>0? \t{","\t\t\t\tclasses: results, ","\t\t\t\texplanation: scoresVector.map(function(pair) {return pair[0]+\": \"+pair[1];})","\t\t\t}: ","\t\t\tresults; ","\t\t}","}",""],"l":{"1":1,"10":1,"13":0,"14":0,"15":0,"16":0,"20":0,"21":0,"23":0,"24":0,"25":0,"29":0,"33":3,"37":3,"38":3,"39":3,"43":0,"44":0,"45":0,"47":0,"48":0,"49":0,"50":0,"53":0,"55":0}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/multilabel/PassiveAggressiveHash.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/multilabel/PassiveAggressiveHash.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"fnMap":{"1":{"name":"(anonymous_1)","line":24,"loc":{"start":{"line":24,"column":34},"end":{"line":24,"column":49}}},"2":{"name":"(anonymous_2)","line":44,"loc":{"start":{"line":44,"column":10},"end":{"line":44,"column":49}}},"3":{"name":"(anonymous_3)","line":69,"loc":{"start":{"line":69,"column":20},"end":{"line":69,"column":34}}},"4":{"name":"(anonymous_4)","line":79,"loc":{"start":{"line":79,"column":9},"end":{"line":79,"column":35}}},"5":{"name":"(anonymous_5)","line":87,"loc":{"start":{"line":87,"column":16},"end":{"line":87,"column":40}}},"6":{"name":"(anonymous_6)","line":100,"loc":{"start":{"line":100,"column":16},"end":{"line":100,"column":40}}},"7":{"name":"(anonymous_7)","line":134,"loc":{"start":{"line":134,"column":14},"end":{"line":134,"column":32}}},"8":{"name":"(anonymous_8)","line":136,"loc":{"start":{"line":136,"column":18},"end":{"line":136,"column":34}}},"9":{"name":"(anonymous_9)","line":142,"loc":{"start":{"line":142,"column":19},"end":{"line":142,"column":35}}},"10":{"name":"(anonymous_10)","line":147,"loc":{"start":{"line":147,"column":14},"end":{"line":147,"column":42}}},"11":{"name":"(anonymous_11)","line":162,"loc":{"start":{"line":162,"column":12},"end":{"line":162,"column":52}}},"12":{"name":"(anonymous_12)","line":173,"loc":{"start":{"line":173,"column":20},"end":{"line":173,"column":65}}},"13":{"name":"(anonymous_13)","line":194,"loc":{"start":{"line":194,"column":13},"end":{"line":194,"column":31}}},"14":{"name":"(anonymous_14)","line":204,"loc":{"start":{"line":204,"column":16},"end":{"line":204,"column":27}}},"15":{"name":"(anonymous_15)","line":208,"loc":{"start":{"line":208,"column":10},"end":{"line":208,"column":29}}},"16":{"name":"(anonymous_16)","line":216,"loc":{"start":{"line":216,"column":12},"end":{"line":216,"column":37}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":39}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":41}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":32}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":27}},"5":{"start":{"line":5,"column":0},"end":{"line":5,"column":51}},"6":{"start":{"line":24,"column":0},"end":{"line":35,"column":1}},"7":{"start":{"line":25,"column":1},"end":{"line":25,"column":47}},"8":{"start":{"line":26,"column":1},"end":{"line":26,"column":38}},"9":{"start":{"line":27,"column":1},"end":{"line":29,"column":3}},"10":{"start":{"line":30,"column":1},"end":{"line":32,"column":3}},"11":{"start":{"line":33,"column":1},"end":{"line":33,"column":24}},"12":{"start":{"line":34,"column":1},"end":{"line":34,"column":24}},"13":{"start":{"line":37,"column":0},"end":{"line":221,"column":1}},"14":{"start":{"line":45,"column":2},"end":{"line":45,"column":79}},"15":{"start":{"line":46,"column":2},"end":{"line":46,"column":18}},"16":{"start":{"line":47,"column":2},"end":{"line":47,"column":39}},"17":{"start":{"line":47,"column":17},"end":{"line":47,"column":39}},"18":{"start":{"line":67,"column":2},"end":{"line":67,"column":75}},"19":{"start":{"line":68,"column":2},"end":{"line":68,"column":37}},"20":{"start":{"line":69,"column":2},"end":{"line":69,"column":54}},"21":{"start":{"line":69,"column":35},"end":{"line":69,"column":51}},"22":{"start":{"line":70,"column":2},"end":{"line":70,"column":22}},"23":{"start":{"line":80,"column":2},"end":{"line":80,"column":44}},"24":{"start":{"line":82,"column":2},"end":{"line":82,"column":56}},"25":{"start":{"line":85,"column":2},"end":{"line":85,"column":11}},"26":{"start":{"line":86,"column":2},"end":{"line":86,"column":32}},"27":{"start":{"line":87,"column":2},"end":{"line":94,"column":5}},"28":{"start":{"line":88,"column":3},"end":{"line":88,"column":32}},"29":{"start":{"line":89,"column":3},"end":{"line":89,"column":32}},"30":{"start":{"line":90,"column":3},"end":{"line":93,"column":4}},"31":{"start":{"line":91,"column":4},"end":{"line":91,"column":13}},"32":{"start":{"line":92,"column":4},"end":{"line":92,"column":19}},"33":{"start":{"line":97,"column":2},"end":{"line":97,"column":11}},"34":{"start":{"line":98,"column":2},"end":{"line":98,"column":33}},"35":{"start":{"line":99,"column":2},"end":{"line":99,"column":18}},"36":{"start":{"line":100,"column":2},"end":{"line":107,"column":5}},"37":{"start":{"line":101,"column":3},"end":{"line":101,"column":32}},"38":{"start":{"line":102,"column":3},"end":{"line":102,"column":32}},"39":{"start":{"line":103,"column":3},"end":{"line":106,"column":4}},"40":{"start":{"line":104,"column":4},"end":{"line":104,"column":14}},"41":{"start":{"line":105,"column":4},"end":{"line":105,"column":20}},"42":{"start":{"line":109,"column":2},"end":{"line":109,"column":73}},"43":{"start":{"line":110,"column":2},"end":{"line":118,"column":3}},"44":{"start":{"line":111,"column":3},"end":{"line":111,"column":56}},"45":{"start":{"line":112,"column":3},"end":{"line":112,"column":58}},"46":{"start":{"line":114,"column":3},"end":{"line":115,"column":48}},"47":{"start":{"line":115,"column":4},"end":{"line":115,"column":48}},"48":{"start":{"line":116,"column":3},"end":{"line":117,"column":49}},"49":{"start":{"line":117,"column":4},"end":{"line":117,"column":49}},"50":{"start":{"line":120,"column":2},"end":{"line":121,"column":64}},"51":{"start":{"line":121,"column":3},"end":{"line":121,"column":64}},"52":{"start":{"line":123,"column":2},"end":{"line":123,"column":38}},"53":{"start":{"line":124,"column":2},"end":{"line":124,"column":27}},"54":{"start":{"line":136,"column":2},"end":{"line":139,"column":11}},"55":{"start":{"line":137,"column":3},"end":{"line":137,"column":33}},"56":{"start":{"line":138,"column":3},"end":{"line":138,"column":74}},"57":{"start":{"line":141,"column":2},"end":{"line":144,"column":12}},"58":{"start":{"line":142,"column":3},"end":{"line":144,"column":12}},"59":{"start":{"line":143,"column":4},"end":{"line":143,"column":43}},"60":{"start":{"line":148,"column":2},"end":{"line":148,"column":27}},"61":{"start":{"line":149,"column":2},"end":{"line":149,"column":70}},"62":{"start":{"line":150,"column":2},"end":{"line":150,"column":33}},"63":{"start":{"line":163,"column":2},"end":{"line":163,"column":69}},"64":{"start":{"line":164,"column":2},"end":{"line":164,"column":73}},"65":{"start":{"line":165,"column":2},"end":{"line":165,"column":111}},"66":{"start":{"line":195,"column":2},"end":{"line":195,"column":37}},"67":{"start":{"line":196,"column":2},"end":{"line":201,"column":3}},"68":{"start":{"line":197,"column":3},"end":{"line":200,"column":4}},"69":{"start":{"line":198,"column":4},"end":{"line":198,"column":28}},"70":{"start":{"line":199,"column":4},"end":{"line":199,"column":32}},"71":{"start":{"line":205,"column":2},"end":{"line":205,"column":35}},"72":{"start":{"line":209,"column":2},"end":{"line":213,"column":3}},"73":{"start":{"line":217,"column":2},"end":{"line":217,"column":38}},"74":{"start":{"line":218,"column":2},"end":{"line":218,"column":30}},"75":{"start":{"line":219,"column":2},"end":{"line":219,"column":44}},"76":{"start":{"line":224,"column":0},"end":{"line":224,"column":45}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":22},"end":{"line":25,"column":40}},{"start":{"line":25,"column":44},"end":{"line":25,"column":46}}]},"2":{"line":26,"type":"binary-expr","locations":[{"start":{"line":26,"column":17},"end":{"line":26,"column":30}},{"start":{"line":26,"column":34},"end":{"line":26,"column":37}}]},"3":{"line":45,"type":"cond-expr","locations":[{"start":{"line":45,"column":47},"end":{"line":45,"column":63}},{"start":{"line":45,"column":65},"end":{"line":45,"column":77}}]},"4":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":2},"end":{"line":47,"column":2}},{"start":{"line":47,"column":2},"end":{"line":47,"column":2}}]},"5":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":3},"end":{"line":90,"column":3}},{"start":{"line":90,"column":3},"end":{"line":90,"column":3}}]},"6":{"line":90,"type":"binary-expr","locations":[{"start":{"line":90,"column":8},"end":{"line":90,"column":27}},{"start":{"line":90,"column":32},"end":{"line":90,"column":47}}]},"7":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":3},"end":{"line":103,"column":3}},{"start":{"line":103,"column":3},"end":{"line":103,"column":3}}]},"8":{"line":103,"type":"binary-expr","locations":[{"start":{"line":103,"column":7},"end":{"line":103,"column":29}},{"start":{"line":103,"column":33},"end":{"line":103,"column":48}}]},"9":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":2},"end":{"line":110,"column":2}},{"start":{"line":110,"column":2},"end":{"line":110,"column":2}}]},"10":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":3},"end":{"line":114,"column":3}},{"start":{"line":114,"column":3},"end":{"line":114,"column":3}}]},"11":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":3},"end":{"line":116,"column":3}},{"start":{"line":116,"column":3},"end":{"line":116,"column":3}}]},"12":{"line":197,"type":"if","locations":[{"start":{"line":197,"column":3},"end":{"line":197,"column":3}},{"start":{"line":197,"column":3},"end":{"line":197,"column":3}}]}},"code":["var hash = require(\"../../utils/hash\");","var sprintf = require(\"sprintf\").sprintf;","var _ = require(\"underscore\")._;","var util = require(\"util\");","var multilabelutils = require('./multilabelutils');","","","","/**"," * Multilabel online classifier based on Perceptron and Passive-Aggressive."," *"," * features and categories are strings; samples are hashes."," *"," * Based on Python code Copyright (c) 2013 Joseph Keshet."," *"," * Conversion to Node.js started by Erel Segal-haLevi, but not finished yet."," *"," * @since 2013-08"," * "," * @param opts"," *\t\t\tConstant (optional) - tradeoff constant (default=5.0)"," *\t\t\tretrain_count (optional) - number of epoches to run in trainBatch mode (default=10)  "," */","var MultiLabelPassiveAggressive = function(opts) {","\tthis.retrain_count = opts.retrain_count || 10;","\tthis.Constant = opts.Constant || 5.0;","\tthis.weights = {","\t\t//DUMMY_CLASS:{}","\t};","\tthis.weights_sum = {","\t\t//DUMMY_CLASS:{}","\t};","\tthis.seenFeatures = {};","\tthis.num_iterations = 0","}","","MultiLabelPassiveAggressive.prototype = {","","\t/** ","\t * @param sample a hash of feature-values (string features)","\t * @param averaging boolean ","\t * @return an array of pairs [category,score], sorted by decreasing score","\t */","\tpredict: function(features, averaging, explain) {","\t\tvar weights_for_classification = (averaging? this.weights_sum: this.weights);","\t\tvar scores = {};","\t\tif (explain>0) var explanations = [];","\t\t","//\t\tfor (var feature in features) {","//\t\t\tif (feature in weights_for_classification) {","//\t\t\t\tvar weight = weights_for_classification[feature];","//\t\t\t\tvar value = features[feature];","//\t\t\t\tvar relevance = value * weight;","//\t\t\t\tscore += relevance;","//\t\t\t\tif (explain>0) explanations.push(this.detailed_explanations?","//\t\t\t\t\t\t{","//\t\t\t\t\t\t\tfeature: feature,","//\t\t\t\t\t\t\tvalue: value,","//\t\t\t\t\t\t\tweight: weight,","//\t\t\t\t\t\t\trelevance: relevance,","//\t\t\t\t\t\t}:","//\t\t\t\t\t\tsprintf(\"%s%+1.2f*%+1.2f=%+1.2f\", feature, value, weight, relevance);","//\t\t\t\t);","//\t\t\t}","//\t\t}","\t\t","\t\tscores = hash.inner_product_matrix(features, weights_for_classification); // scores is a map: category=>score","\t\tvar scoresVector = _.pairs(scores); // scoresVector is an array of pairs [category,score]","\t\tscoresVector.sort(function(a,b) {return b[1]-a[1]}); // sort by decreasing score","\t\treturn scoresVector; ","\t},","\t","\t/**","\t * Tell the classifier that the given sample belongs to the given classes.","\t * ","\t * @param sample a hash of feature-values (string features)","\t * @param classes an array whose VALUES are classes.","\t */","\tupdate: function(sample, classes) {","\t\tvar classesSet = hash.normalized(classes);","","\t\tvar ranks = this.predict(sample, /*averaging=*/false);  // pairs of [class,score] sorted by decreasing score","","\t\t// find the lowest ranked relevant label r:","\t\tvar r = 0","\t\tvar r_score = Number.MAX_VALUE","\t\tranks.forEach(function(labelAndScore) {","\t\t\tvar label = labelAndScore[0];","\t\t\tvar score = labelAndScore[1];","\t\t\tif ((label in classesSet) && score < r_score) {","\t\t\t\tr = label","\t\t\t\tr_score = score","\t\t\t}","\t\t});","","\t\t// find the highest ranked irrelevant label s","\t\tvar s = 0","\t\tvar s_score = -Number.MAX_VALUE","\t\tranks.reverse();","\t\tranks.forEach(function(labelAndScore) {","\t\t\tvar label = labelAndScore[0];","\t\t\tvar score = labelAndScore[1];","\t\t\tif (!(label in classesSet) && score > s_score) {","\t\t\t\ts = label;","\t\t\t\ts_score = score;","\t\t\t}","\t\t});","","\t\tvar loss = Math.max(1.0 - r_score, 0.0) + Math.max(1.0 + s_score, 0.0);","\t\tif (loss > 0) {","\t\t\tvar sample_norm2 = hash.sum_of_square_values(sample);","\t\t\tvar tau = Math.min(this.Constant, loss / sample_norm2);","","\t\t\tif (r_score < Number.MAX_VALUE)","\t\t\t\thash.addtimes(this.weights[r], tau, sample);  // weights[r] += tau*sample","\t\t\tif (s_score > -Number.MAX_VALUE)","\t\t\t\thash.addtimes(this.weights[s], -tau, sample); // weights[s] -= tau*sample","\t\t}","\t\t// this.weights_sum = (this.weights + this.weights_sum);","\t\tfor (category in this.weights)","\t\t\thash.add(this.weights_sum[category], this.weights[category]);","\t\t","\t\thash.add(this.seenFeatures, sample);","\t\tthis.num_iterations += 1;","\t},","","\t/**","\t * Train the classifier with all the given documents.","\t * ","\t * @param dataset","\t *\t\t\tan array with objects of the format: ","\t *\t\t\t{input: sample1, output: [class11, class12...]}","\t */","\ttrainBatch : function(dataset) {","\t\t// preprocessing: add all the classes in the dataset to the weights vector;","\t\tdataset.forEach(function(datum) {","\t\t\tthis.addClasses(datum.output);","\t\t\tthis.editFeatureValues(datum.input, /*remove_unknown_features=*/false);","\t\t}, this);","","\t\tfor (var i=0; i<this.retrain_count; ++i)","\t\t\tdataset.forEach(function(datum) {","\t\t\t\tthis.update(datum.input, datum.output);","\t\t\t}, this);","\t},","\t","\ttrainOnline: function(features, classes) {","\t\tthis.addClasses(classes);","\t\tthis.editFeatureValues(features, /*remove_unknown_features=*/false);","\t\tthis.update(features, classes);","\t},","","\t/**","\t * Use the model trained so far to classify a new sample.","\t * ","\t * @param sample a hash {feature1: value1, feature2: value2, ...}.","\t * @param explain - int - if positive, an \"explanation\" field, with the given length, should be added to the result.","\t * @param withScores - boolean - if true, return an array of [class,score], ordered by decreasing order of score.","\t *  ","\t * @return an array whose VALUES are classes.","\t */","\tclassify : function(features, explain, withScores) {","\t\tthis.editFeatureValues(features, /*remove_unknown_features=*/true);","\t\tvar scoresVector = this.predict(features, /*averaging=*/true, explain);","\t\treturn multilabelutils.mapScoresVectorToMultilabelResult(scoresVector, explain, withScores, /*threshold=*/0);","\t},","","\t","\t/**","\t * Copied from Modified Balanced Winnow (see winnow/winnow_hash.js).","\t * Commented out, because it is unuseful here.","\t */","\teditFeatureValues: function (features, remove_unknown_features) {","//\t\tconsole.log(\"before: \"+util.inspect(features));","//\t\tif (!('bias' in features))","//\t\t\tfeatures['bias'] = 1.0;","//\t\tif (remove_unknown_features) {","//\t\t\tfor (var feature in features)","//\t\t\t\tif (!(feature in this.seenFeatures))","//\t\t\t\t\tdelete features[feature];","//\t\t}","//\t\thash.normalize_sum_of_values_to_1(features);","//\t\tconsole.log(\"after: \"+util.inspect(features));","\t},","","\t","\t/**","\t * Tell the classifier that the given classes will be used for the following","\t * samples, so that it will know to add negative samples to classes that do","\t * not appear.","\t * ","\t * @param classes an object whose KEYS are classes, or an array whose VALUES are classes.","\t */","\taddClasses: function(classes) {","\t\tclasses = hash.normalized(classes);","\t\tfor (var aClass in classes) {","\t\t\tif (!(aClass in this.weights)) {","\t\t\t\tthis.weights[aClass]={};","\t\t\t\tthis.weights_sum[aClass]={};","\t\t\t}","\t\t}","\t},","","\tgetAllClasses: function() {","\t\treturn Object.keys(this.weights);","\t},","","\ttoJSON : function(callback) {","\t\treturn {","\t\t\tweights_sum: this.weights_sum,","\t\t\tweights: this.weights,","\t\t\tnum_iterations: this.num_iterations,","\t\t}","\t},","","\tfromJSON : function(json, callback) {","\t\tthis.weights_sum = json.weights_sum;","\t\tthis.weights = json.weights;","\t\tthis.num_iterations = json.num_iterations;","\t},","}","","","module.exports = MultiLabelPassiveAggressive;",""],"l":{"1":1,"2":1,"3":1,"4":1,"5":1,"24":1,"25":0,"26":0,"27":0,"30":0,"33":0,"34":0,"37":1,"45":0,"46":0,"47":0,"67":0,"68":0,"69":0,"70":0,"80":0,"82":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"109":0,"110":0,"111":0,"112":0,"114":0,"115":0,"116":0,"117":0,"120":0,"121":0,"123":0,"124":0,"136":0,"137":0,"138":0,"141":0,"142":0,"143":0,"148":0,"149":0,"150":0,"163":0,"164":0,"165":0,"195":0,"196":0,"197":0,"198":0,"199":0,"205":0,"209":0,"217":0,"218":0,"219":0,"224":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/multilabel/BinarySegmentation.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/multilabel/BinarySegmentation.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0,0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"fnMap":{"1":{"name":"(anonymous_1)","line":20,"loc":{"start":{"line":20,"column":25},"end":{"line":20,"column":40}}},"2":{"name":"(anonymous_2)","line":52,"loc":{"start":{"line":52,"column":14},"end":{"line":52,"column":40}}},"3":{"name":"(anonymous_3)","line":72,"loc":{"start":{"line":72,"column":14},"end":{"line":72,"column":32}}},"4":{"name":"(anonymous_4)","line":74,"loc":{"start":{"line":74,"column":17},"end":{"line":74,"column":30}}},"5":{"name":"(anonymous_5)","line":91,"loc":{"start":{"line":91,"column":18},"end":{"line":91,"column":45}}},"6":{"name":"(anonymous_6)","line":127,"loc":{"start":{"line":127,"column":21},"end":{"line":127,"column":48}}},"7":{"name":"(anonymous_7)","line":150,"loc":{"start":{"line":150,"column":31},"end":{"line":150,"column":90}}},"8":{"name":"(anonymous_8)","line":169,"loc":{"start":{"line":169,"column":38},"end":{"line":169,"column":50}}},"9":{"name":"(anonymous_9)","line":171,"loc":{"start":{"line":171,"column":66},"end":{"line":171,"column":92}}},"10":{"name":"(anonymous_10)","line":211,"loc":{"start":{"line":211,"column":31},"end":{"line":211,"column":90}}},"11":{"name":"(anonymous_11)","line":235,"loc":{"start":{"line":235,"column":30},"end":{"line":235,"column":89}}},"12":{"name":"(anonymous_12)","line":283,"loc":{"start":{"line":283,"column":11},"end":{"line":283,"column":39}}},"13":{"name":"(anonymous_13)","line":325,"loc":{"start":{"line":325,"column":10},"end":{"line":325,"column":29}}},"14":{"name":"(anonymous_14)","line":340,"loc":{"start":{"line":340,"column":12},"end":{"line":340,"column":37}}},"15":{"name":"(anonymous_15)","line":347,"loc":{"start":{"line":347,"column":24},"end":{"line":347,"column":53}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":39}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":41}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":32}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":37}},"5":{"start":{"line":20,"column":0},"end":{"line":41,"column":1}},"6":{"start":{"line":21,"column":1},"end":{"line":24,"column":2}},"7":{"start":{"line":22,"column":2},"end":{"line":22,"column":20}},"8":{"start":{"line":23,"column":2},"end":{"line":23,"column":60}},"9":{"start":{"line":25,"column":1},"end":{"line":28,"column":2}},"10":{"start":{"line":26,"column":2},"end":{"line":26,"column":20}},"11":{"start":{"line":27,"column":2},"end":{"line":27,"column":55}},"12":{"start":{"line":30,"column":1},"end":{"line":30,"column":55}},"13":{"start":{"line":31,"column":1},"end":{"line":31,"column":51}},"14":{"start":{"line":33,"column":1},"end":{"line":38,"column":2}},"15":{"start":{"line":34,"column":25},"end":{"line":34,"column":87}},"16":{"start":{"line":34,"column":88},"end":{"line":34,"column":94}},"17":{"start":{"line":35,"column":25},"end":{"line":35,"column":86}},"18":{"start":{"line":35,"column":88},"end":{"line":35,"column":94}},"19":{"start":{"line":36,"column":26},"end":{"line":36,"column":88}},"20":{"start":{"line":36,"column":90},"end":{"line":36,"column":96}},"21":{"start":{"line":37,"column":10},"end":{"line":37,"column":43}},"22":{"start":{"line":40,"column":1},"end":{"line":40,"column":36}},"23":{"start":{"line":43,"column":0},"end":{"line":354,"column":1}},"24":{"start":{"line":53,"column":2},"end":{"line":53,"column":65}},"25":{"start":{"line":54,"column":2},"end":{"line":54,"column":37}},"26":{"start":{"line":55,"column":2},"end":{"line":58,"column":3}},"27":{"start":{"line":56,"column":3},"end":{"line":56,"column":48}},"28":{"start":{"line":57,"column":3},"end":{"line":57,"column":71}},"29":{"start":{"line":59,"column":2},"end":{"line":62,"column":3}},"30":{"start":{"line":60,"column":3},"end":{"line":61,"column":72}},"31":{"start":{"line":61,"column":4},"end":{"line":61,"column":72}},"32":{"start":{"line":74,"column":2},"end":{"line":76,"column":17}},"33":{"start":{"line":75,"column":3},"end":{"line":75,"column":57}},"34":{"start":{"line":76,"column":3},"end":{"line":76,"column":14}},"35":{"start":{"line":78,"column":2},"end":{"line":78,"column":37}},"36":{"start":{"line":92,"column":3},"end":{"line":92,"column":73}},"37":{"start":{"line":116,"column":3},"end":{"line":116,"column":24}},"38":{"start":{"line":128,"column":2},"end":{"line":128,"column":55}},"39":{"start":{"line":129,"column":2},"end":{"line":139,"column":3}},"40":{"start":{"line":131,"column":3},"end":{"line":131,"column":22}},"41":{"start":{"line":137,"column":3},"end":{"line":137,"column":103}},"42":{"start":{"line":166,"column":2},"end":{"line":166,"column":61}},"43":{"start":{"line":168,"column":16},"end":{"line":168,"column":35}},"44":{"start":{"line":169,"column":16},"end":{"line":178,"column":25}},"45":{"start":{"line":170,"column":19},"end":{"line":170,"column":103}},"46":{"start":{"line":171,"column":23},"end":{"line":177,"column":33}},"47":{"start":{"line":172,"column":29},"end":{"line":176,"column":34}},"48":{"start":{"line":174,"column":32},"end":{"line":174,"column":49}},"49":{"start":{"line":175,"column":29},"end":{"line":175,"column":71}},"50":{"start":{"line":180,"column":5},"end":{"line":180,"column":88}},"51":{"start":{"line":181,"column":5},"end":{"line":181,"column":91}},"52":{"start":{"line":184,"column":8},"end":{"line":184,"column":59}},"53":{"start":{"line":187,"column":2},"end":{"line":204,"column":3}},"54":{"start":{"line":189,"column":3},"end":{"line":189,"column":58}},"55":{"start":{"line":191,"column":3},"end":{"line":191,"column":74}},"56":{"start":{"line":192,"column":3},"end":{"line":192,"column":122}},"57":{"start":{"line":194,"column":3},"end":{"line":195,"column":49}},"58":{"start":{"line":195,"column":4},"end":{"line":195,"column":49}},"59":{"start":{"line":198,"column":3},"end":{"line":202,"column":4}},"60":{"start":{"line":199,"column":5},"end":{"line":200,"column":128}},"61":{"start":{"line":200,"column":6},"end":{"line":200,"column":128}},"62":{"start":{"line":212,"column":2},"end":{"line":212,"column":23}},"63":{"start":{"line":213,"column":2},"end":{"line":227,"column":3}},"64":{"start":{"line":214,"column":3},"end":{"line":214,"column":64}},"65":{"start":{"line":215,"column":3},"end":{"line":215,"column":74}},"66":{"start":{"line":216,"column":3},"end":{"line":216,"column":122}},"67":{"start":{"line":218,"column":3},"end":{"line":226,"column":4}},"68":{"start":{"line":220,"column":4},"end":{"line":220,"column":47}},"69":{"start":{"line":221,"column":4},"end":{"line":221,"column":30}},"70":{"start":{"line":222,"column":4},"end":{"line":225,"column":5}},"71":{"start":{"line":223,"column":5},"end":{"line":223,"column":32}},"72":{"start":{"line":224,"column":5},"end":{"line":224,"column":62}},"73":{"start":{"line":236,"column":2},"end":{"line":236,"column":23}},"74":{"start":{"line":237,"column":2},"end":{"line":237,"column":21}},"75":{"start":{"line":238,"column":2},"end":{"line":238,"column":39}},"76":{"start":{"line":239,"column":2},"end":{"line":239,"column":28}},"77":{"start":{"line":240,"column":2},"end":{"line":260,"column":3}},"78":{"start":{"line":241,"column":3},"end":{"line":241,"column":68}},"79":{"start":{"line":242,"column":3},"end":{"line":242,"column":82}},"80":{"start":{"line":243,"column":3},"end":{"line":243,"column":138}},"81":{"start":{"line":245,"column":3},"end":{"line":245,"column":29}},"82":{"start":{"line":247,"column":3},"end":{"line":255,"column":4}},"83":{"start":{"line":249,"column":4},"end":{"line":249,"column":47}},"84":{"start":{"line":250,"column":4},"end":{"line":250,"column":32}},"85":{"start":{"line":251,"column":4},"end":{"line":254,"column":5}},"86":{"start":{"line":252,"column":5},"end":{"line":252,"column":32}},"87":{"start":{"line":253,"column":5},"end":{"line":253,"column":62}},"88":{"start":{"line":257,"column":3},"end":{"line":257,"column":25}},"89":{"start":{"line":258,"column":3},"end":{"line":258,"column":61}},"90":{"start":{"line":259,"column":3},"end":{"line":259,"column":39}},"91":{"start":{"line":263,"column":2},"end":{"line":264,"column":46}},"92":{"start":{"line":264,"column":3},"end":{"line":264,"column":46}},"93":{"start":{"line":265,"column":2},"end":{"line":268,"column":3}},"94":{"start":{"line":266,"column":3},"end":{"line":266,"column":30}},"95":{"start":{"line":267,"column":3},"end":{"line":267,"column":60}},"96":{"start":{"line":286,"column":2},"end":{"line":286,"column":26}},"97":{"start":{"line":287,"column":2},"end":{"line":287,"column":34}},"98":{"start":{"line":289,"column":2},"end":{"line":322,"column":3}},"99":{"start":{"line":290,"column":3},"end":{"line":290,"column":31}},"100":{"start":{"line":291,"column":3},"end":{"line":291,"column":25}},"101":{"start":{"line":292,"column":3},"end":{"line":292,"column":79}},"102":{"start":{"line":294,"column":3},"end":{"line":294,"column":49}},"103":{"start":{"line":296,"column":3},"end":{"line":300,"column":12}},"104":{"start":{"line":302,"column":3},"end":{"line":302,"column":62}},"105":{"start":{"line":311,"column":3},"end":{"line":318,"column":22}},"106":{"start":{"line":326,"column":2},"end":{"line":326,"column":18}},"107":{"start":{"line":327,"column":2},"end":{"line":336,"column":3}},"108":{"start":{"line":328,"column":3},"end":{"line":328,"column":64}},"109":{"start":{"line":329,"column":3},"end":{"line":334,"column":4}},"110":{"start":{"line":330,"column":4},"end":{"line":330,"column":34}},"111":{"start":{"line":331,"column":4},"end":{"line":331,"column":31}},"112":{"start":{"line":332,"column":4},"end":{"line":332,"column":44}},"113":{"start":{"line":333,"column":4},"end":{"line":333,"column":78}},"114":{"start":{"line":335,"column":3},"end":{"line":335,"column":54}},"115":{"start":{"line":337,"column":2},"end":{"line":337,"column":16}},"116":{"start":{"line":341,"column":2},"end":{"line":344,"column":3}},"117":{"start":{"line":342,"column":3},"end":{"line":342,"column":75}},"118":{"start":{"line":343,"column":3},"end":{"line":343,"column":64}},"119":{"start":{"line":348,"column":2},"end":{"line":351,"column":62}},"120":{"start":{"line":350,"column":3},"end":{"line":351,"column":62}},"121":{"start":{"line":351,"column":4},"end":{"line":351,"column":62}},"122":{"start":{"line":356,"column":0},"end":{"line":356,"column":36}}},"branchMap":{"1":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},{"start":{"line":21,"column":1},"end":{"line":21,"column":1}}]},"2":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},{"start":{"line":25,"column":1},"end":{"line":25,"column":1}}]},"3":{"line":33,"type":"switch","locations":[{"start":{"line":34,"column":1},"end":{"line":34,"column":94}},{"start":{"line":35,"column":1},"end":{"line":35,"column":94}},{"start":{"line":36,"column":1},"end":{"line":36,"column":96}},{"start":{"line":37,"column":1},"end":{"line":37,"column":43}}]},"4":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":3},"end":{"line":60,"column":3}},{"start":{"line":60,"column":3},"end":{"line":60,"column":3}}]},"5":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":2},"end":{"line":129,"column":2}},{"start":{"line":129,"column":2},"end":{"line":129,"column":2}}]},"6":{"line":172,"type":"if","locations":[{"start":{"line":172,"column":29},"end":{"line":172,"column":29}},{"start":{"line":172,"column":29},"end":{"line":172,"column":29}}]},"7":{"line":192,"type":"cond-expr","locations":[{"start":{"line":192,"column":60},"end":{"line":192,"column":93}},{"start":{"line":192,"column":95},"end":{"line":192,"column":120}}]},"8":{"line":194,"type":"if","locations":[{"start":{"line":194,"column":3},"end":{"line":194,"column":3}},{"start":{"line":194,"column":3},"end":{"line":194,"column":3}}]},"9":{"line":198,"type":"if","locations":[{"start":{"line":198,"column":3},"end":{"line":198,"column":3}},{"start":{"line":198,"column":3},"end":{"line":198,"column":3}}]},"10":{"line":199,"type":"if","locations":[{"start":{"line":199,"column":5},"end":{"line":199,"column":5}},{"start":{"line":199,"column":5},"end":{"line":199,"column":5}}]},"11":{"line":216,"type":"cond-expr","locations":[{"start":{"line":216,"column":60},"end":{"line":216,"column":93}},{"start":{"line":216,"column":95},"end":{"line":216,"column":120}}]},"12":{"line":218,"type":"if","locations":[{"start":{"line":218,"column":3},"end":{"line":218,"column":3}},{"start":{"line":218,"column":3},"end":{"line":218,"column":3}}]},"13":{"line":222,"type":"if","locations":[{"start":{"line":222,"column":4},"end":{"line":222,"column":4}},{"start":{"line":222,"column":4},"end":{"line":222,"column":4}}]},"14":{"line":243,"type":"cond-expr","locations":[{"start":{"line":243,"column":68},"end":{"line":243,"column":105}},{"start":{"line":243,"column":107},"end":{"line":243,"column":136}}]},"15":{"line":247,"type":"if","locations":[{"start":{"line":247,"column":3},"end":{"line":247,"column":3}},{"start":{"line":247,"column":3},"end":{"line":247,"column":3}}]},"16":{"line":247,"type":"binary-expr","locations":[{"start":{"line":247,"column":7},"end":{"line":247,"column":21}},{"start":{"line":247,"column":25},"end":{"line":247,"column":49}},{"start":{"line":247,"column":54},"end":{"line":247,"column":81}},{"start":{"line":247,"column":85},"end":{"line":247,"column":131}}]},"17":{"line":251,"type":"if","locations":[{"start":{"line":251,"column":4},"end":{"line":251,"column":4}},{"start":{"line":251,"column":4},"end":{"line":251,"column":4}}]},"18":{"line":265,"type":"if","locations":[{"start":{"line":265,"column":2},"end":{"line":265,"column":2}},{"start":{"line":265,"column":2},"end":{"line":265,"column":2}}]},"19":{"line":289,"type":"if","locations":[{"start":{"line":289,"column":2},"end":{"line":289,"column":2}},{"start":{"line":289,"column":2},"end":{"line":289,"column":2}}]},"20":{"line":289,"type":"binary-expr","locations":[{"start":{"line":289,"column":6},"end":{"line":289,"column":31}},{"start":{"line":289,"column":35},"end":{"line":289,"column":64}}]},"21":{"line":296,"type":"cond-expr","locations":[{"start":{"line":296,"column":22},"end":{"line":299,"column":4}},{"start":{"line":300,"column":3},"end":{"line":300,"column":10}}]},"22":{"line":311,"type":"cond-expr","locations":[{"start":{"line":311,"column":22},"end":{"line":317,"column":4}},{"start":{"line":318,"column":3},"end":{"line":318,"column":20}}]},"23":{"line":329,"type":"if","locations":[{"start":{"line":329,"column":3},"end":{"line":329,"column":3}},{"start":{"line":329,"column":3},"end":{"line":329,"column":3}}]},"24":{"line":348,"type":"if","locations":[{"start":{"line":348,"column":2},"end":{"line":348,"column":2}},{"start":{"line":348,"column":2},"end":{"line":348,"column":2}}]},"25":{"line":350,"type":"if","locations":[{"start":{"line":350,"column":3},"end":{"line":350,"column":3}},{"start":{"line":350,"column":3},"end":{"line":350,"column":3}}]}},"code":["var hash = require(\"../../utils/hash\");","var sprintf = require(\"sprintf\").sprintf;","var _ = require(\"underscore\")._;","var ftrs = require('../../features');","","/**"," * BinarySegmentation - Multi-label text classifier, based on a segmentation scheme using base binary classifiers."," *"," * Inspired by:"," *"," * Morbini Fabrizio, Sagae Kenji. Joint Identification and Segmentation of Domain-Specific Dialogue Acts for Conversational Dialogue Systems. ACL-HLT 2011"," * http://www.citeulike.org/user/erelsegal-halevi/article/10259046"," *"," * @author Erel Segal-haLevi"," * "," * @param opts"," *            binaryClassifierType (mandatory) - the type of the base binary classifier. "," *            featureExtractor (optional) - a single feature-extractor (see the \"features\" folder), or an array of extractors, for extracting features from the text segments during classification."," */","var BinarySegmentation = function(opts) {","\tif (!('binaryClassifierType' in opts)) {","\t\tconsole.dir(opts);","\t\tthrow new Error(\"opts must contain binaryClassifierType\");","\t}","\tif (!opts.binaryClassifierType) {","\t\tconsole.dir(opts);","\t\tthrow new Error(\"opts.binaryClassifierType is null\");","\t}","","\tthis.binaryClassifierType = opts.binaryClassifierType;","\tthis.classifier = new this.binaryClassifierType();","","\tswitch (opts.segmentSplitStrategy) {","\tcase 'shortestSegment': this.segmentSplitStrategy = this.shortestSegmentSplitStrategy; break;","\tcase 'longestSegment':  this.segmentSplitStrategy = this.longestSegmentSplitStrategy;  break;","\tcase 'cheapestSegment':  this.segmentSplitStrategy = this.cheapestSegmentSplitStrategy;  break;","\tdefault: this.segmentSplitStrategy = null;","\t}","\t","\tthis.mapClassnameToClassifier = {};","}","","BinarySegmentation.prototype = {","\t","\t/* Tell the classifier that the given sample belongs to the given classes.","\t * ","\t * @param sample","\t *            a document.","\t * @param classes","\t *            an object whose KEYS are classes, or an array whose VALUES are classes.","\t */","\ttrainOnline: function(sample, classes) {","\t\tsample = this.sampleToFeatures(sample, this.featureExtractors);","\t\tclasses = hash.normalized(classes);","\t\tfor (var positiveClass in classes) {","\t\t\tthis.makeSureClassifierExists(positiveClass);","\t\t\tthis.mapClassnameToClassifier[positiveClass].trainOnline(sample, 1);","\t\t}","\t\tfor (var negativeClass in this.mapClassnameToClassifier) {","\t\t\tif (!classes[negativeClass])","\t\t\t\tthis.mapClassnameToClassifier[negativeClass].trainOnline(sample, 0);","\t\t}","\t},","","\t/**","\t * Train the classifier with all the given documents.","\t * ","\t * @param dataset","\t *            an array with objects of the format: ","\t *            {input: sample1, output: [class11, class12...]}","\t */","\ttrainBatch : function(dataset) {","\t\t// add ['start'] and ['end'] as a try to resolve Append:previous FP","\t\t_.map(dataset, function(num){ ","\t\t\tnum['input'] = \"['start'] \"+ num['input'] + \" ['end']\"","\t\t\treturn num });","","\t\tthis.classifier.trainBatch(dataset)","\t},","","\t/**","\t * Internal function - use the model trained so far to classify a single segment of a sentence.","\t * ","\t * @param segment a part of a text sentence.","\t * @param explain - int - if positive, an \"explanation\" field, with the given length, will be added to the result.","\t *  ","\t * @return an array whose VALUES are classes.","\t */","","","\tclassifySegment: function(segment, explain) {","\t\t\tvar classification = this.classifier.classify(segment, explain, true);","\t\t\t// console.log(classification)","\t\t\t// if (classification.classes.length != 0)","\t\t\t{","\t\t\t\t// HERE","\t\t\t\t// console.log(segment)","\t\t\t\t// console.log(classification['classes'])","\t\t\t\t// console.log(classification['scores'])","\t\t\t\t// console.log(classification['explanation']['positive'])","\t\t\t\t// console.log(classification['explanation']['negative'])","\t\t\t\t// // console.log()","\t\t\t\t// process.exit(0)","\t\t\t\t// console.log(classification['explanation']['negative']['Query'])","\t\t\t\t// console.log(classification['explanation']['negative']['10%'])","\t\t\t}","","","\t\t\t// if ((segment == \"Leased car\")&&('With leased car' in classification['explanation']['negative']))","\t\t\t\t{","\t\t\t\t// console.log(classification['explanation']['negative']['With leased car'])","\t\t\t\t// console.log(\"______________________________________\")","\t\t\t\t// process.exit(0)","","\t\t\t\t}","\t\t\treturn classification","\t},","","\t/**","\t * Internal function - use the model trained so far to classify a single segment of a sentence.","\t * ","\t * @param segment a part of a text sentence.","\t * @param explain - int - if positive, an \"explanation\" field, with the given length, will be added to the result.","\t *  ","\t * @return an array [the_best_class, and_its_probability].","\t */","\tbestClassOfSegment: function(segment, explain) {","\t\tvar classes = this.classifySegment(segment, explain);","\t\tif (classes.classes.length==0) {","\t\t\t// FEATURES","\t\t\treturn ['', 0, ''];","\t\t\t// return ['', 0];","\t\t} else {","\t\t\t// HERE","\t\t\t// console.log([classes.classes[0], classes.scores[classes.classes[0]]])","\t\t\t// FEATURES","\t\t\treturn [classes.classes[0], classes.scores[classes.classes[0]], classes['explanation']['positive']];","\t\t\t// return [classes.classes[0], classes.scores[classes.classes[0]]];","\t\t}","\t},","\t","\t","\t/**","\t * protected function:","\t * Strategy of finding the cheapest segmentation (- most probable segmentation), using a dynamic programming algorithm.","\t * Based on: ","\t * Morbini Fabrizio, Sagae Kenji. Joint Identification and Segmentation of Domain-Specific Dialogue Acts for Conversational Dialogue Systems. ACL-HLT 2011"," \t * http://www.citeulike.org/user/erelsegal-halevi/article/10259046","\t */","\tcheapestSegmentSplitStrategy: function(words, accumulatedClasses, explain, explanations) {","","\t\t//for (var start=0; start<=words.length; ++start) {","\t\t//\tfor (var end=start+1; end<=words.length; ++end) {","\t\t//\t\tvar segment = words.slice(start,end).join(\" \");","","\t\t//\t\tvar bestClassAndProbability = this.bestClassOfSegment(segment, explain);","\t\t//\t\tif (bestClassAndProbability[1] != Infinity)","\t\t//\t\t{","\t\t//\t\t\tvar bestClass = bestClassAndProbability[0];","\t\t//\t\t\tvar bestClassProbability = bestClassAndProbability[1];","\t\t\t//\t\tdigraph.add(start, end, -bestClassProbability);","\t\t//\t\t}","\t\t//\t}","\t\t//}","","\t\tvar cheapest_paths = require(\"graph-paths\").cheapest_paths;","","                var mini = Infinity","                _(words.length).times(function(nn){","                   cheapestSegmentClassificationCosts = cheapest_paths(segmentClassificationCosts, nn);","                       _.each(cheapestSegmentClassificationCosts, function(value, key, list){","                             if (value.cost<mini)","                               {","                                mini = value.cost","\t                            cheapestSentenceClassificationCost = value","                                 }","                         }, this)","                 }, this)","                   ","     cheapestSegmentClassificationCosts = cheapest_paths(segmentClassificationCosts, 0);","     cheapestSentenceClassificationCost = cheapestSegmentClassificationCosts[words.length];","","","        var path = cheapestSentenceClassificationCost.path;","","","\t\tfor (var i=0; i<path.length-1; ++i) {","\t\t\t// var segment = words.slice(cheapestClassificationPath[i],cheapestClassificationPath[i+1]).join(\" \");","\t\t\tvar segment = words.slice(path[i],path[i+1]).join(\" \");","\t\t\t//HERE","\t\t\tvar segmentClassesWithExplain = this.classifySegment(segment, explain);","\t\t\tvar segmentClasses = (segmentClassesWithExplain.classes? segmentClassesWithExplain.classes: segmentClassesWithExplain);","\t\t\t","\t\t\tif (segmentClasses.length>0)","\t\t\t\taccumulatedClasses[segmentClasses[0]] = true;","","\t\t\t// explanations = []","\t\t\tif (explain>0) {","\t\t\t\t\tif (segmentClasses.length>0)","\t\t\t\t\t\texplanations.push([segmentClasses[0], segment, [path[i], path[i+1]],segmentClassesWithExplain['explanation']['positive']])","","\t\t\t};","\t\t\t","\t\t}","\t},","","\t/**","\t * protected function:","\t * Strategy of classifying the shortest segments with a single class.","\t */","\tshortestSegmentSplitStrategy: function(words, accumulatedClasses, explain, explanations) {","\t\tvar currentStart = 0;","\t\tfor (var currentEnd=1; currentEnd<=words.length; ++currentEnd) {","\t\t\tvar segment = words.slice(currentStart,currentEnd).join(\" \");","\t\t\tvar segmentClassesWithExplain = this.classifySegment(segment, explain);","\t\t\tvar segmentClasses = (segmentClassesWithExplain.classes? segmentClassesWithExplain.classes: segmentClassesWithExplain);","","\t\t\tif (segmentClasses.length==1) {","\t\t\t\t// greedy algorithm: found a section with a single class - cut it and go on","\t\t\t\taccumulatedClasses[segmentClasses[0]]=true;","\t\t\t\tcurrentStart = currentEnd;","\t\t\t\tif (explain>0) {","\t\t\t\t\texplanations.push(segment);","\t\t\t\t\texplanations.push(segmentClassesWithExplain.explanation);","\t\t\t\t};","\t\t\t}","\t\t}","\t},","","\t","\t/**","\t * protected function:","\t * Strategy of classifying the longest segments with a single class.","\t */","\tlongestSegmentSplitStrategy: function(words, accumulatedClasses, explain, explanations) {","\t\tvar currentStart = 0;","\t\tvar segment = null;","\t\tvar segmentClassesWithExplain = null;","\t\tvar segmentClasses = null;","\t\tfor (var currentEnd=1; currentEnd<=words.length; ++currentEnd) {","\t\t\tvar nextSegment = words.slice(currentStart,currentEnd).join(\" \");","\t\t\tvar nextSegmentClassesWithExplain = this.classifySegment(nextSegment, explain);","\t\t\tvar nextSegmentClasses = (nextSegmentClassesWithExplain.classes? nextSegmentClassesWithExplain.classes: nextSegmentClassesWithExplain);","\t\t\t//console.log(\"\\t\"+JSON.stringify(nextSegment) +\" -> \"+nextSegmentClasses)","\t\t\tnextSegmentClasses.sort();","","\t\t\tif (segmentClasses && segmentClasses.length==1 && (nextSegmentClasses.length>1 || !_(nextSegmentClasses).isEqual(segmentClasses))) {","\t\t\t\t// greedy algorithm: found a section with a single class - cut it and go on","\t\t\t\taccumulatedClasses[segmentClasses[0]]=true;","\t\t\t\tcurrentStart = currentEnd-1;","\t\t\t\tif (explain>0) {","\t\t\t\t\texplanations.push(segment);","\t\t\t\t\texplanations.push(segmentClassesWithExplain.explanation);","\t\t\t\t};","\t\t\t}","","\t\t\tsegment = nextSegment;","\t\t\tsegmentClassesWithExplain = nextSegmentClassesWithExplain;","\t\t\tsegmentClasses = nextSegmentClasses;","\t\t}","\t\t","\t\t// add the classes of the last section:","\t\tfor (var i in segmentClasses) ","\t\t\taccumulatedClasses[segmentClasses[i]]=true;","\t\tif (explain>0) {","\t\t\texplanations.push(segment);","\t\t\texplanations.push(segmentClassesWithExplain.explanation);","\t\t};","\t\t/*if (words.length>20)  {","\t\t\tconsole.dir(explanations);","\t\t\tprocess.exit(1);","\t\t}*/","\t},","","\t/**","\t * Use the model trained so far to classify a new sample.","\t * ","\t * @param segment a part of a text sentence.","\t * @param explain - int - if positive, an \"explanation\" field, with the given length, will be added to the result.","\t *  ","\t * @return an array whose VALUES are classes.","\t */","\tclassify: function(sentence, explain) {","","\t\t// sentence = \"['start'] \" + sentence + \" ['end']\"","\t\tvar minWordsToSplit = 2;","\t\tvar words = sentence.split(/ /);","\t\t// var words = tokenizer.tokenize(sentence);","\t\tif (this.segmentSplitStrategy && words.length>=minWordsToSplit) {","\t\t\tvar accumulatedClasses = {};","\t\t\tvar explanations = [];","\t\t\tthis.segmentSplitStrategy(words, accumulatedClasses, explain, explanations); ","\t\t\t","\t\t\tvar classes = Object.keys(accumulatedClasses);","","\t\t\treturn (explain>0?\t{","\t\t\t\tclasses: classes, ","\t\t\t\texplanation: explanations","\t\t\t}: ","\t\t\tclasses);","\t\t} else {","\t\t\tclassification = this.bestClassOfSegment(sentence, explain)","\t\t\t// classification = this.classifySegment(sentence, explain);","\t\t\t//HERER","","\t\t\t// console.log(sentence)","\t\t\t// console.log(classification)","\t\t\t// process.exit(0)","\t\t\t// process.exit(0)","","\t\t\treturn (explain>0?\t{","\t\t\t\tclasses: classification[0], ","\t\t\t\t// FEATURES","\t\t\t\texplanation: [[classification[0], sentence, [0,sentence.length-1], classification[2]]]","\t\t\t\t// explanation: [[classification[0], sentence, [0,sentence.length-1]]]","","\t\t\t}: ","\t\t\tclassification[0]);","\t\t\t// return {classes: classification[0],","\t\t\t\t\t// explanation: [[classification[0], sentence, [0,sentence.length-1]]]}","\t\t\t// return {classes: classification.classes[0]}","\t\t}","\t},","","\ttoJSON : function(callback) {","\t\tvar result = {};","\t\tfor ( var aClass in this.mapClassnameToClassifier) {","\t\t\tvar binaryClassifier = this.mapClassnameToClassifier[aClass];","\t\t\tif (!binaryClassifier.toJSON) {","\t\t\t\tconsole.dir(binaryClassifier);","\t\t\t\tconsole.log(\"prototype: \");","\t\t\t\tconsole.dir(binaryClassifier.__proto__);","\t\t\t\tthrow new Error(\"this binary classifier does not have a toJSON function\");","\t\t\t}","\t\t\tresult[aClass] = binaryClassifier.toJSON(callback);","\t\t}","\t\treturn result;","\t},","","\tfromJSON : function(json, callback) {","\t\tfor ( var aClass in json) {","\t\t\tthis.mapClassnameToClassifier[aClass] = new this.binaryClassifierType();","\t\t\tthis.mapClassnameToClassifier[aClass].fromJSON(json[aClass]);","\t\t}","\t},","\t","\tsetFeatureLookupTable: function(featureLookupTable) {","\t\tif (featureLookupTable) ","\t\t\t// this.featureLookupTable = featureLookupTable","\t\t\tif (this.classifier.setFeatureLookupTable)","\t\t\t\tthis.classifier.setFeatureLookupTable(featureLookupTable);  // for generating clearer explanations only","\t\t// }"," \t},","}","","module.exports = BinarySegmentation;",""],"l":{"1":1,"2":1,"3":1,"4":1,"20":1,"21":0,"22":0,"23":0,"25":0,"26":0,"27":0,"30":0,"31":0,"33":0,"34":0,"35":0,"36":0,"37":0,"40":0,"43":1,"53":0,"54":0,"55":0,"56":0,"57":0,"59":0,"60":0,"61":0,"74":0,"75":0,"76":0,"78":0,"92":0,"116":0,"128":0,"129":0,"131":0,"137":0,"166":0,"168":0,"169":0,"170":0,"171":0,"172":0,"174":0,"175":0,"180":0,"181":0,"184":0,"187":0,"189":0,"191":0,"192":0,"194":0,"195":0,"198":0,"199":0,"200":0,"212":0,"213":0,"214":0,"215":0,"216":0,"218":0,"220":0,"221":0,"222":0,"223":0,"224":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"245":0,"247":0,"249":0,"250":0,"251":0,"252":0,"253":0,"257":0,"258":0,"259":0,"263":0,"264":0,"265":0,"266":0,"267":0,"286":0,"287":0,"289":0,"290":0,"291":0,"292":0,"294":0,"296":0,"302":0,"311":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"335":0,"337":0,"341":0,"342":0,"343":0,"348":0,"350":0,"351":0,"356":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/features/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/features/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":20,"loc":{"start":{"line":20,"column":22},"end":{"line":20,"column":57}}},"2":{"name":"(anonymous_2)","line":32,"loc":{"start":{"line":32,"column":27},"end":{"line":32,"column":61}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":14,"column":2}},"2":{"start":{"line":20,"column":0},"end":{"line":24,"column":1}},"3":{"start":{"line":21,"column":1},"end":{"line":21,"column":19}},"4":{"start":{"line":22,"column":1},"end":{"line":22,"column":36}},"5":{"start":{"line":23,"column":1},"end":{"line":23,"column":17}},"6":{"start":{"line":32,"column":0},"end":{"line":38,"column":1}},"7":{"start":{"line":33,"column":1},"end":{"line":37,"column":29}}},"branchMap":{"1":{"line":33,"type":"cond-expr","locations":[{"start":{"line":34,"column":4},"end":{"line":34,"column":27}},{"start":{"line":35,"column":3},"end":{"line":37,"column":27}}]},"2":{"line":35,"type":"cond-expr","locations":[{"start":{"line":36,"column":4},"end":{"line":36,"column":70}},{"start":{"line":37,"column":4},"end":{"line":37,"column":27}}]}},"code":["module.exports = {","\tNGramsFromArray: require(\"./NGramsFromArray\"),","\tNGramsOfWords:  require(\"./NGramsOfWords\"),","\tNGramsOfLetters: require(\"./NGramsOfLetters\"),","","\tHypernyms: require(\"./HypernymExtractor\"),","\tCollectionOfExtractors: require(\"./CollectionOfExtractors\"),","\tFeatureLookupTable: require(\"./FeatureLookupTable\"),","\t","\tLowerCaseNormalizer: require(\"./LowerCaseNormalizer\"),","\tRegexpNormalizer: require(\"./RegexpNormalizer\"),","","\tRegexpSplitter: require(\"./RegexpSplitter\"),","};","","/**"," * Call the given featureExtractor on the given sample, and return the result."," * Used for testing."," */","module.exports.call = function(featureExtractor, sample) {","\tvar features = {};","\tfeatureExtractor(sample, features);","\treturn features;","} ","","/**"," * If the input is a featureExtractor, return it as is."," *"," * If it is an array of featureExtractors, convert it to a CollectionOfExtractors."," *"," */","module.exports.normalize = function(featureExtractorOrArray) {","\treturn (!featureExtractorOrArray? ","\t\t\t\tfeatureExtractorOrArray:","\t\t\tArray.isArray(featureExtractorOrArray)? ","\t\t\t\tnew module.exports.CollectionOfExtractors(featureExtractorOrArray):","\t\t\t\tfeatureExtractorOrArray);\t","}",""],"l":{"1":1,"20":1,"21":0,"22":0,"23":0,"32":1,"33":0}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/features/NGramsFromArray.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/features/NGramsFromArray.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":4,"loc":{"start":{"line":4,"column":17},"end":{"line":4,"column":60}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":19,"column":2}},"2":{"start":{"line":5,"column":4},"end":{"line":8,"column":5}},"3":{"start":{"line":6,"column":5},"end":{"line":6,"column":30}},"4":{"start":{"line":7,"column":5},"end":{"line":7,"column":25}},"5":{"start":{"line":9,"column":4},"end":{"line":14,"column":5}},"6":{"start":{"line":10,"column":5},"end":{"line":10,"column":49}},"7":{"start":{"line":11,"column":5},"end":{"line":11,"column":34}},"8":{"start":{"line":11,"column":14},"end":{"line":11,"column":34}},"9":{"start":{"line":12,"column":5},"end":{"line":12,"column":42}},"10":{"start":{"line":13,"column":5},"end":{"line":13,"column":32}},"11":{"start":{"line":15,"column":4},"end":{"line":18,"column":5}},"12":{"start":{"line":16,"column":5},"end":{"line":16,"column":17}},"13":{"start":{"line":17,"column":5},"end":{"line":17,"column":19}}},"branchMap":{"1":{"line":5,"type":"cond-expr","locations":[{"start":{"line":5,"column":38},"end":{"line":5,"column":39}},{"start":{"line":5,"column":40},"end":{"line":5,"column":41}}]},"2":{"line":11,"type":"if","locations":[{"start":{"line":11,"column":5},"end":{"line":11,"column":5}},{"start":{"line":11,"column":5},"end":{"line":11,"column":5}}]},"3":{"line":15,"type":"cond-expr","locations":[{"start":{"line":15,"column":38},"end":{"line":15,"column":39}},{"start":{"line":15,"column":40},"end":{"line":15,"column":41}}]}},"code":["/**"," * Convert an array of words/tokens to a set of n-grams, for a given n, possibly with a gap:"," */","module.exports = function(numOfWords, gap, grams, features) {","\t\t\t\tfor (var i=0; i<numOfWords-1-(gap?1:0); ++i) {","\t\t\t\t\tgrams.unshift(\"[start]\");","\t\t\t\t\tgrams.push(\"[end]\");","\t\t\t\t}","\t\t\t\tfor (var i=0; i<=grams.length-numOfWords; ++i) {","\t\t\t\t\tsliceOfWords = grams.slice(i, i+numOfWords);","\t\t\t\t\tif (gap) sliceOfWords[1]=\"-\";","\t\t\t\t\tvar feature = sliceOfWords.join(\" \");","\t\t\t\t\tfeatures[feature.trim()]=1;","\t\t\t\t}","\t\t\t\tfor (var i=0; i<numOfWords-1-(gap?1:0); ++i) {","\t\t\t\t\tgrams.pop();","\t\t\t\t\tgrams.shift();","\t\t\t\t}","};",""],"l":{"4":1,"5":0,"6":0,"7":0,"9":0,"10":0,"11":0,"12":0,"13":0,"15":0,"16":0,"17":0}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/features/NGramsOfWords.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/features/NGramsOfWords.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0},"b":{},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":6,"loc":{"start":{"line":6,"column":17},"end":{"line":6,"column":43}}},"2":{"name":"(anonymous_2)","line":7,"loc":{"start":{"line":7,"column":10},"end":{"line":7,"column":37}}},"3":{"name":"(anonymous_3)","line":8,"loc":{"start":{"line":8,"column":51},"end":{"line":8,"column":62}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":51}},"2":{"start":{"line":6,"column":0},"end":{"line":11,"column":2}},"3":{"start":{"line":7,"column":3},"end":{"line":10,"column":4}},"4":{"start":{"line":8,"column":4},"end":{"line":8,"column":76}},"5":{"start":{"line":8,"column":63},"end":{"line":8,"column":73}},"6":{"start":{"line":9,"column":4},"end":{"line":9,"column":54}}},"branchMap":{},"code":["/**"," * NGramExtractor - extracts sequences of words in a text as its features."," */","","var NGramsFromArray = require('./NGramsFromArray');","module.exports = function(numOfWords, gap) {","\t\t\treturn function(sample, features) {","\t\t\t\tvar words = sample.split(/[ \\t,;:.!?]/).filter(function(a){return !!a}); // all non-empty words","\t\t\t\tNGramsFromArray(numOfWords, gap, words, features);","\t\t\t}","};",""],"l":{"5":1,"6":1,"7":0,"8":0,"9":0}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/features/NGramsOfLetters.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/features/NGramsOfLetters.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":17},"end":{"line":16,"column":55}}},"2":{"name":"(anonymous_2)","line":17,"loc":{"start":{"line":17,"column":8},"end":{"line":17,"column":35}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":19}},"2":{"start":{"line":16,"column":0},"end":{"line":26,"column":1}},"3":{"start":{"line":17,"column":1},"end":{"line":25,"column":2}},"4":{"start":{"line":18,"column":2},"end":{"line":18,"column":50}},"5":{"start":{"line":18,"column":22},"end":{"line":18,"column":50}},"6":{"start":{"line":19,"column":2},"end":{"line":20,"column":37}},"7":{"start":{"line":20,"column":3},"end":{"line":20,"column":37}},"8":{"start":{"line":21,"column":2},"end":{"line":24,"column":3}},"9":{"start":{"line":22,"column":3},"end":{"line":22,"column":58}},"10":{"start":{"line":23,"column":3},"end":{"line":23,"column":23}}},"branchMap":{"1":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":2},"end":{"line":18,"column":2}},{"start":{"line":18,"column":2},"end":{"line":18,"column":2}}]}},"code":["/**"," * Extracts substrings of letters of a given size."," */","","var PAD_CHAR = '#';","","/**"," * Add letter n-gram features to the given feature-vector."," *"," * @param numOfLetters - a positive integer."," * @param caseSensitive - boolean. if false, convert all to lower case."," * @param sample - a string."," * @param features an initial hash of features (optional)."," * @return a hash with all the different letter n-grams contained in the given sentence."," */","module.exports = function(numOfLetters, caseSensitive) {","\treturn function(sample, features) {","\t\tif (!caseSensitive) sample=sample.toLowerCase();","\t\tfor (var i=0; i<numOfLetters-1; ++i)","\t\t\tsample = PAD_CHAR+sample+PAD_CHAR;","\t\tfor (var firstLetter=0; firstLetter<sample.length-numOfLetters+1; ++firstLetter) {","\t\t\tvar feature = sample.substr(firstLetter, numOfLetters);","\t\t\tfeatures[feature]=1;","\t\t}","\t}","}","",""],"l":{"5":1,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/features/HypernymExtractor.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/features/HypernymExtractor.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":19,"loc":{"start":{"line":19,"column":17},"end":{"line":19,"column":37}}},"2":{"name":"(anonymous_2)","line":20,"loc":{"start":{"line":20,"column":8},"end":{"line":20,"column":35}}},"3":{"name":"(anonymous_3)","line":21,"loc":{"start":{"line":21,"column":20},"end":{"line":21,"column":39}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":29,"column":1}},"2":{"start":{"line":20,"column":1},"end":{"line":28,"column":2}},"3":{"start":{"line":21,"column":2},"end":{"line":27,"column":5}},"4":{"start":{"line":22,"column":3},"end":{"line":22,"column":22}},"5":{"start":{"line":23,"column":3},"end":{"line":24,"column":56}},"6":{"start":{"line":24,"column":4},"end":{"line":24,"column":56}},"7":{"start":{"line":25,"column":3},"end":{"line":26,"column":51}},"8":{"start":{"line":26,"column":4},"end":{"line":26,"column":51}}},"branchMap":{"1":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":3},"end":{"line":23,"column":3}},{"start":{"line":23,"column":3},"end":{"line":23,"column":3}}]},"2":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":3},"end":{"line":25,"column":3}},{"start":{"line":25,"column":3},"end":{"line":25,"column":3}}]}},"code":["/**"," * HypernymExtractor - extracts hypernyms - words and phrases that are entailed by the given text."," *"," * A hypernym is described by a regular expression, a feature string, and a confidence score."," * For example: if regexp=/no (.*)/ and feature=\"without $1\", then, "," *   if the sample contains \"no car\", the extractor will add the feature \"without car\", with the given confidence score (usually a number from 0 to 1)."," *"," * @author Erel Segal-haLevi"," * @since 2013-07"," */","","/**"," * Adds hypernym features to the given feature-vector."," * "," * @param hypernyms - an array of objects {regexp: /regexp/g, feature: \"feature\", confidence: confidence}"," * @param sample - a string."," * @param features an initial hash of features (optional). The hypernym features will be added to that array."," */","module.exports = function(hypernyms) {","\treturn function(sample, features) {","\t\thypernyms.forEach(function(hypernym) {","\t\t\tvar matches = null;","\t\t\tif (!(hypernym.regexp instanceof RegExp)) ","\t\t\t\thypernym.regexp = new RegExp(hypernym.regexp, \"gi\");","\t\t\tif (hypernym.regexp.test(sample))","\t\t\t\tfeatures[hypernym.feature]=hypernym.confidence;","\t\t});","\t}","}","/*","module.exports = function(hypernyms) {","        return function(sample, features) {","                hypernyms.forEach(function(hypernym) {","                        var matches = null;","                        if (hypernym.regexp instanceof RegExp) {","                                if (!hypernym.regexp.global) {","                                        console.warn(\"hypernym regexp, \"+hypernym.regexp+\", is not global - skipping\");","                                        return;","                                }","                        } else {","                                hypernym.regexp = new RegExp(hypernym.regexp,\"gi\");","                        }","                        while ((matches = hypernym.regexp.exec(sample)) !== null) {","                                var feature = matches[0].replace(hypernym.regexp, hypernym.feature);","                                features[feature]=hypernym.confidence;","                        }","                });","        }","}*/",""],"l":{"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/features/CollectionOfExtractors.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/features/CollectionOfExtractors.js","s":{"1":1,"2":0,"3":0,"4":0},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":11,"loc":{"start":{"line":11,"column":17},"end":{"line":11,"column":38}}},"2":{"name":"(anonymous_2)","line":12,"loc":{"start":{"line":12,"column":8},"end":{"line":12,"column":35}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":16,"column":1}},"2":{"start":{"line":12,"column":1},"end":{"line":15,"column":2}},"3":{"start":{"line":13,"column":2},"end":{"line":14,"column":35}},"4":{"start":{"line":14,"column":3},"end":{"line":14,"column":35}}},"branchMap":{},"code":["/**"," * CollectionOfExtractors - combines the features from several feature extractors. "," */","","/**"," * @param extractors - an array of other feature extractors. "," * @param sample - a string."," * @param features an initial hash of features (optional)."," * @return a hash with all features generated from the sample by the different extractors"," */","module.exports = function(extractors) {","\treturn function(sample, features) {","\t\tfor (var i=0; i<extractors.length; ++i)","\t\t\textractors[i](sample, features);","\t}","}","","","//var async = require('async');","/*","module.exports = function(extractors) {","        return function(sample, features, stopwords, callback){","                async.eachSeries(extractors, function(extractor, callback1){","                extractor(sample, features, stopwords, function(err, result){","                callback1()","            })","        }, function(err){","                callback()","        })","    }","}","*/",""],"l":{"11":1,"12":0,"13":0,"14":0}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/features/FeatureLookupTable.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/features/FeatureLookupTable.js","s":{"1":1,"2":0,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":25},"end":{"line":5,"column":36}}},"2":{"name":"(anonymous_2)","line":13,"loc":{"start":{"line":13,"column":13},"end":{"line":13,"column":31}}},"3":{"name":"(anonymous_3)","line":22,"loc":{"start":{"line":22,"column":14},"end":{"line":22,"column":29}}},"4":{"name":"(anonymous_4)","line":34,"loc":{"start":{"line":34,"column":15},"end":{"line":34,"column":32}}},"5":{"name":"(anonymous_5)","line":42,"loc":{"start":{"line":42,"column":18},"end":{"line":42,"column":36}}},"6":{"name":"(anonymous_6)","line":47,"loc":{"start":{"line":47,"column":18},"end":{"line":47,"column":35}}},"7":{"name":"(anonymous_7)","line":58,"loc":{"start":{"line":58,"column":14},"end":{"line":58,"column":29}}},"8":{"name":"(anonymous_8)","line":80,"loc":{"start":{"line":80,"column":17},"end":{"line":80,"column":34}}},"9":{"name":"(anonymous_9)","line":96,"loc":{"start":{"line":96,"column":14},"end":{"line":96,"column":30}}},"10":{"name":"(anonymous_10)","line":108,"loc":{"start":{"line":108,"column":17},"end":{"line":108,"column":34}}},"11":{"name":"(anonymous_11)","line":116,"loc":{"start":{"line":116,"column":9},"end":{"line":116,"column":20}}},"12":{"name":"(anonymous_12)","line":123,"loc":{"start":{"line":123,"column":11},"end":{"line":123,"column":26}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":8,"column":1}},"2":{"start":{"line":6,"column":1},"end":{"line":6,"column":46}},"3":{"start":{"line":7,"column":1},"end":{"line":7,"column":49}},"4":{"start":{"line":10,"column":0},"end":{"line":127,"column":1}},"5":{"start":{"line":14,"column":2},"end":{"line":18,"column":3}},"6":{"start":{"line":15,"column":3},"end":{"line":15,"column":56}},"7":{"start":{"line":16,"column":3},"end":{"line":16,"column":48}},"8":{"start":{"line":17,"column":3},"end":{"line":17,"column":54}},"9":{"start":{"line":23,"column":2},"end":{"line":30,"column":116}},"10":{"start":{"line":24,"column":3},"end":{"line":25,"column":33}},"11":{"start":{"line":25,"column":4},"end":{"line":25,"column":33}},"12":{"start":{"line":26,"column":9},"end":{"line":30,"column":116}},"13":{"start":{"line":27,"column":3},"end":{"line":28,"column":29}},"14":{"start":{"line":28,"column":4},"end":{"line":28,"column":29}},"15":{"start":{"line":30,"column":7},"end":{"line":30,"column":116}},"16":{"start":{"line":35,"column":2},"end":{"line":36,"column":31}},"17":{"start":{"line":36,"column":3},"end":{"line":36,"column":31}},"18":{"start":{"line":43,"column":2},"end":{"line":43,"column":27}},"19":{"start":{"line":44,"column":2},"end":{"line":44,"column":49}},"20":{"start":{"line":48,"column":2},"end":{"line":48,"column":48}},"21":{"start":{"line":59,"column":2},"end":{"line":59,"column":25}},"22":{"start":{"line":60,"column":2},"end":{"line":60,"column":17}},"23":{"start":{"line":61,"column":2},"end":{"line":62,"column":25}},"24":{"start":{"line":62,"column":3},"end":{"line":62,"column":25}},"25":{"start":{"line":63,"column":2},"end":{"line":70,"column":66}},"26":{"start":{"line":64,"column":3},"end":{"line":65,"column":58}},"27":{"start":{"line":65,"column":4},"end":{"line":65,"column":58}},"28":{"start":{"line":66,"column":9},"end":{"line":70,"column":66}},"29":{"start":{"line":67,"column":3},"end":{"line":68,"column":67}},"30":{"start":{"line":68,"column":4},"end":{"line":68,"column":67}},"31":{"start":{"line":70,"column":7},"end":{"line":70,"column":66}},"32":{"start":{"line":71,"column":2},"end":{"line":71,"column":15}},"33":{"start":{"line":81,"column":2},"end":{"line":81,"column":28}},"34":{"start":{"line":83,"column":2},"end":{"line":83,"column":18}},"35":{"start":{"line":84,"column":2},"end":{"line":88,"column":3}},"36":{"start":{"line":85,"column":3},"end":{"line":85,"column":18}},"37":{"start":{"line":86,"column":3},"end":{"line":87,"column":81}},"38":{"start":{"line":87,"column":4},"end":{"line":87,"column":81}},"39":{"start":{"line":89,"column":2},"end":{"line":89,"column":16}},"40":{"start":{"line":97,"column":2},"end":{"line":97,"column":16}},"41":{"start":{"line":98,"column":2},"end":{"line":101,"column":3}},"42":{"start":{"line":99,"column":3},"end":{"line":100,"column":67}},"43":{"start":{"line":100,"column":4},"end":{"line":100,"column":67}},"44":{"start":{"line":102,"column":2},"end":{"line":102,"column":14}},"45":{"start":{"line":109,"column":2},"end":{"line":109,"column":18}},"46":{"start":{"line":110,"column":2},"end":{"line":111,"column":43}},"47":{"start":{"line":111,"column":3},"end":{"line":111,"column":43}},"48":{"start":{"line":112,"column":2},"end":{"line":112,"column":16}},"49":{"start":{"line":117,"column":2},"end":{"line":120,"column":3}},"50":{"start":{"line":124,"column":2},"end":{"line":124,"column":66}},"51":{"start":{"line":125,"column":2},"end":{"line":125,"column":66}},"52":{"start":{"line":129,"column":0},"end":{"line":129,"column":36}}},"branchMap":{"1":{"line":14,"type":"if","locations":[{"start":{"line":14,"column":2},"end":{"line":14,"column":2}},{"start":{"line":14,"column":2},"end":{"line":14,"column":2}}]},"2":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":2},"end":{"line":23,"column":2}},{"start":{"line":23,"column":2},"end":{"line":23,"column":2}}]},"3":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":9},"end":{"line":26,"column":9}},{"start":{"line":26,"column":9},"end":{"line":26,"column":9}}]},"4":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":2},"end":{"line":63,"column":2}},{"start":{"line":63,"column":2},"end":{"line":63,"column":2}}]},"5":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":9},"end":{"line":66,"column":9}},{"start":{"line":66,"column":9},"end":{"line":66,"column":9}}]},"6":{"line":87,"type":"binary-expr","locations":[{"start":{"line":87,"column":57},"end":{"line":87,"column":75}},{"start":{"line":87,"column":79},"end":{"line":87,"column":80}}]},"7":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":3},"end":{"line":99,"column":3}},{"start":{"line":99,"column":3},"end":{"line":99,"column":3}}]}},"code":["/**"," * FeatureLookupTable - a table for converting features to numbers and vice versa "," */","","var FeatureLookupTable = function() {","\tthis.featureIndexToFeatureName = [undefined];","\tthis.featureNameToFeatureIndex = {undefined: 0};","}","","FeatureLookupTable.prototype = {","\t","\t// add a single feature, if it does not exist","\taddFeature: function(feature) {","\t\tif (!(feature in this.featureNameToFeatureIndex)) {","\t\t\tvar newIndex = this.featureIndexToFeatureName.length;","\t\t\tthis.featureIndexToFeatureName.push(feature);","\t\t\tthis.featureNameToFeatureIndex[feature] = newIndex;","\t\t}","\t},","\t","\t// add all features in the given hash or array","\taddFeatures: function(hash) {","\t\tif (hash instanceof Array) {","\t\t\tfor (var index in hash)","\t\t\t\tthis.addFeature(hash[index]);","\t\t} else if (hash instanceof Object) {","\t\t\tfor (var feature in hash)","\t\t\t\tthis.addFeature(feature);","\t\t} ","\t\telse throw new Error(\"FeatureLookupTable.addFeatures expects a hash or an array, but got: \"+JSON.stringify(hash));","\t},","","\t// add all features in all hashes in the given array","\taddFeaturess: function(hashes) {","\t\tfor (var i=0; i<hashes.length; ++i)","\t\t\tthis.addFeatures(hashes[i]);","\t},","\t","\t/**","\t * Convert the given feature to a numeric index.","\t */","\tfeatureToNumber: function(feature) {","\t\tthis.addFeature(feature);","\t\treturn this.featureNameToFeatureIndex[feature];","\t},","\t","\tnumberToFeature: function(number) {","\t\treturn this.featureIndexToFeatureName[number];","\t},","\t\t","\t/**","\t * Convert the given hash of features to a numeric array, using 0 for padding.","\t * If some features in the hash do not exist - they will be added.","\t * @param hash any hash, for example, {a: 111, b: 222, c: 333}","\t * @return a matching array, based on the current feature table. For example: [0, 111, 222, 0, 333]","\t * @note some code borrowed from Heather Arthur: https://github.com/harthur/brain/blob/master/lib/lookup.js","\t */","\thashToArray: function(hash) {","\t\tthis.addFeatures(hash);","\t\tvar array = [];","\t\tfor (var featureIndex=0; featureIndex<this.featureIndexToFeatureName.length; ++featureIndex)","\t\t\tarray[featureIndex]=0;","\t\tif (hash instanceof Array) {","\t\t\tfor (var i in hash)","\t\t\t\tarray[this.featureNameToFeatureIndex[hash[i]]] = true;","\t\t} else if (hash instanceof Object) {","\t\t\tfor (var feature in hash)","\t\t\t\tarray[this.featureNameToFeatureIndex[feature]] = hash[feature];","\t\t}","\t\telse throw new Error(\"Unsupported type: \"+JSON.stringify(hash));","\t\treturn array;","\t},","\t","\t/**","\t * Convert all the given hashes of features to numeric arrays, using 0 for padding.","\t * If some features in some of the hashes do not exist - they will be added.","\t * @param hashes an array of hashes, for example, [{a: 111, b: 222}, {a: 11, c: 33}, ...] ","\t * @return an array of matching arrays, based on the current feature table. For example: [[111, 222], [11, 0, 33]]","\t */","\thashesToArrays: function(hashes) {","\t\tthis.addFeaturess(hashes);","\t  ","\t\tvar arrays = [];","\t\tfor (var i=0; i<hashes.length; ++i) {","\t\t\tarrays[i] = [];","\t\t\tfor (var feature in this.featureNameToFeatureIndex)","\t\t\t\tarrays[i][this.featureNameToFeatureIndex[feature]] = hashes[i][feature] || 0;","\t\t}","\t\treturn arrays;","\t},","","\t/**","\t * Convert the given numeric array to a hash of features, ignoring zero values.","\t * @note some code borrowed from Heather Arthur: https://github.com/harthur/brain/blob/master/lib/lookup.js","\t */","\tarrayToHash: function(array) {","\t\tvar hash = {};","\t\tfor (var feature in this.featureNameToFeatureIndex) {","\t\t\tif (array[this.featureNameToFeatureIndex[feature]])","\t\t\t\thash[feature] = array[this.featureNameToFeatureIndex[feature]];","\t\t}","\t\treturn hash;","\t},","\t","\t/**","\t * Convert the given numeric arrays to array of hashes of features, ignoring zero values.","\t */","\tarraysToHashes: function(arrays) {","\t\tvar hashes = [];","\t\tfor (var i=0; i<arrays.length; ++i)","\t\t\thashes[i] = this.arrayToHash(arrays[i]);","\t\treturn hashes;","\t},","\t","\t","\ttoJSON: function() {","\t\treturn {","\t\t\tfeatureIndexToFeatureName: this.featureIndexToFeatureName,","\t\t\tfeatureNameToFeatureIndex: this.featureNameToFeatureIndex,","\t\t}","\t},","\t","\tfromJSON: function(json) {","\t\tthis.featureIndexToFeatureName = json.featureIndexToFeatureName;","\t\tthis.featureNameToFeatureIndex = json.featureNameToFeatureIndex;","\t},","}","","module.exports = FeatureLookupTable;",""],"l":{"5":1,"6":0,"7":0,"10":1,"14":0,"15":0,"16":0,"17":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"30":0,"35":0,"36":0,"43":0,"44":0,"48":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"70":0,"71":0,"81":0,"83":0,"84":0,"85":0,"86":0,"87":0,"89":0,"97":0,"98":0,"99":0,"100":0,"102":0,"109":0,"110":0,"111":0,"112":0,"117":0,"124":0,"125":0,"129":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/features/LowerCaseNormalizer.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/features/LowerCaseNormalizer.js","s":{"1":1,"2":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":11,"loc":{"start":{"line":11,"column":17},"end":{"line":11,"column":34}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":13,"column":1}},"2":{"start":{"line":12,"column":1},"end":{"line":12,"column":29}}},"branchMap":{},"code":["/**"," * LowerCaseNormalizer - normalizes sentences by converting them to lower-case."," *"," * @author Erel Segal-haLevi"," * @since 2013-08"," */","","/**"," * Normalizes a sentence by converting it to lower case."," */","module.exports = function(sample) {","\treturn sample.toLowerCase();","}",""],"l":{"11":1,"12":0}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/features/RegexpNormalizer.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/features/RegexpNormalizer.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":17},"end":{"line":16,"column":42}}},"2":{"name":"(anonymous_2)","line":17,"loc":{"start":{"line":17,"column":8},"end":{"line":17,"column":25}}},"3":{"name":"(anonymous_3)","line":18,"loc":{"start":{"line":18,"column":25},"end":{"line":18,"column":49}}}},"statementMap":{"1":{"start":{"line":16,"column":0},"end":{"line":33,"column":1}},"2":{"start":{"line":17,"column":1},"end":{"line":32,"column":2}},"3":{"start":{"line":18,"column":2},"end":{"line":30,"column":5}},"4":{"start":{"line":19,"column":3},"end":{"line":19,"column":22}},"5":{"start":{"line":20,"column":3},"end":{"line":27,"column":4}},"6":{"start":{"line":21,"column":4},"end":{"line":24,"column":5}},"7":{"start":{"line":22,"column":5},"end":{"line":22,"column":94}},"8":{"start":{"line":23,"column":5},"end":{"line":23,"column":12}},"9":{"start":{"line":26,"column":4},"end":{"line":26,"column":65}},"10":{"start":{"line":28,"column":3},"end":{"line":28,"column":71}},"11":{"start":{"line":31,"column":2},"end":{"line":31,"column":16}}},"branchMap":{"1":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":3},"end":{"line":20,"column":3}},{"start":{"line":20,"column":3},"end":{"line":20,"column":3}}]},"2":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":21,"column":4}},{"start":{"line":21,"column":4},"end":{"line":21,"column":4}}]}},"code":["/**"," * RegexpNormalizer - normalizes sentences using a custom regular expression file."," *"," * A normalization rule is described by two regular expressions: 'source' and 'target'."," *"," * @author Erel Segal-haLevi"," * @since 2013-07"," */","","/**"," * normalizes a sentence based on a list of regular expressions."," * @param normalizations - an array of objects {source: /regexp/g, target: \"target\"}"," * @param sample - a string."," * @return a new string, with all normalizations carried out."," */","module.exports = function(normalizations) {","\treturn function(sample) {","\t\tnormalizations.forEach(function(normalization) {","\t\t\tvar matches = null;","\t\t\tif (normalization.source instanceof RegExp) {","\t\t\t\tif (!normalization.source.global) {","\t\t\t\t\tconsole.warn(\"normalization source, \"+normalization.source+\", is not global - skipping\");","\t\t\t\t\treturn;","\t\t\t\t}","\t\t\t} else {","\t\t\t\tnormalization.source = new RegExp(normalization.source,\"gi\");","\t\t\t}","\t\t\tsample = sample.replace(normalization.source, normalization.target);","\t\t\t//console.log(sample);","\t\t});","\t\treturn sample;","\t}","}",""],"l":{"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"26":0,"28":0,"31":0}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/features/RegexpSplitter.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/features/RegexpSplitter.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":17},"end":{"line":15,"column":61}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":8},"end":{"line":19,"column":23}}}},"statementMap":{"1":{"start":{"line":15,"column":0},"end":{"line":37,"column":1}},"2":{"start":{"line":16,"column":1},"end":{"line":16,"column":37}},"3":{"start":{"line":17,"column":1},"end":{"line":17,"column":44}},"4":{"start":{"line":18,"column":1},"end":{"line":18,"column":52}},"5":{"start":{"line":18,"column":27},"end":{"line":18,"column":52}},"6":{"start":{"line":19,"column":1},"end":{"line":36,"column":2}},"7":{"start":{"line":20,"column":2},"end":{"line":20,"column":33}},"8":{"start":{"line":21,"column":2},"end":{"line":21,"column":27}},"9":{"start":{"line":22,"column":2},"end":{"line":32,"column":3}},"10":{"start":{"line":23,"column":3},"end":{"line":23,"column":30}},"11":{"start":{"line":24,"column":3},"end":{"line":24,"column":23}},"12":{"start":{"line":25,"column":3},"end":{"line":29,"column":4}},"13":{"start":{"line":26,"column":4},"end":{"line":26,"column":31}},"14":{"start":{"line":27,"column":4},"end":{"line":28,"column":29}},"15":{"start":{"line":28,"column":5},"end":{"line":28,"column":29}},"16":{"start":{"line":30,"column":3},"end":{"line":31,"column":31}},"17":{"start":{"line":31,"column":4},"end":{"line":31,"column":31}},"18":{"start":{"line":35,"column":2},"end":{"line":35,"column":25}}},"branchMap":{"1":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},{"start":{"line":18,"column":1},"end":{"line":18,"column":1}}]},"2":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":3},"end":{"line":25,"column":3}},{"start":{"line":25,"column":3},"end":{"line":25,"column":3}}]},"3":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":4}},{"start":{"line":27,"column":4},"end":{"line":27,"column":4}}]},"4":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":3},"end":{"line":30,"column":3}},{"start":{"line":30,"column":3},"end":{"line":30,"column":3}}]}},"code":["/**"," * RegexpSplitter - splits sentences using a custom regular expression."," *"," * @author Erel Segal-haLevi"," * @since 2013-08"," */","","/**"," * splits sentences using a custom regular expression."," * @param regexpString - a string"," * @param delimitersToInclude - a hash (set) of delimiters that will be added to the end of the previous sentence."," * @param text - a string."," * @return an array of parts (sentences). "," */","module.exports = function(regexpString, delimitersToInclude) {","\tregexpString = \"(\"+regexpString+\")\";  // to capture the delimiters","\tvar regexp = new RegExp(regexpString, \"i\");","\tif (!delimitersToInclude) delimitersToInclude = {};","\treturn function(text) {","\t\tvar parts = text.split(regexp);","\t\tvar normalizedParts = [];","\t\tfor (var i=0; i<parts.length; i+=2) {","\t\t\tparts[i] = parts[i].trim();","\t\t\tvar part = parts[i];","\t\t\tif (i+1<parts.length) {","\t\t\t\tvar delimiter = parts[i+1];","\t\t\t\tif (delimitersToInclude[delimiter])","\t\t\t\t\tpart += \" \" + delimiter;","\t\t\t}","\t\t\tif (part.length>0)","\t\t\t\tnormalizedParts.push(part);","\t\t}","\t\t//console.log(text);","\t\t//console.dir(normalizedParts);","\t\treturn normalizedParts;","\t}","}",""],"l":{"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"30":0,"31":0,"35":0}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/multilabel/MulticlassSegmentation.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/multilabel/MulticlassSegmentation.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"(anonymous_1)","line":20,"loc":{"start":{"line":20,"column":29},"end":{"line":20,"column":44}}},"2":{"name":"(anonymous_2)","line":41,"loc":{"start":{"line":41,"column":14},"end":{"line":41,"column":40}}},"3":{"name":"(anonymous_3)","line":62,"loc":{"start":{"line":62,"column":14},"end":{"line":62,"column":32}}},"4":{"name":"(anonymous_4)","line":81,"loc":{"start":{"line":81,"column":18},"end":{"line":81,"column":45}}},"5":{"name":"(anonymous_5)","line":90,"loc":{"start":{"line":90,"column":21},"end":{"line":90,"column":39}}},"6":{"name":"(anonymous_6)","line":105,"loc":{"start":{"line":105,"column":31},"end":{"line":105,"column":90}}},"7":{"name":"(anonymous_7)","line":153,"loc":{"start":{"line":153,"column":11},"end":{"line":153,"column":39}}},"8":{"name":"(anonymous_8)","line":172,"loc":{"start":{"line":172,"column":10},"end":{"line":172,"column":21}}},"9":{"name":"(anonymous_9)","line":176,"loc":{"start":{"line":176,"column":12},"end":{"line":176,"column":27}}},"10":{"name":"(anonymous_10)","line":181,"loc":{"start":{"line":181,"column":19},"end":{"line":181,"column":54}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":39}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":45}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":41}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":32}},"5":{"start":{"line":20,"column":0},"end":{"line":29,"column":1}},"6":{"start":{"line":21,"column":1},"end":{"line":24,"column":2}},"7":{"start":{"line":22,"column":2},"end":{"line":22,"column":20}},"8":{"start":{"line":23,"column":2},"end":{"line":23,"column":61}},"9":{"start":{"line":25,"column":1},"end":{"line":25,"column":63}},"10":{"start":{"line":26,"column":1},"end":{"line":26,"column":71}},"11":{"start":{"line":28,"column":1},"end":{"line":28,"column":65}},"12":{"start":{"line":31,"column":0},"end":{"line":193,"column":1}},"13":{"start":{"line":42,"column":2},"end":{"line":42,"column":64}},"14":{"start":{"line":43,"column":2},"end":{"line":43,"column":63}},"15":{"start":{"line":44,"column":2},"end":{"line":44,"column":58}},"16":{"start":{"line":63,"column":2},"end":{"line":68,"column":3}},"17":{"start":{"line":64,"column":3},"end":{"line":67,"column":5}},"18":{"start":{"line":70,"column":2},"end":{"line":70,"column":48}},"19":{"start":{"line":82,"column":2},"end":{"line":82,"column":69}},"20":{"start":{"line":83,"column":2},"end":{"line":83,"column":61}},"21":{"start":{"line":91,"column":2},"end":{"line":91,"column":69}},"22":{"start":{"line":92,"column":2},"end":{"line":92,"column":69}},"23":{"start":{"line":94,"column":2},"end":{"line":94,"column":24}},"24":{"start":{"line":109,"column":2},"end":{"line":109,"column":38}},"25":{"start":{"line":110,"column":2},"end":{"line":120,"column":3}},"26":{"start":{"line":111,"column":3},"end":{"line":111,"column":42}},"27":{"start":{"line":112,"column":3},"end":{"line":113,"column":52}},"28":{"start":{"line":113,"column":4},"end":{"line":113,"column":52}},"29":{"start":{"line":114,"column":3},"end":{"line":114,"column":46}},"30":{"start":{"line":115,"column":3},"end":{"line":119,"column":4}},"31":{"start":{"line":116,"column":4},"end":{"line":116,"column":51}},"32":{"start":{"line":117,"column":4},"end":{"line":117,"column":58}},"33":{"start":{"line":118,"column":4},"end":{"line":118,"column":83}},"34":{"start":{"line":122,"column":2},"end":{"line":122,"column":61}},"35":{"start":{"line":123,"column":2},"end":{"line":123,"column":85}},"36":{"start":{"line":124,"column":2},"end":{"line":124,"column":88}},"37":{"start":{"line":125,"column":2},"end":{"line":126,"column":84}},"38":{"start":{"line":126,"column":3},"end":{"line":126,"column":84}},"39":{"start":{"line":129,"column":2},"end":{"line":129,"column":75}},"40":{"start":{"line":130,"column":2},"end":{"line":130,"column":56}},"41":{"start":{"line":131,"column":2},"end":{"line":142,"column":3}},"42":{"start":{"line":132,"column":3},"end":{"line":132,"column":102}},"43":{"start":{"line":134,"column":3},"end":{"line":134,"column":75}},"44":{"start":{"line":136,"column":3},"end":{"line":136,"column":128}},"45":{"start":{"line":137,"column":3},"end":{"line":137,"column":44}},"46":{"start":{"line":138,"column":3},"end":{"line":141,"column":4}},"47":{"start":{"line":139,"column":4},"end":{"line":139,"column":31}},"48":{"start":{"line":140,"column":4},"end":{"line":140,"column":62}},"49":{"start":{"line":154,"column":2},"end":{"line":154,"column":26}},"50":{"start":{"line":155,"column":2},"end":{"line":155,"column":34}},"51":{"start":{"line":156,"column":2},"end":{"line":169,"column":3}},"52":{"start":{"line":157,"column":3},"end":{"line":157,"column":31}},"53":{"start":{"line":158,"column":3},"end":{"line":158,"column":25}},"54":{"start":{"line":159,"column":3},"end":{"line":159,"column":87}},"55":{"start":{"line":161,"column":3},"end":{"line":161,"column":49}},"56":{"start":{"line":162,"column":3},"end":{"line":166,"column":12}},"57":{"start":{"line":168,"column":3},"end":{"line":168,"column":50}},"58":{"start":{"line":173,"column":2},"end":{"line":173,"column":44}},"59":{"start":{"line":177,"column":2},"end":{"line":177,"column":43}},"60":{"start":{"line":182,"column":2},"end":{"line":182,"column":24}},"61":{"start":{"line":183,"column":2},"end":{"line":190,"column":3}},"62":{"start":{"line":184,"column":3},"end":{"line":189,"column":4}},"63":{"start":{"line":185,"column":4},"end":{"line":185,"column":18}},"64":{"start":{"line":186,"column":4},"end":{"line":186,"column":39}},"65":{"start":{"line":188,"column":4},"end":{"line":188,"column":103}},"66":{"start":{"line":191,"column":2},"end":{"line":191,"column":18}},"67":{"start":{"line":195,"column":0},"end":{"line":195,"column":40}}},"branchMap":{"1":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},{"start":{"line":21,"column":1},"end":{"line":21,"column":1}}]},"2":{"line":43,"type":"cond-expr","locations":[{"start":{"line":43,"column":42},"end":{"line":43,"column":52}},{"start":{"line":43,"column":54},"end":{"line":43,"column":61}}]},"3":{"line":66,"type":"cond-expr","locations":[{"start":{"line":66,"column":47},"end":{"line":66,"column":67}},{"start":{"line":66,"column":69},"end":{"line":66,"column":86}}]},"4":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":2},"end":{"line":125,"column":2}},{"start":{"line":125,"column":2},"end":{"line":125,"column":2}}]},"5":{"line":136,"type":"cond-expr","locations":[{"start":{"line":136,"column":63},"end":{"line":136,"column":98}},{"start":{"line":136,"column":100},"end":{"line":136,"column":126}}]},"6":{"line":138,"type":"if","locations":[{"start":{"line":138,"column":3},"end":{"line":138,"column":3}},{"start":{"line":138,"column":3},"end":{"line":138,"column":3}}]},"7":{"line":156,"type":"if","locations":[{"start":{"line":156,"column":2},"end":{"line":156,"column":2}},{"start":{"line":156,"column":2},"end":{"line":156,"column":2}}]},"8":{"line":162,"type":"cond-expr","locations":[{"start":{"line":162,"column":22},"end":{"line":165,"column":4}},{"start":{"line":166,"column":3},"end":{"line":166,"column":10}}]},"9":{"line":183,"type":"if","locations":[{"start":{"line":183,"column":2},"end":{"line":183,"column":2}},{"start":{"line":183,"column":2},"end":{"line":183,"column":2}}]}},"code":["var hash = require(\"../../utils/hash\");","var FeaturesUnit = require(\"../../features\");","var sprintf = require(\"sprintf\").sprintf;","var _ = require(\"underscore\")._;","","/**"," * MulticlassSegmentation - Multi-label text classifier, based on a segmentation scheme using a base multi-class classifier."," *"," * Inspired by:"," *"," * Morbini Fabrizio, Sagae Kenji. Joint Identification and Segmentation of Domain-Specific Dialogue Acts for Conversational Dialogue Systems. ACL-HLT 2011"," * http://www.citeulike.org/user/erelsegal-halevi/article/10259046"," *"," * @author Erel Segal-haLevi"," * "," * @param opts"," *            binaryClassifierType (mandatory) - the type of the base binary classifier. "," *            featureExtractor (optional) - a single feature-extractor (see the \"features\" folder), or an array of extractors, for extracting features from the text segments during classification."," */","var MulticlassSegmentation = function(opts) {","\tif (!opts.multiclassClassifierType) {","\t\tconsole.dir(opts);","\t\tthrow new Error(\"opts.multiclassClassifierType not found\");","\t}","\tthis.multiclassClassifierType = opts.multiclassClassifierType;","\tthis.featureExtractor = FeaturesUnit.normalize(opts.featureExtractor);","\t","\tthis.multiclassClassifier = new this.multiclassClassifierType();","}","","MulticlassSegmentation.prototype = {","","\t/**","\t * Tell the classifier that the given sample belongs to the given classes.","\t * ","\t * @param sample","\t *            a document.","\t * @param classes","\t *            an object whose KEYS are classes, or an array whose VALUES are classes.","\t */","\ttrainOnline: function(sample, classes) {","\t\tsample = this.sampleToFeatures(sample, this.featureExtractor);","\t\tvar category = (Array.isArray(classes)? classes[0]: classes);","\t\tthis.multiclassClassifier.trainOnline(sample, category);","\t\t/*for (var positiveClass in classes) {","\t\t\tthis.makeSureClassifierExists(positiveClass);","\t\t\tthis.mapClassnameToClassifier[positiveClass].trainOnline(sample, 1);","\t\t}","\t\tfor (var negativeClass in this.mapClassnameToClassifier) {","\t\t\tif (!classes[negativeClass])","\t\t\t\tthis.mapClassnameToClassifier[negativeClass].trainOnline(sample, 0);","\t\t}*/","\t},","","\t/**","\t * Train the classifier with all the given documents.","\t * ","\t * @param dataset","\t *            an array with objects of the format: ","\t *            {input: sample1, output: [class11, class12...]}","\t */","\ttrainBatch : function(dataset) {","\t\tfor ( var i = 0; i < dataset.length; ++i) {","\t\t\tdataset[i] = {","\t\t\t\tinput: this.sampleToFeatures(dataset[i].input, this.featureExtractor),","\t\t\t\toutput: (Array.isArray(dataset[i].output)? dataset[i].output[0]: dataset[i].output)","\t\t\t};","\t\t}","\t\t","\t\tthis.multiclassClassifier.trainBatch(dataset);","\t},","","\t/**","\t * Internal function - use the model trained so far to classify a single segment of a sentence.","\t * ","\t * @param segment a part of a text sentence.","\t * @param explain - int - if positive, an \"explanation\" field, with the given length, will be added to the result.","\t *  ","\t * @return {category: xxx, probability: yyy}","\t */","\tclassifySegment: function(segment, explain) {","\t\tvar sample = this.sampleToFeatures(segment, this.featureExtractor);","\t\treturn this.multiclassClassifier.classify(sample, explain);","\t},","","\t/**","\t * @param segment a part of a text sentence.","\t * @return {category: best_category_of_segment, probability: its_probability}","\t */","\tbestClassOfSegment: function(segment) {","\t\tvar sample = this.sampleToFeatures(segment, this.featureExtractor);","\t\tvar classification = this.multiclassClassifier.classify(sample, 1);","\t\t//console.log(segment+\": \");\tconsole.dir(classification)","\t\treturn classification;","\t},","\t","\t","\t/**","\t * protected function:","\t * Strategy of finding the cheapest segmentation (- most probable segmentation), using a dynamic programming algorithm.","\t * Based on: ","\t * Morbini Fabrizio, Sagae Kenji. Joint Identification and Segmentation of Domain-Specific Dialogue Acts for Conversational Dialogue Systems. ACL-HLT 2011"," \t * http://www.citeulike.org/user/erelsegal-halevi/article/10259046","\t */","\tcheapestSegmentSplitStrategy: function(words, accumulatedClasses, explain, explanations) {","\t\t","\t\t// Calculate the cost of classification of the segment from i to j.","\t\t// (Cost = - log probability).","\t\tvar segmentClassificationCosts = [];  // best cost to classify segment [i,j]","\t\tfor (var start=0; start<=words.length; ++start) {","\t\t\tsegmentClassificationCosts[start] = [];","\t\t\tfor (var end=0; end<start; ++end)","\t\t\t\tsegmentClassificationCosts[start][end]=Infinity;","\t\t\tsegmentClassificationCosts[start][start]=0;","\t\t\tfor (var end=start+1; end<=words.length; ++end) {","\t\t\t\tvar segment = words.slice(start,end).join(\" \");","\t\t\t\tvar classification = this.bestClassOfSegment(segment);","\t\t\t\tsegmentClassificationCosts[start][end] = -Math.log(classification.probability);","\t\t\t}","\t\t}","\t\t//console.log(words+\":  \");\t\tconsole.log(\"segmentClassificationCosts\");\t\tconsole.dir(segmentClassificationCosts);","\t\tvar cheapest_paths = require(\"graph-paths\").cheapest_paths;","\t\tcheapestSegmentClassificationCosts = cheapest_paths(segmentClassificationCosts, 0);","\t\tcheapestSentenceClassificationCost = cheapestSegmentClassificationCosts[words.length];","\t\tif (!cheapestSentenceClassificationCost)","\t\t\tthrow new Error(\"cheapestSegmentClassificationCosts[\"+words.length+\"] is empty\");","\t\t//console.log(\"cheapestSentenceClassificationCost\");\t\tconsole.dir(cheapestSentenceClassificationCost);","\t\t","\t\tvar cheapestClassificationPath = cheapestSentenceClassificationCost.path;","\t\texplanations.push(cheapestSentenceClassificationCost);","\t\tfor (var i=0; i<cheapestClassificationPath.length-1; ++i) {","\t\t\tvar segment = words.slice(cheapestClassificationPath[i],cheapestClassificationPath[i+1]).join(\" \");","\t\t\t//console.log(segment+\":  \");","\t\t\tvar segmentCategoryWithExplain = this.classifySegment(segment, explain);","\t\t\t//console.dir(segmentCategoryWithExplain);","\t\t\tvar segmentCategory = (segmentCategoryWithExplain.category? segmentCategoryWithExplain.category: segmentCategoryWithExplain);","\t\t\taccumulatedClasses[segmentCategory]=true;","\t\t\tif (explain>0) {","\t\t\t\texplanations.push(segment);","\t\t\t\texplanations.push(segmentCategoryWithExplain.explanation);","\t\t\t};","\t\t}","\t},","","\t/**","\t * Use the model trained so far to classify a new sample.","\t * ","\t * @param segment a part of a text sentence.","\t * @param explain - int - if positive, an \"explanation\" field, with the given length, will be added to the result.","\t *  ","\t * @return an array whose VALUES are classes.","\t */","\tclassify: function(sentence, explain) {","\t\tvar minWordsToSplit = 2;","\t\tvar words = sentence.split(/ /);","\t\tif (words.length>=minWordsToSplit) {","\t\t\tvar accumulatedClasses = {};","\t\t\tvar explanations = [];","\t\t\tthis.cheapestSegmentSplitStrategy(words, accumulatedClasses, explain, explanations); ","\t\t\t","\t\t\tvar classes = Object.keys(accumulatedClasses);","\t\t\treturn (explain>0?\t{","\t\t\t\tclasses: classes, ","\t\t\t\texplanation: explanations","\t\t\t}: ","\t\t\tclasses);","\t\t} else {","\t\t\treturn this.classifySegment(sentence, explain);","\t\t}","\t},","","\ttoJSON : function() {","\t\treturn this.multiclassClassifier.toJSON();","\t},","","\tfromJSON : function(json) {","\t\tthis.multiclassClassifier.fromJSON(json);","\t},","\t","\t// private function: ","\tsampleToFeatures: function(sample, featureExtractor) {","\t\tvar features = sample;","\t\tif (featureExtractor) {","\t\t\ttry {","\t\t\t\tfeatures = {};","\t\t\t\tfeatureExtractor(sample, features);","\t\t\t} catch (err) {","\t\t\t\tthrow new Error(\"Cannot extract features from '\"+JSON.stringify(sample)+\"': \"+JSON.stringify(err));","\t\t\t}","\t\t}","\t\treturn features;","\t},","}","","module.exports = MulticlassSegmentation;",""],"l":{"1":1,"2":1,"3":1,"4":1,"20":1,"21":0,"22":0,"23":0,"25":0,"26":0,"28":0,"31":1,"42":0,"43":0,"44":0,"63":0,"64":0,"70":0,"82":0,"83":0,"91":0,"92":0,"94":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"122":0,"123":0,"124":0,"125":0,"126":0,"129":0,"130":0,"131":0,"132":0,"134":0,"136":0,"137":0,"138":0,"139":0,"140":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"161":0,"162":0,"168":0,"173":0,"177":0,"182":0,"183":0,"184":0,"185":0,"186":0,"188":0,"191":0,"195":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/multilabel/Homer.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/multilabel/Homer.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":12},"end":{"line":23,"column":27}}},"2":{"name":"(anonymous_2)","line":31,"loc":{"start":{"line":31,"column":38},"end":{"line":31,"column":59}}},"3":{"name":"(anonymous_3)","line":32,"loc":{"start":{"line":32,"column":38},"end":{"line":32,"column":59}}},"4":{"name":"(anonymous_4)","line":52,"loc":{"start":{"line":52,"column":14},"end":{"line":52,"column":39}}},"5":{"name":"(anonymous_5)","line":69,"loc":{"start":{"line":69,"column":23},"end":{"line":69,"column":63}}},"6":{"name":"(anonymous_6)","line":102,"loc":{"start":{"line":102,"column":14},"end":{"line":102,"column":32}}},"7":{"name":"(anonymous_7)","line":103,"loc":{"start":{"line":103,"column":24},"end":{"line":103,"column":40}}},"8":{"name":"(anonymous_8)","line":121,"loc":{"start":{"line":121,"column":22},"end":{"line":121,"column":50}}},"9":{"name":"(anonymous_9)","line":124,"loc":{"start":{"line":124,"column":18},"end":{"line":124,"column":34}}},"10":{"name":"(anonymous_10)","line":191,"loc":{"start":{"line":191,"column":11},"end":{"line":191,"column":37}}},"11":{"name":"(anonymous_11)","line":207,"loc":{"start":{"line":207,"column":20},"end":{"line":207,"column":63}}},"12":{"name":"(anonymous_12)","line":247,"loc":{"start":{"line":247,"column":9},"end":{"line":247,"column":20}}},"13":{"name":"(anonymous_13)","line":253,"loc":{"start":{"line":253,"column":18},"end":{"line":253,"column":37}}},"14":{"name":"(anonymous_14)","line":264,"loc":{"start":{"line":264,"column":11},"end":{"line":264,"column":26}}},"15":{"name":"(anonymous_15)","line":269,"loc":{"start":{"line":269,"column":20},"end":{"line":269,"column":43}}},"16":{"name":"(anonymous_16)","line":281,"loc":{"start":{"line":281,"column":16},"end":{"line":281,"column":27}}},"17":{"name":"(anonymous_17)","line":288,"loc":{"start":{"line":288,"column":33},"end":{"line":288,"column":72}}},"18":{"name":"(anonymous_18)","line":298,"loc":{"start":{"line":298,"column":24},"end":{"line":298,"column":53}}},"19":{"name":"(anonymous_19)","line":305,"loc":{"start":{"line":305,"column":26},"end":{"line":305,"column":37}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":39}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":41}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":32}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":27}},"5":{"start":{"line":5,"column":0},"end":{"line":5,"column":51}},"6":{"start":{"line":23,"column":0},"end":{"line":40,"column":1}},"7":{"start":{"line":24,"column":1},"end":{"line":24,"column":19}},"8":{"start":{"line":25,"column":1},"end":{"line":28,"column":2}},"9":{"start":{"line":26,"column":2},"end":{"line":26,"column":20}},"10":{"start":{"line":27,"column":2},"end":{"line":27,"column":59}},"11":{"start":{"line":29,"column":1},"end":{"line":29,"column":63}},"12":{"start":{"line":31,"column":1},"end":{"line":31,"column":85}},"13":{"start":{"line":31,"column":60},"end":{"line":31,"column":84}},"14":{"start":{"line":32,"column":1},"end":{"line":32,"column":89}},"15":{"start":{"line":32,"column":60},"end":{"line":32,"column":88}},"16":{"start":{"line":34,"column":1},"end":{"line":37,"column":2}},"17":{"start":{"line":39,"column":1},"end":{"line":39,"column":22}},"18":{"start":{"line":42,"column":0},"end":{"line":311,"column":1}},"19":{"start":{"line":53,"column":2},"end":{"line":53,"column":57}},"20":{"start":{"line":55,"column":2},"end":{"line":56,"column":35}},"21":{"start":{"line":56,"column":3},"end":{"line":56,"column":35}},"22":{"start":{"line":58,"column":2},"end":{"line":61,"column":15}},"23":{"start":{"line":70,"column":2},"end":{"line":70,"column":23}},"24":{"start":{"line":71,"column":2},"end":{"line":71,"column":31}},"25":{"start":{"line":72,"column":2},"end":{"line":81,"column":3}},"26":{"start":{"line":73,"column":3},"end":{"line":73,"column":35}},"27":{"start":{"line":74,"column":3},"end":{"line":74,"column":34}},"28":{"start":{"line":75,"column":3},"end":{"line":75,"column":34}},"29":{"start":{"line":76,"column":3},"end":{"line":80,"column":4}},"30":{"start":{"line":77,"column":4},"end":{"line":78,"column":42}},"31":{"start":{"line":78,"column":5},"end":{"line":78,"column":42}},"32":{"start":{"line":79,"column":4},"end":{"line":79,"column":62}},"33":{"start":{"line":83,"column":2},"end":{"line":83,"column":78}},"34":{"start":{"line":84,"column":2},"end":{"line":92,"column":3}},"35":{"start":{"line":85,"column":3},"end":{"line":90,"column":4}},"36":{"start":{"line":86,"column":4},"end":{"line":89,"column":5}},"37":{"start":{"line":91,"column":3},"end":{"line":91,"column":114}},"38":{"start":{"line":103,"column":2},"end":{"line":111,"column":11}},"39":{"start":{"line":104,"column":3},"end":{"line":104,"column":78}},"40":{"start":{"line":105,"column":3},"end":{"line":106,"column":46}},"41":{"start":{"line":106,"column":4},"end":{"line":106,"column":46}},"42":{"start":{"line":107,"column":3},"end":{"line":110,"column":4}},"43":{"start":{"line":115,"column":2},"end":{"line":115,"column":54}},"44":{"start":{"line":122,"column":2},"end":{"line":122,"column":30}},"45":{"start":{"line":123,"column":2},"end":{"line":123,"column":38}},"46":{"start":{"line":124,"column":2},"end":{"line":161,"column":11}},"47":{"start":{"line":125,"column":3},"end":{"line":125,"column":34}},"48":{"start":{"line":126,"column":3},"end":{"line":126,"column":24}},"49":{"start":{"line":127,"column":3},"end":{"line":127,"column":32}},"50":{"start":{"line":128,"column":3},"end":{"line":137,"column":4}},"51":{"start":{"line":129,"column":4},"end":{"line":129,"column":36}},"52":{"start":{"line":130,"column":4},"end":{"line":130,"column":35}},"53":{"start":{"line":131,"column":4},"end":{"line":131,"column":35}},"54":{"start":{"line":132,"column":4},"end":{"line":136,"column":5}},"55":{"start":{"line":133,"column":5},"end":{"line":134,"column":43}},"56":{"start":{"line":134,"column":6},"end":{"line":134,"column":43}},"57":{"start":{"line":135,"column":5},"end":{"line":135,"column":63}},"58":{"start":{"line":148,"column":3},"end":{"line":151,"column":6}},"59":{"start":{"line":153,"column":3},"end":{"line":160,"column":4}},"60":{"start":{"line":154,"column":4},"end":{"line":155,"column":49}},"61":{"start":{"line":155,"column":5},"end":{"line":155,"column":49}},"62":{"start":{"line":156,"column":4},"end":{"line":159,"column":7}},"63":{"start":{"line":168,"column":2},"end":{"line":168,"column":63}},"64":{"start":{"line":170,"column":2},"end":{"line":180,"column":3}},"65":{"start":{"line":171,"column":3},"end":{"line":176,"column":4}},"66":{"start":{"line":172,"column":4},"end":{"line":175,"column":5}},"67":{"start":{"line":179,"column":5},"end":{"line":179,"column":114}},"68":{"start":{"line":192,"column":2},"end":{"line":192,"column":71}},"69":{"start":{"line":194,"column":2},"end":{"line":198,"column":3}},"70":{"start":{"line":195,"column":3},"end":{"line":195,"column":65}},"71":{"start":{"line":197,"column":3},"end":{"line":197,"column":49}},"72":{"start":{"line":199,"column":2},"end":{"line":199,"column":21}},"73":{"start":{"line":208,"column":2},"end":{"line":208,"column":24}},"74":{"start":{"line":208,"column":14},"end":{"line":208,"column":24}},"75":{"start":{"line":210,"column":2},"end":{"line":210,"column":87}},"76":{"start":{"line":211,"column":2},"end":{"line":211,"column":88}},"77":{"start":{"line":213,"column":2},"end":{"line":213,"column":23}},"78":{"start":{"line":214,"column":2},"end":{"line":216,"column":3}},"79":{"start":{"line":215,"column":3},"end":{"line":215,"column":92}},"80":{"start":{"line":219,"column":2},"end":{"line":240,"column":3}},"81":{"start":{"line":220,"column":3},"end":{"line":220,"column":35}},"82":{"start":{"line":221,"column":3},"end":{"line":221,"column":33}},"83":{"start":{"line":224,"column":3},"end":{"line":224,"column":59}},"84":{"start":{"line":226,"column":3},"end":{"line":239,"column":4}},"85":{"start":{"line":229,"column":4},"end":{"line":229,"column":91}},"86":{"start":{"line":231,"column":4},"end":{"line":231,"column":93}},"87":{"start":{"line":233,"column":4},"end":{"line":234,"column":58}},"88":{"start":{"line":234,"column":5},"end":{"line":234,"column":58}},"89":{"start":{"line":235,"column":4},"end":{"line":236,"column":77}},"90":{"start":{"line":236,"column":5},"end":{"line":236,"column":77}},"91":{"start":{"line":238,"column":4},"end":{"line":238,"column":33}},"92":{"start":{"line":241,"column":2},"end":{"line":243,"column":17}},"93":{"start":{"line":248,"column":2},"end":{"line":248,"column":45}},"94":{"start":{"line":249,"column":2},"end":{"line":249,"column":36}},"95":{"start":{"line":250,"column":2},"end":{"line":250,"column":14}},"96":{"start":{"line":254,"column":2},"end":{"line":257,"column":4}},"97":{"start":{"line":258,"column":2},"end":{"line":260,"column":3}},"98":{"start":{"line":259,"column":3},"end":{"line":259,"column":117}},"99":{"start":{"line":261,"column":2},"end":{"line":261,"column":22}},"100":{"start":{"line":265,"column":2},"end":{"line":265,"column":36}},"101":{"start":{"line":266,"column":2},"end":{"line":266,"column":43}},"102":{"start":{"line":270,"column":2},"end":{"line":272,"column":4}},"103":{"start":{"line":273,"column":2},"end":{"line":273,"column":66}},"104":{"start":{"line":274,"column":2},"end":{"line":274,"column":76}},"105":{"start":{"line":275,"column":2},"end":{"line":277,"column":75}},"106":{"start":{"line":276,"column":3},"end":{"line":277,"column":75}},"107":{"start":{"line":278,"column":2},"end":{"line":278,"column":18}},"108":{"start":{"line":282,"column":2},"end":{"line":282,"column":38}},"109":{"start":{"line":289,"column":2},"end":{"line":290,"column":75}},"110":{"start":{"line":290,"column":3},"end":{"line":290,"column":75}},"111":{"start":{"line":291,"column":2},"end":{"line":292,"column":103}},"112":{"start":{"line":292,"column":3},"end":{"line":292,"column":103}},"113":{"start":{"line":300,"column":2},"end":{"line":300,"column":47}},"114":{"start":{"line":301,"column":2},"end":{"line":301,"column":69}},"115":{"start":{"line":306,"column":2},"end":{"line":306,"column":55}},"116":{"start":{"line":307,"column":2},"end":{"line":308,"column":61}},"117":{"start":{"line":308,"column":3},"end":{"line":308,"column":61}},"118":{"start":{"line":309,"column":2},"end":{"line":309,"column":20}},"119":{"start":{"line":318,"column":0},"end":{"line":318,"column":23}}},"branchMap":{"1":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":8},"end":{"line":24,"column":12}},{"start":{"line":24,"column":16},"end":{"line":24,"column":18}}]},"2":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},{"start":{"line":25,"column":1},"end":{"line":25,"column":1}}]},"3":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":19},"end":{"line":31,"column":34}},{"start":{"line":31,"column":38},"end":{"line":31,"column":85}}]},"4":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":19},"end":{"line":32,"column":33}},{"start":{"line":32,"column":38},"end":{"line":32,"column":89}}]},"5":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":3},"end":{"line":76,"column":3}},{"start":{"line":76,"column":3},"end":{"line":76,"column":3}}]},"6":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":4},"end":{"line":77,"column":4}},{"start":{"line":77,"column":4},"end":{"line":77,"column":4}}]},"7":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":3},"end":{"line":85,"column":3}},{"start":{"line":85,"column":3},"end":{"line":85,"column":3}}]},"8":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":4},"end":{"line":132,"column":4}},{"start":{"line":132,"column":4},"end":{"line":132,"column":4}}]},"9":{"line":133,"type":"if","locations":[{"start":{"line":133,"column":5},"end":{"line":133,"column":5}},{"start":{"line":133,"column":5},"end":{"line":133,"column":5}}]},"10":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":4},"end":{"line":154,"column":4}},{"start":{"line":154,"column":4},"end":{"line":154,"column":4}}]},"11":{"line":171,"type":"if","locations":[{"start":{"line":171,"column":3},"end":{"line":171,"column":3}},{"start":{"line":171,"column":3},"end":{"line":171,"column":3}}]},"12":{"line":194,"type":"if","locations":[{"start":{"line":194,"column":2},"end":{"line":194,"column":2}},{"start":{"line":194,"column":2},"end":{"line":194,"column":2}}]},"13":{"line":208,"type":"if","locations":[{"start":{"line":208,"column":2},"end":{"line":208,"column":2}},{"start":{"line":208,"column":2},"end":{"line":208,"column":2}}]},"14":{"line":211,"type":"cond-expr","locations":[{"start":{"line":211,"column":32},"end":{"line":211,"column":62}},{"start":{"line":211,"column":64},"end":{"line":211,"column":86}}]},"15":{"line":214,"type":"if","locations":[{"start":{"line":214,"column":2},"end":{"line":214,"column":2}},{"start":{"line":214,"column":2},"end":{"line":214,"column":2}}]},"16":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":3},"end":{"line":226,"column":3}},{"start":{"line":226,"column":3},"end":{"line":226,"column":3}}]},"17":{"line":231,"type":"cond-expr","locations":[{"start":{"line":231,"column":35},"end":{"line":231,"column":66}},{"start":{"line":231,"column":68},"end":{"line":231,"column":91}}]},"18":{"line":235,"type":"if","locations":[{"start":{"line":235,"column":4},"end":{"line":235,"column":4}},{"start":{"line":235,"column":4},"end":{"line":235,"column":4}}]},"19":{"line":241,"type":"cond-expr","locations":[{"start":{"line":242,"column":4},"end":{"line":242,"column":53}},{"start":{"line":243,"column":4},"end":{"line":243,"column":15}}]},"20":{"line":289,"type":"if","locations":[{"start":{"line":289,"column":2},"end":{"line":289,"column":2}},{"start":{"line":289,"column":2},"end":{"line":289,"column":2}}]},"21":{"line":289,"type":"binary-expr","locations":[{"start":{"line":289,"column":6},"end":{"line":289,"column":35}},{"start":{"line":289,"column":39},"end":{"line":289,"column":90}}]},"22":{"line":307,"type":"if","locations":[{"start":{"line":307,"column":2},"end":{"line":307,"column":2}},{"start":{"line":307,"column":2},"end":{"line":307,"column":2}}]},"23":{"line":307,"type":"binary-expr","locations":[{"start":{"line":307,"column":6},"end":{"line":307,"column":29}},{"start":{"line":307,"column":33},"end":{"line":307,"column":65}}]}},"code":["var hash = require(\"../../utils/hash\");","var sprintf = require(\"sprintf\").sprintf;","var _ = require(\"underscore\")._;","var util = require('util');","var multilabelutils = require('./multilabelutils');","","","/**"," * HOMER - Hierarchy Of Multilabel classifiERs. See:"," * "," * Tsoumakas Grigorios, Katakis Ioannis, Vlahavas Ioannis. Effective and Efficient Multilabel Classification in Domains with Large Number of Labels in Proc. ECML/PKDD 2008 Workshop on Mining Multidimensional Data (MMD'08):XX 2008."," * http://www.citeulike.org/user/erelsegal-halevi/tag/homer"," * "," * @param opts"," *            multilabelClassifierType (mandatory) - the type of the multilabel classifier used in each level of the hierarchy."," *            splitLabel (optional) - a function that splits a label to a array of sub-labels, from root to leaves. DEFAULT: split around the \"@\" char. "," *            joinLabel (optional) - a function that joins an array of sub-labels, from root to leaves, to create a full label. DEFAULT: join with the \"@\" char."," *  "," * @note The original HOMER paper used a clustering algorithm to create a hierarchy of labels."," * This clustering algorithm is not implemented here."," * Instead, we use a custom function that converts a label to a path in the hierarchy, and another custom function that converts a path back to a label."," */","var Homer = function(opts) {","\topts = opts || {};","\tif (!opts.multilabelClassifierType) {","\t\tconsole.dir(opts);","\t\tthrow new Error(\"opts.multilabelClassifierType is null\");","\t}","\tthis.multilabelClassifierType = opts.multilabelClassifierType;","\t","\tthis.splitLabel = opts.splitLabel || function(label)      {return label.split(/@/);}","\tthis.joinLabel  = opts.joinLabel  || function(superlabel) {return superlabel.join(\"@\");}","\t","\tthis.root = {","\t\tsuperlabelClassifier: this.newMultilabelClassifier(),","\t\tmapSuperlabelToBranch: {}","\t}","\t","\tthis.allClasses = {};","}","","Homer.prototype = {","","\t/**","\t * Tell the classifier that the given sample belongs to the given classes.","\t * ","\t * @param sample","\t *            a document.","\t * @param classes","\t *            an object whose KEYS are classes, or an array whose VALUES are classes.","\t */","\ttrainOnline: function(sample, labels) {","\t\tlabels = multilabelutils.normalizeOutputLabels(labels);","\t\t","\t\tfor (var i in labels)","\t\t\tthis.allClasses[labels[i]]=true;","\t\t","\t\treturn this.trainOnlineRecursive(","\t\t\t\tsample, ","\t\t\t\tlabels.map(this.splitLabel), ","\t\t\t\tthis.root);","\t},","","\t","\t/**","\t *  Recursive internal subroutine of trainOnline.","\t *  @param splitLabels an array of arrays: each internal array represents the parts of a single label.","\t */","\ttrainOnlineRecursive: function(sample, splitLabels, treeNode) {","\t\tvar superlabels = {}; // the first parts of each of the splitLabels","\t\tvar mapSuperlabelToRest = {};   // each value is a list of continuations of the key. ","\t\tfor (var i in splitLabels) {","\t\t\tvar splitLabel = splitLabels[i];","\t\t\tvar superlabel = splitLabel[0];","\t\t\tsuperlabels[superlabel] = true;","\t\t\tif (splitLabel.length>1) {","\t\t\t\tif (!mapSuperlabelToRest[superlabel]) ","\t\t\t\t\tmapSuperlabelToRest[superlabel] = [];","\t\t\t\tmapSuperlabelToRest[superlabel].push(splitLabel.slice(1));","\t\t\t}","\t\t}","","\t\ttreeNode.superlabelClassifier.trainOnline(sample, Object.keys(superlabels));","\t\tfor (var superlabel in mapSuperlabelToRest) {","\t\t\tif (!(superlabel in treeNode.mapSuperlabelToBranch)) {","\t\t\t\ttreeNode.mapSuperlabelToBranch[superlabel] = {","\t\t\t\t\tsuperlabelClassifier: this.newMultilabelClassifier(),","\t\t\t\t\tmapSuperlabelToBranch: {}","\t\t\t\t}","\t\t\t}","\t\t\tthis.trainOnlineRecursive(sample, mapSuperlabelToRest[superlabel], treeNode.mapSuperlabelToBranch[superlabel]);","\t\t}","\t},","\t","\t/**","\t * Train the classifier with all the given documents.","\t * ","\t * @param dataset","\t *            an array with objects of the format: ","\t *            {input: sample1, output: [class11, class12...]}","\t */","\ttrainBatch : function(dataset) {","\t\tdataset = dataset.map(function(datum) {","\t\t\tvar normalizedLabels = multilabelutils.normalizeOutputLabels(datum.output);","\t\t\tfor (var i in normalizedLabels)","\t\t\t\tthis.allClasses[normalizedLabels[i]]=true;","\t\t\treturn {","\t\t\t\tinput: datum.input,","\t\t\t\toutput: normalizedLabels.map(this.splitLabel)","\t\t\t}","\t\t}, this);","\t\t","\t\t// [ [ 'Offer', 'Leased Car', 'Without leased car' ], [ 'Offer', 'Working Hours', '9 hours' ] ]","\t\t","\t\treturn this.trainBatchRecursive(dataset, this.root);","\t},","\t","\t/**","\t *  Recursive internal subroutine of trainBatch.","\t */","\ttrainBatchRecursive: function(dataset, treeNode) {","\t\tvar superlabelsDataset = [];","\t\tvar mapSuperlabelToRestDataset = {};","\t\tdataset.forEach(function(datum) { ","\t\t\tvar splitLabels = datum.output;\t// [ [ 'Offer', 'Leased Car', 'Without leased car' ], [ 'Offer', 'Working Hours', '9 hours' ] ]","\t\t\tvar superlabels = {};           // the first parts of each of the splitLabels","\t\t\tvar mapSuperlabelToRest = {};   // each value is a list of continuations of the key. ","\t\t\tfor (var i in splitLabels) { ","\t\t\t\tvar splitLabel = splitLabels[i];//[ 'Offer', 'Leased Car', 'Without leased car' ]","\t\t\t\tvar superlabel = splitLabel[0];","\t\t\t\tsuperlabels[superlabel] = true; //superlabels['Offer'] = true","\t\t\t\tif (splitLabel.length>1) { \t\t// if it have more than one label (superlabel)","\t\t\t\t\tif (!mapSuperlabelToRest[superlabel]) ","\t\t\t\t\t\tmapSuperlabelToRest[superlabel] = [];","\t\t\t\t\tmapSuperlabelToRest[superlabel].push(splitLabel.slice(1));//['Leased Car', 'Without leased car']","\t\t\t\t}","\t\t\t}","","/*\t\t\tSample of mapSuperlabelToRest","\t\t\t{ Offer: ","\t\t\t[ [ 'Leased Car', 'Without leased car' ],","   \t\t\t  [ 'Working Hours', '9 hours' ] ] }","","\t\t\tSample of superlabelsDataset, initial dataset with superlabel instead of entire output","\t\t\t'. [end]': 0.965080896043587 },","\t\t\toutput: [ 'Offer' ] } ]","*/","\t\t\tsuperlabelsDataset.push({","\t\t\t\tinput: datum.input,","\t\t\t\toutput: Object.keys(superlabels)","\t\t\t});\t\t","","\t\t\tfor (var superlabel in mapSuperlabelToRest) {","\t\t\t\tif (!(superlabel in mapSuperlabelToRestDataset)) ","\t\t\t\t\tmapSuperlabelToRestDataset[superlabel] = [];","\t\t\t\tmapSuperlabelToRestDataset[superlabel].push({","\t\t\t\t\tinput: datum.input,","\t\t\t\t\toutput: mapSuperlabelToRest[superlabel]","\t\t\t\t});","\t\t\t}","\t\t}, this);","\t\t","/*\t\tSample of mapSuperlabelToRestDataset","\t\t{ Offer: [ { input: [Object], output: [[\"Leased Car\",\"Without leased car\"],[\"Working Hours\",\"9 hours\"]] } ] }","*/","","\t\t// train the classifier only on superlabels","\t\ttreeNode.superlabelClassifier.trainBatch(superlabelsDataset);","","\t\tfor (var superlabel in mapSuperlabelToRestDataset) {","\t\t\tif (!(superlabel in treeNode.mapSuperlabelToBranch)) {","\t\t\t\ttreeNode.mapSuperlabelToBranch[superlabel] = {","\t\t\t\t\tsuperlabelClassifier: this.newMultilabelClassifier(),","\t\t\t\t\tmapSuperlabelToBranch: {}","\t\t\t\t}","\t\t\t}","/*\t\t\ttrain the next level classifier for a give superlabel classifier superlabel (from loop)","\t\t\twith the dataset from new structure mapSuperlabelToRestDataset (see above)","*/\t\t\tthis.trainBatchRecursive(mapSuperlabelToRestDataset[superlabel], treeNode.mapSuperlabelToBranch[superlabel]);","\t\t}","\t},","","\t/**","\t * Use the model trained so far to classify a new sample.","\t * ","\t * @param sample a document.","\t * @param explain - int - if positive, an \"explanation\" field, with the given length, will be added to the result.","\t *  ","\t * @return an array whose VALUES are classes.","\t */","\tclassify: function(sample, explain) {","\t\tvar splitLabels = this.classifyRecursive(sample, explain, this.root);","\t\t//console.log(\"splitLabels:\"+JSON.stringify(splitLabels));","\t\tif (explain>0) {","\t\t\tsplitLabels.classes = splitLabels.classes.map(this.joinLabel);","\t\t} else {","\t\t\tsplitLabels = splitLabels.map(this.joinLabel);","\t\t}","\t\treturn splitLabels;","\t},","\t","\t","\t/**","\t *  Recursive internal subroutine of classify.","\t *  @return an array of arrays, where each internal array represents a split label.","\t */","\tclassifyRecursive: function(sample, explain, treeNode, depth) {","\t\tif (!depth) depth = 1;","\t\t// classify the superlabel ","\t\tvar superlabelsWithExplain = treeNode.superlabelClassifier.classify(sample, explain);","\t\tvar superlabels = (explain>0? superlabelsWithExplain.classes: superlabelsWithExplain);","\t\t","\t\tvar splitLabels = [];","\t\tif (explain>0) {","\t\t\tvar explanations = [\"depth=\"+depth+\": \"+superlabels, superlabelsWithExplain.explanation];","\t\t}","","\t\t// for all superlabels that were classified, may be there are more than one that were classified with it","\t\tfor (var i in superlabels) {","\t\t\tvar superlabel = superlabels[i];","\t\t\tvar splitLabel = [superlabel];","\t\t\t","\t\t\t// classifier of [Offer] types / second level / classifies Offer's parameters","\t\t\tvar branch = treeNode.mapSuperlabelToBranch[superlabel];","\t\t\t","\t\t\tif (branch) {","\t\t\t\t","\t\t\t\t// [ [ 'Without leased car' ] ]","\t\t\t\tvar branchLabelsWithExplain = this.classifyRecursive(sample, explain, branch, depth+1);","\t\t\t\t","\t\t\t\tvar branchLabels = (explain>0? branchLabelsWithExplain.classes: branchLabelsWithExplain);","\t\t\t\t\t","\t\t\t\tfor (var j in branchLabels)","\t\t\t\t\tsplitLabels.push(splitLabel.concat(branchLabels[j]));","\t\t\t\tif (explain>0) ","\t\t\t\t\texplanations = explanations.concat(branchLabelsWithExplain.explanation);","\t\t\t} else {","\t\t\t\tsplitLabels.push(splitLabel);","\t\t\t}","\t\t}","\t\treturn (explain>0? ","\t\t\t\t{classes: splitLabels, explanation: explanations}:","\t\t\t\tsplitLabels);","\t},","","","\ttoJSON: function() {","\t\tvar json = this.toJSONRecursive(this.root);","\t\tjson.allClasses = this.allClasses;","\t\treturn json;","\t},","\t","\ttoJSONRecursive: function(treeNode) {","\t\tvar treeNodeJson = { ","\t\t\tsuperlabelClassifier: treeNode.superlabelClassifier.toJSON(),","\t\t\tmapSuperlabelToBranch: {}","\t\t};","\t\tfor (var superlabel in treeNode.mapSuperlabelToBranch) {","\t\t\ttreeNodeJson.mapSuperlabelToBranch[superlabel] = this.toJSONRecursive(treeNode.mapSuperlabelToBranch[superlabel]);","\t\t}","\t\treturn treeNodeJson;","\t},","","\tfromJSON: function(json) {","\t\tthis.allClasses = json.allClasses;","\t\tthis.root = this.fromJSONRecursive(json);","\t},","\t","\tfromJSONRecursive: function(treeNodeJson) {","\t\tvar treeNode = {","\t\t\tmapSuperlabelToBranch: {}","\t\t}; ","\t\ttreeNode.superlabelClassifier =  this.newMultilabelClassifier();","\t\ttreeNode.superlabelClassifier.fromJSON(treeNodeJson.superlabelClassifier);","\t\tfor (var superlabel in treeNodeJson.mapSuperlabelToBranch) ","\t\t\ttreeNode.mapSuperlabelToBranch[superlabel] = ","\t\t\t\tthis.fromJSONRecursive(treeNodeJson.mapSuperlabelToBranch[superlabel]);","\t\treturn treeNode;","\t},","","\tgetAllClasses: function() {","\t\treturn Object.keys(this.allClasses);","\t},","\t","\t/**","\t * Link to a FeatureLookupTable from a higher level in the hierarchy (typically from an EnhancedClassifier), used ONLY for generating meaningful explanations. ","\t */","\tsetFeatureLookupTableRecursive: function(featureLookupTable, treeNode) {","\t\tif (treeNode.superlabelClassifier && treeNode.superlabelClassifier.setFeatureLookupTable)","\t\t\ttreeNode.superlabelClassifier.setFeatureLookupTable(featureLookupTable);","\t\tfor (var superlabel in treeNode.mapSuperlabelToBranch)","\t\t\tthis.setFeatureLookupTableRecursive(featureLookupTable, treeNode.mapSuperlabelToBranch[superlabel]);","\t},","\t","\t/**","\t * Link to a FeatureLookupTable from a higher level in the hierarchy (typically from an EnhancedClassifier), used ONLY for generating meaningful explanations. ","\t */","\tsetFeatureLookupTable: function(featureLookupTable) {","\t\t//console.log(\"HOMER setFeatureLookupTable \"+featureLookupTable);","\t\tthis.featureLookupTable = featureLookupTable;","\t\tthis.setFeatureLookupTableRecursive(featureLookupTable, this.root);","\t},","\t","\t","\tnewMultilabelClassifier: function() {","\t\tvar classifier = new this.multilabelClassifierType();","\t\tif (this.featureLookupTable && classifier.setFeatureLookupTable)","\t\t\tclassifier.setFeatureLookupTable(this.featureLookupTable);","\t\treturn classifier;","\t}","}","","","/*"," * UTILS"," */","","module.exports = Homer;"],"l":{"1":1,"2":1,"3":1,"4":1,"5":1,"23":1,"24":0,"25":0,"26":0,"27":0,"29":0,"31":0,"32":0,"34":0,"39":0,"42":1,"53":0,"55":0,"56":0,"58":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"83":0,"84":0,"85":0,"86":0,"91":0,"103":0,"104":0,"105":0,"106":0,"107":0,"115":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"148":0,"153":0,"154":0,"155":0,"156":0,"168":0,"170":0,"171":0,"172":0,"179":0,"192":0,"194":0,"195":0,"197":0,"199":0,"208":0,"210":0,"211":0,"213":0,"214":0,"215":0,"219":0,"220":0,"221":0,"224":0,"226":0,"229":0,"231":0,"233":0,"234":0,"235":0,"236":0,"238":0,"241":0,"248":0,"249":0,"250":0,"254":0,"258":0,"259":0,"261":0,"265":0,"266":0,"270":0,"273":0,"274":0,"275":0,"276":0,"278":0,"282":0,"289":0,"290":0,"291":0,"292":0,"300":0,"301":0,"306":0,"307":0,"308":0,"309":0,"318":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/multilabel/MetaLabeler.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/multilabel/MetaLabeler.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":18},"end":{"line":22,"column":33}}},"2":{"name":"(anonymous_2)","line":43,"loc":{"start":{"line":43,"column":14},"end":{"line":43,"column":39}}},"3":{"name":"(anonymous_3)","line":59,"loc":{"start":{"line":59,"column":14},"end":{"line":59,"column":32}}},"4":{"name":"(anonymous_4)","line":64,"loc":{"start":{"line":64,"column":38},"end":{"line":64,"column":54}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":11},"end":{"line":82,"column":37}}},"6":{"name":"(anonymous_6)","line":96,"loc":{"start":{"line":96,"column":54},"end":{"line":96,"column":79}}},"7":{"name":"(anonymous_7)","line":108,"loc":{"start":{"line":108,"column":16},"end":{"line":108,"column":27}}},"8":{"name":"(anonymous_8)","line":112,"loc":{"start":{"line":112,"column":10},"end":{"line":112,"column":21}}},"9":{"name":"(anonymous_9)","line":115,"loc":{"start":{"line":115,"column":12},"end":{"line":115,"column":27}}},"10":{"name":"(anonymous_10)","line":121,"loc":{"start":{"line":121,"column":24},"end":{"line":121,"column":53}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":39}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":41}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":32}},"4":{"start":{"line":22,"column":0},"end":{"line":33,"column":1}},"5":{"start":{"line":23,"column":1},"end":{"line":26,"column":2}},"6":{"start":{"line":24,"column":2},"end":{"line":24,"column":20}},"7":{"start":{"line":25,"column":2},"end":{"line":25,"column":47}},"8":{"start":{"line":27,"column":1},"end":{"line":30,"column":2}},"9":{"start":{"line":28,"column":2},"end":{"line":28,"column":20}},"10":{"start":{"line":29,"column":2},"end":{"line":29,"column":48}},"11":{"start":{"line":31,"column":1},"end":{"line":31,"column":37}},"12":{"start":{"line":32,"column":1},"end":{"line":32,"column":39}},"13":{"start":{"line":35,"column":0},"end":{"line":127,"column":1}},"14":{"start":{"line":45,"column":2},"end":{"line":45,"column":42}},"15":{"start":{"line":48,"column":2},"end":{"line":48,"column":79}},"16":{"start":{"line":49,"column":2},"end":{"line":49,"column":47}},"17":{"start":{"line":61,"column":2},"end":{"line":61,"column":34}},"18":{"start":{"line":64,"column":2},"end":{"line":70,"column":5}},"19":{"start":{"line":65,"column":3},"end":{"line":65,"column":74}},"20":{"start":{"line":66,"column":3},"end":{"line":69,"column":5}},"21":{"start":{"line":71,"column":2},"end":{"line":71,"column":45}},"22":{"start":{"line":83,"column":2},"end":{"line":83,"column":91}},"23":{"start":{"line":84,"column":2},"end":{"line":84,"column":91}},"24":{"start":{"line":85,"column":2},"end":{"line":85,"column":90}},"25":{"start":{"line":86,"column":2},"end":{"line":86,"column":97}},"26":{"start":{"line":87,"column":2},"end":{"line":87,"column":64}},"27":{"start":{"line":87,"column":30},"end":{"line":87,"column":64}},"28":{"start":{"line":90,"column":2},"end":{"line":90,"column":67}},"29":{"start":{"line":92,"column":2},"end":{"line":92,"column":47}},"30":{"start":{"line":94,"column":2},"end":{"line":96,"column":107}},"31":{"start":{"line":95,"column":3},"end":{"line":96,"column":107}},"32":{"start":{"line":96,"column":4},"end":{"line":96,"column":107}},"33":{"start":{"line":96,"column":80},"end":{"line":96,"column":104}},"34":{"start":{"line":98,"column":2},"end":{"line":105,"column":17}},"35":{"start":{"line":109,"column":2},"end":{"line":109,"column":37}},"36":{"start":{"line":122,"column":2},"end":{"line":123,"column":57}},"37":{"start":{"line":123,"column":3},"end":{"line":123,"column":57}},"38":{"start":{"line":124,"column":2},"end":{"line":125,"column":58}},"39":{"start":{"line":125,"column":3},"end":{"line":125,"column":58}},"40":{"start":{"line":130,"column":0},"end":{"line":130,"column":29}}},"branchMap":{"1":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},{"start":{"line":23,"column":1},"end":{"line":23,"column":1}}]},"2":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},{"start":{"line":27,"column":1},"end":{"line":27,"column":1}}]},"3":{"line":48,"type":"cond-expr","locations":[{"start":{"line":48,"column":43},"end":{"line":48,"column":49}},{"start":{"line":48,"column":51},"end":{"line":48,"column":70}}]},"4":{"line":65,"type":"cond-expr","locations":[{"start":{"line":65,"column":50},"end":{"line":65,"column":69}},{"start":{"line":65,"column":71},"end":{"line":65,"column":72}}]},"5":{"line":84,"type":"cond-expr","locations":[{"start":{"line":84,"column":33},"end":{"line":84,"column":64}},{"start":{"line":84,"column":66},"end":{"line":84,"column":89}}]},"6":{"line":86,"type":"cond-expr","locations":[{"start":{"line":86,"column":31},"end":{"line":86,"column":66}},{"start":{"line":86,"column":68},"end":{"line":86,"column":95}}]},"7":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":2},"end":{"line":87,"column":2}},{"start":{"line":87,"column":2},"end":{"line":87,"column":2}}]},"8":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":2},"end":{"line":94,"column":2}},{"start":{"line":94,"column":2},"end":{"line":94,"column":2}}]},"9":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":3},"end":{"line":95,"column":3}},{"start":{"line":95,"column":3},"end":{"line":95,"column":3}}]},"10":{"line":98,"type":"cond-expr","locations":[{"start":{"line":98,"column":21},"end":{"line":104,"column":3}},{"start":{"line":105,"column":2},"end":{"line":105,"column":16}}]},"11":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":2},"end":{"line":122,"column":2}},{"start":{"line":122,"column":2},"end":{"line":122,"column":2}}]},"12":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":2},"end":{"line":124,"column":2}},{"start":{"line":124,"column":2},"end":{"line":124,"column":2}}]}},"code":["var hash = require(\"../../utils/hash\");","var sprintf = require(\"sprintf\").sprintf;","var _ = require(\"underscore\")._;","","/**"," * MetaLabeler - Multi-label classifier, based on:"," * "," * Tang Lei, Rajan Suju, Narayanan Vijay K.. Large scale multi-label classification via metalabeler in Proceedings of the 18th international conference on World wide webWWW '09(New York, NY, USA):211-220ACM 2009."," * http://www.citeulike.org/user/erelsegal-halevi/article/4860265"," * "," * A MetaLabeler uses two multi-class classifiers to create a single multi-label classifier. One is called \"ranker\" and the other is called \"counter\"."," * "," * The MetaLabeler assigns labels to a sample in the following two stages:"," *  - Stage 1: Ranking. The sample is sent to the \"ranker\", which returns all available labels ordered from the most relevant to the least relevant."," *  - Stage 2: Counting. The sample is sent to the \"counter\", which returns integer C >= 0 which represents a number of labels."," * The MetaLabeler returns the C most relevant labels from the list returned by the ranker.   "," * "," * @param opts"," *            rankerType (mandatory) - the type of the multi-class classifier used for ranking the labels. "," *            counterType (mandatory) - the type of the multi-class classifier used for selecting the number of labels. "," */","var MetaLabeler = function(opts) {","\tif (!opts.rankerType) {","\t\tconsole.dir(opts);","\t\tthrow new Error(\"opts.rankerType not found\");","\t}","\tif (!opts.counterType) {","\t\tconsole.dir(opts);","\t\tthrow new Error(\"opts.counterType not found\");","\t}","\tthis.ranker = new opts.rankerType();","\tthis.counter = new opts.counterType();","}","","MetaLabeler.prototype = {","","\t/**","\t * Tell the classifier that the given sample belongs to the given classes.","\t * ","\t * @param sample  a document.","\t * @param labels an array whose VALUES are classes.","\t */","\ttrainOnline: function(sample, labels) {","\t\t// The ranker is just trained by the given set of relevant labels:","\t\tthis.ranker.trainOnline(sample, labels);","","\t\t// The counter is trained by the *number* of relevant labels:","\t\tvar labelCount = (Array.isArray(labels)? labels: Object.keys(labels)).length;","\t\tthis.counter.trainOnline(sample, labelCount);","\t},","","\t/**","\t * Train the classifier with all the given documents.","\t * ","\t * @param dataset","\t *            an array with objects of the format: ","\t *            {input: sample1, output: [class11, class12...]}","\t */","\ttrainBatch : function(dataset) {","\t\t// The ranker is just trained by the given set of labels relevant to each sample:","\t\tthis.ranker.trainBatch(dataset);","","\t\t// The counter is trained by the *number* of labels relevant to each sample:","\t\tvar labelCountDataset = dataset.map(function(datum) {","\t\t\tvar labelCount = (Array.isArray(datum.output)? datum.output.length: 1);","\t\t\treturn {","\t\t\t\tinput: datum.input,","\t\t\t\toutput: labelCount","\t\t\t};","\t\t});","\t\tthis.counter.trainBatch(labelCountDataset);","\t},","","\t/**","\t * Use the model trained so far to classify a new sample.","\t * ","\t * @param sample a document.","\t * @param explain - int - if positive, an \"explanation\" field, with the given length, will be added to the result.","\t *  ","\t * @return an array whose VALUES are classes.","\t */","\tclassify: function(sample, explain) {","\t\tvar rankedLabelsWithExplain = this.ranker.classify(sample, explain, /*withScores=*/true);","\t\tvar rankedLabels = (explain>0? rankedLabelsWithExplain.classes: rankedLabelsWithExplain);","\t\tvar labelCountWithExplain = this.counter.classify(sample, explain, /*withScores=*/true);","\t\tvar labelCount = (explain>0? labelCountWithExplain.classes[0][0]: labelCountWithExplain[0][0]);","\t\tif (_.isString(labelCount)) labelCount = parseInt(labelCount);","\t\t","\t\t// Pick the labelCount most relevant labels from the list returned by the ranker:   ","\t\tvar positiveLabelsWithScores = rankedLabels.slice(0, labelCount);","","\t\tvar positiveLabels = positiveLabelsWithScores","","\t\tif (positiveLabelsWithScores.length != 0)","\t\t\tif (_.isArray(positiveLabelsWithScores[0]))","\t\t\t\tvar positiveLabels = positiveLabelsWithScores.map(function(labelWithScore) {return labelWithScore[0]});","\t\t","\t\treturn (explain>0? {","\t\t\tclasses: positiveLabels,","\t\t\texplanation: {","\t\t\t\tranking: rankedLabelsWithExplain.explanation,","\t\t\t\tcounting: labelCountWithExplain.explanation","\t\t\t}","\t\t}:","\t\tpositiveLabels)","\t},","\t","\tgetAllClasses: function() {","\t\treturn this.ranker.getAllClasses();","\t},","","\ttoJSON : function() {","\t},","","\tfromJSON : function(json) {","\t},","\t","\t/**","\t * Link to a FeatureLookupTable from a higher level in the hierarchy (typically from an EnhancedClassifier), used ONLY for generating meaningful explanations. ","\t */","\tsetFeatureLookupTable: function(featureLookupTable) {","\t\tif (this.ranker.setFeatureLookupTable)","\t\t\tthis.ranker.setFeatureLookupTable(featureLookupTable);","\t\tif (this.counter.setFeatureLookupTable)","\t\t\tthis.counter.setFeatureLookupTable(featureLookupTable);","\t},","}","","","module.exports = MetaLabeler;",""],"l":{"1":1,"2":1,"3":1,"22":1,"23":0,"24":0,"25":0,"27":0,"28":0,"29":0,"31":0,"32":0,"35":1,"45":0,"48":0,"49":0,"61":0,"64":0,"65":0,"66":0,"71":0,"83":0,"84":0,"85":0,"86":0,"87":0,"90":0,"92":0,"94":0,"95":0,"96":0,"98":0,"109":0,"122":0,"123":0,"124":0,"125":0,"130":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/multilabel/CrossLangaugeModelClassifier.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/multilabel/CrossLangaugeModelClassifier.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":1,"50":1,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,1]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":35},"end":{"line":22,"column":50}}},"2":{"name":"(anonymous_2)","line":40,"loc":{"start":{"line":40,"column":14},"end":{"line":40,"column":41}}},"3":{"name":"(anonymous_3)","line":53,"loc":{"start":{"line":53,"column":14},"end":{"line":53,"column":32}}},"4":{"name":"(anonymous_4)","line":54,"loc":{"start":{"line":54,"column":24},"end":{"line":54,"column":40}}},"5":{"name":"(anonymous_5)","line":63,"loc":{"start":{"line":63,"column":12},"end":{"line":63,"column":52}}},"6":{"name":"(anonymous_6)","line":73,"loc":{"start":{"line":73,"column":20},"end":{"line":73,"column":34}}},"7":{"name":"(anonymous_7)","line":82,"loc":{"start":{"line":82,"column":16},"end":{"line":82,"column":27}}},"8":{"name":"(anonymous_8)","line":91,"loc":{"start":{"line":91,"column":19},"end":{"line":91,"column":36}}},"9":{"name":"(anonymous_9)","line":112,"loc":{"start":{"line":112,"column":10},"end":{"line":112,"column":21}}},"10":{"name":"(anonymous_10)","line":119,"loc":{"start":{"line":119,"column":12},"end":{"line":119,"column":27}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":39}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":41}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":32}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":27}},"5":{"start":{"line":5,"column":0},"end":{"line":5,"column":51}},"6":{"start":{"line":7,"column":0},"end":{"line":7,"column":69}},"7":{"start":{"line":22,"column":0},"end":{"line":28,"column":1}},"8":{"start":{"line":23,"column":1},"end":{"line":23,"column":43}},"9":{"start":{"line":24,"column":1},"end":{"line":24,"column":57}},"10":{"start":{"line":25,"column":1},"end":{"line":25,"column":38}},"11":{"start":{"line":26,"column":1},"end":{"line":26,"column":21}},"12":{"start":{"line":27,"column":1},"end":{"line":27,"column":29}},"13":{"start":{"line":30,"column":0},"end":{"line":123,"column":1}},"14":{"start":{"line":41,"column":2},"end":{"line":43,"column":34}},"15":{"start":{"line":54,"column":2},"end":{"line":59,"column":11}},"16":{"start":{"line":55,"column":3},"end":{"line":58,"column":4}},"17":{"start":{"line":60,"column":2},"end":{"line":60,"column":33}},"18":{"start":{"line":64,"column":2},"end":{"line":64,"column":24}},"19":{"start":{"line":65,"column":2},"end":{"line":72,"column":3}},"20":{"start":{"line":66,"column":3},"end":{"line":66,"column":43}},"21":{"start":{"line":67,"column":3},"end":{"line":67,"column":59}},"22":{"start":{"line":68,"column":3},"end":{"line":69,"column":72}},"23":{"start":{"line":69,"column":4},"end":{"line":69,"column":72}},"24":{"start":{"line":70,"column":3},"end":{"line":70,"column":68}},"25":{"start":{"line":71,"column":3},"end":{"line":71,"column":42}},"26":{"start":{"line":73,"column":2},"end":{"line":73,"column":54}},"27":{"start":{"line":73,"column":35},"end":{"line":73,"column":51}},"28":{"start":{"line":75,"column":2},"end":{"line":75,"column":110}},"29":{"start":{"line":83,"column":2},"end":{"line":83,"column":37}},"30":{"start":{"line":92,"column":2},"end":{"line":92,"column":49}},"31":{"start":{"line":92,"column":31},"end":{"line":92,"column":49}},"32":{"start":{"line":93,"column":2},"end":{"line":93,"column":20}},"33":{"start":{"line":94,"column":2},"end":{"line":108,"column":3}},"34":{"start":{"line":95,"column":3},"end":{"line":95,"column":25}},"35":{"start":{"line":96,"column":3},"end":{"line":96,"column":62}},"36":{"start":{"line":97,"column":3},"end":{"line":97,"column":26}},"37":{"start":{"line":98,"column":3},"end":{"line":104,"column":4}},"38":{"start":{"line":99,"column":4},"end":{"line":99,"column":53}},"39":{"start":{"line":100,"column":10},"end":{"line":104,"column":4}},"40":{"start":{"line":101,"column":4},"end":{"line":101,"column":26}},"41":{"start":{"line":103,"column":4},"end":{"line":103,"column":32}},"42":{"start":{"line":105,"column":3},"end":{"line":105,"column":39}},"43":{"start":{"line":106,"column":3},"end":{"line":106,"column":55}},"44":{"start":{"line":107,"column":3},"end":{"line":107,"column":52}},"45":{"start":{"line":109,"column":2},"end":{"line":109,"column":18}},"46":{"start":{"line":113,"column":2},"end":{"line":116,"column":3}},"47":{"start":{"line":120,"column":2},"end":{"line":120,"column":34}},"48":{"start":{"line":121,"column":2},"end":{"line":121,"column":28}},"49":{"start":{"line":126,"column":0},"end":{"line":126,"column":46}},"50":{"start":{"line":129,"column":0},"end":{"line":159,"column":1}},"51":{"start":{"line":130,"column":1},"end":{"line":130,"column":56}},"52":{"start":{"line":132,"column":1},"end":{"line":136,"column":4}},"53":{"start":{"line":138,"column":1},"end":{"line":142,"column":5}},"54":{"start":{"line":146,"column":1},"end":{"line":146,"column":26}},"55":{"start":{"line":147,"column":1},"end":{"line":147,"column":68}},"56":{"start":{"line":149,"column":1},"end":{"line":149,"column":39}},"57":{"start":{"line":150,"column":1},"end":{"line":150,"column":71}},"58":{"start":{"line":152,"column":1},"end":{"line":152,"column":38}},"59":{"start":{"line":153,"column":1},"end":{"line":153,"column":77}},"60":{"start":{"line":155,"column":1},"end":{"line":155,"column":50}},"61":{"start":{"line":156,"column":1},"end":{"line":156,"column":77}},"62":{"start":{"line":158,"column":1},"end":{"line":158,"column":54}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":18},"end":{"line":25,"column":32}},{"start":{"line":25,"column":36},"end":{"line":25,"column":37}}]},"2":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":3},"end":{"line":68,"column":3}},{"start":{"line":68,"column":3},"end":{"line":68,"column":3}}]},"3":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":2},"end":{"line":92,"column":2}},{"start":{"line":92,"column":2},"end":{"line":92,"column":2}}]},"4":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":3},"end":{"line":98,"column":3}},{"start":{"line":98,"column":3},"end":{"line":98,"column":3}}]},"5":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":10},"end":{"line":100,"column":10}},{"start":{"line":100,"column":10},"end":{"line":100,"column":10}}]},"6":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":0},"end":{"line":129,"column":0}},{"start":{"line":129,"column":0},"end":{"line":129,"column":0}}]}},"code":["var hash = require(\"../../utils/hash\");","var sprintf = require(\"sprintf\").sprintf;","var _ = require(\"underscore\")._;","var util = require(\"util\");","var multilabelutils = require('./multilabelutils');","","var CrossLanguageModel = require('languagemodel').CrossLanguageModel;","","","","/**"," * Multilabel classifier based on cross-language model."," * "," * See https://github.com/erelsgl/languagemodel ."," *"," * @param opts"," *\t\t\tsmoothingCoefficient (lamda of the model)"," *          threshold (optional; default 0) - for selecting relevant/irrelevant classes."," *          labelFeatureExtractor (optional) - function that extracts features from the output labels. "," *"," */","var CrossLanguageModelClassifier = function(opts) {","\tthis.model = new CrossLanguageModel(opts);","\tthis.labelFeatureExtractor = opts.labelFeatureExtractor;","\tthis.threshold = opts.threshold || 0;","\tthis.allLabels = {};   ","\tthis.allLabelsFeatures = {};","}","","CrossLanguageModelClassifier.prototype = {","","\t/**","\t * Train the classifier with the given input features and the given array of output labels.","\t * ","\t * @note In the original paper, training was apparently done with a single output label per training instance. ","\t * It is not clear how to train when there are multiple   output labels per training instance.","\t * I asked: \"suppose there is an input sentence \"Where is the robot and how do I use it?\" and it is labeled with two different output sentences: \"The robot is there\" and \"Read the instructions\".   What exactly do you put in the training set in this case?\"","\t * And Anton Leusky replied: \"in your example, both labels are in the training set. The goal is to have the classifier to rank these labels above all others for question \"Where is the robot and how do I use it?\" The order in which the correct labels are ranked is irrelevant. \"","\t */","\ttrainOnline: function(features, labels) {","\t\tthis.model.trainOnline(","\t\t\tfeatures, // input features","\t\t\tthis.labelsToFeatures(labels)); // output features","\t},","","\t/**","\t * Train the classifier with all the given documents.","\t * ","\t * @param dataset","\t *\t\t\tan array with objects of the format: ","\t *\t\t\t{input: sample1, output: [class11, class12...]}","\t */","\ttrainBatch : function(dataset) {","\t\tdataset = dataset.map(function(datum) {","\t\t\treturn {","\t\t\t\tinput: datum.input,","\t\t\t\toutput: this.labelsToFeatures(datum.output),","\t\t\t}","\t\t}, this);","\t\tthis.model.trainBatch(dataset);","\t},","","\tclassify : function(features, explain, withScores) {","\t\tvar scoresVector = [];","\t\tfor (var labelString in this.allLabels) {","\t\t\tvar label = this.allLabels[labelString];","\t\t\tvar labelFeatures = this.allLabelsFeatures[labelString];","\t\t\tif (!labelFeatures)","\t\t\t\tthrow new Error(\"label features for \"+labelString+\" are undefined\");","\t\t\tvar similarity = -this.model.divergence(features, labelFeatures);","\t\t\tscoresVector.push([label, similarity]);","\t\t}","\t\tscoresVector.sort(function(a,b) {return b[1]-a[1]}); // sort by decreasing score","\t\t","\t\treturn multilabelutils.mapScoresVectorToMultilabelResult(scoresVector, explain, withScores, this.threshold);","\t},","","","\t/**","\t * @return an array with all possible output labels.","\t */","\tgetAllClasses: function() {","\t\treturn Object.keys(this.allLabels);","\t},","\t","\t/**","\t * Internal function.","\t * ","\t * Converts an array of output labels to a hash of features.","\t */","\tlabelsToFeatures: function(labels) {","\t\tif (!Array.isArray(labels))  labels = [labels];","\t\tvar features = {};","\t\tfor (var i in labels) {","\t\t\tvar label = labels[i];","\t\t\tvar labelString = multilabelutils.stringifyIfNeeded(label);","\t\t\tvar labelFeatures = {};","\t\t\tif (this.labelFeatureExtractor) {","\t\t\t\tthis.labelFeatureExtractor(label, labelFeatures);","\t\t\t} else if (_.isObject(label)) {","\t\t\t\tlabelFeatures = label;","\t\t\t} else {","\t\t\t\tlabelFeatures[label] = true;","\t\t\t}","\t\t\tthis.allLabels[labelString] = label;","\t\t\tthis.allLabelsFeatures[labelString] = labelFeatures;","\t\t\tfeatures = util._extend(features, labelFeatures);","\t\t}","\t\treturn features;","\t},","","\ttoJSON : function() {","\t\treturn {","\t\t\tallLabels: this.allLabels,","\t\t\tmodel: this.model.toJSON(),","\t\t}","\t},","","\tfromJSON : function(json) {","\t\tthis.allLabels = json.allLabels;","\t\tthis.model.fromJSON(json);","\t},","}","","","module.exports = CrossLanguageModelClassifier;","","","if (process.argv[1] === __filename) {","\tconsole.log(\"CrossLanguageModelClassifier demo start\");","\t","\tvar classifier = new CrossLanguageModelClassifier({","\t\tsmoothingCoefficient : 0.9,","\t\tlabelFeatureExtractor: null,","\t\tthreshold: -0.5,","\t});","","\tclassifier.trainBatch([","\t                       {input: {i:1, want:1, aa:1}, output: {a:1}},","\t                       {input: {i:1, want:1, bb:1}, output: {b:1}},","\t                       {input: {i:1, want:1, cc:1}, output: {c:1}},","\t\t]);","","\t//console.log(util.inspect(classifier, {depth:10}));","\t","\tconsole.log(\"classify:\");","\tconsole.dir(classifier.classify({i:1, want:1, aa:1, and:1, bb:1}));\t","","\tconsole.log(\"classify with explain:\");","\tconsole.dir(classifier.classify({i:1, want:1, aa:1, and:1, bb:1}, 3));\t","","\tconsole.log(\"classify with scores:\");","\tconsole.dir(classifier.classify({i:1, want:1, aa:1, and:1, bb:1}, 0, true));\t","","\tconsole.log(\"classify with scores and explain:\");","\tconsole.dir(classifier.classify({i:1, want:1, aa:1, and:1, bb:1}, 3, true));\t","","\tconsole.log(\"CrossLanguageModelClassifier demo end\");","}",""],"l":{"1":1,"2":1,"3":1,"4":1,"5":1,"7":1,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"30":1,"41":0,"54":0,"55":0,"60":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"73":0,"75":0,"83":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"103":0,"105":0,"106":0,"107":0,"109":0,"113":0,"120":0,"121":0,"126":1,"129":1,"130":0,"132":0,"138":0,"146":0,"147":0,"149":0,"150":0,"152":0,"153":0,"155":0,"156":0,"158":0}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/multilabel/ThresholdClassifier.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/multilabel/ThresholdClassifier.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":1,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":1,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"fnMap":{"1":{"name":"(anonymous_1)","line":20,"loc":{"start":{"line":20,"column":26},"end":{"line":20,"column":41}}},"2":{"name":"(anonymous_2)","line":60,"loc":{"start":{"line":60,"column":14},"end":{"line":60,"column":39}}},"3":{"name":"(anonymous_3)","line":75,"loc":{"start":{"line":75,"column":14},"end":{"line":75,"column":32}}},"4":{"name":"(anonymous_4)","line":77,"loc":{"start":{"line":77,"column":13},"end":{"line":77,"column":25}}},"5":{"name":"(anonymous_5)","line":84,"loc":{"start":{"line":84,"column":86},"end":{"line":84,"column":121}}},"6":{"name":"(anonymous_6)","line":114,"loc":{"start":{"line":114,"column":16},"end":{"line":114,"column":34}}},"7":{"name":"(anonymous_7)","line":138,"loc":{"start":{"line":138,"column":23},"end":{"line":138,"column":38}}},"8":{"name":"(anonymous_8)","line":139,"loc":{"start":{"line":139,"column":13},"end":{"line":139,"column":27}}},"9":{"name":"(anonymous_9)","line":153,"loc":{"start":{"line":153,"column":23},"end":{"line":153,"column":60}}},"10":{"name":"(anonymous_10)","line":206,"loc":{"start":{"line":206,"column":11},"end":{"line":206,"column":37}}},"11":{"name":"(anonymous_11)","line":210,"loc":{"start":{"line":210,"column":16},"end":{"line":210,"column":27}}},"12":{"name":"(anonymous_12)","line":214,"loc":{"start":{"line":214,"column":10},"end":{"line":214,"column":21}}},"13":{"name":"(anonymous_13)","line":218,"loc":{"start":{"line":218,"column":12},"end":{"line":218,"column":27}}},"14":{"name":"(anonymous_14)","line":222,"loc":{"start":{"line":222,"column":24},"end":{"line":222,"column":53}}},"15":{"name":"calculate_PRF","line":228,"loc":{"start":{"line":228,"column":0},"end":{"line":229,"column":1}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":39}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":41}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":51}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":32}},"5":{"start":{"line":5,"column":0},"end":{"line":5,"column":61}},"6":{"start":{"line":6,"column":0},"end":{"line":6,"column":51}},"7":{"start":{"line":7,"column":0},"end":{"line":7,"column":40}},"8":{"start":{"line":20,"column":0},"end":{"line":56,"column":1}},"9":{"start":{"line":22,"column":1},"end":{"line":22,"column":19}},"10":{"start":{"line":24,"column":1},"end":{"line":27,"column":2}},"11":{"start":{"line":25,"column":2},"end":{"line":25,"column":20}},"12":{"start":{"line":26,"column":2},"end":{"line":26,"column":64}},"13":{"start":{"line":28,"column":1},"end":{"line":31,"column":2}},"14":{"start":{"line":29,"column":2},"end":{"line":29,"column":20}},"15":{"start":{"line":30,"column":2},"end":{"line":30,"column":59}},"16":{"start":{"line":33,"column":1},"end":{"line":36,"column":2}},"17":{"start":{"line":34,"column":2},"end":{"line":34,"column":20}},"18":{"start":{"line":35,"column":2},"end":{"line":35,"column":65}},"19":{"start":{"line":37,"column":1},"end":{"line":40,"column":2}},"20":{"start":{"line":38,"column":2},"end":{"line":38,"column":20}},"21":{"start":{"line":39,"column":2},"end":{"line":39,"column":60}},"22":{"start":{"line":41,"column":1},"end":{"line":44,"column":2}},"23":{"start":{"line":42,"column":2},"end":{"line":42,"column":20}},"24":{"start":{"line":43,"column":2},"end":{"line":43,"column":68}},"25":{"start":{"line":46,"column":1},"end":{"line":46,"column":65}},"26":{"start":{"line":49,"column":1},"end":{"line":49,"column":65}},"27":{"start":{"line":52,"column":1},"end":{"line":52,"column":22}},"28":{"start":{"line":55,"column":1},"end":{"line":55,"column":80}},"29":{"start":{"line":58,"column":0},"end":{"line":226,"column":1}},"30":{"start":{"line":61,"column":2},"end":{"line":61,"column":74}},"31":{"start":{"line":77,"column":2},"end":{"line":77,"column":56}},"32":{"start":{"line":77,"column":26},"end":{"line":77,"column":54}},"33":{"start":{"line":79,"column":2},"end":{"line":107,"column":3}},"34":{"start":{"line":80,"column":3},"end":{"line":80,"column":16}},"35":{"start":{"line":81,"column":3},"end":{"line":81,"column":23}},"36":{"start":{"line":82,"column":3},"end":{"line":82,"column":28}},"37":{"start":{"line":83,"column":3},"end":{"line":83,"column":27}},"38":{"start":{"line":84,"column":3},"end":{"line":89,"column":17}},"39":{"start":{"line":85,"column":4},"end":{"line":85,"column":51}},"40":{"start":{"line":86,"column":4},"end":{"line":86,"column":40}},"41":{"start":{"line":87,"column":4},"end":{"line":87,"column":74}},"42":{"start":{"line":88,"column":4},"end":{"line":88,"column":39}},"43":{"start":{"line":91,"column":3},"end":{"line":91,"column":33}},"44":{"start":{"line":93,"column":3},"end":{"line":93,"column":77}},"45":{"start":{"line":94,"column":3},"end":{"line":94,"column":75}},"46":{"start":{"line":96,"column":3},"end":{"line":96,"column":31}},"47":{"start":{"line":100,"column":3},"end":{"line":100,"column":89}},"48":{"start":{"line":101,"column":3},"end":{"line":101,"column":30}},"49":{"start":{"line":102,"column":3},"end":{"line":102,"column":28}},"50":{"start":{"line":103,"column":3},"end":{"line":103,"column":50}},"51":{"start":{"line":104,"column":3},"end":{"line":104,"column":39}},"52":{"start":{"line":105,"column":3},"end":{"line":105,"column":73}},"53":{"start":{"line":106,"column":3},"end":{"line":106,"column":39}},"54":{"start":{"line":109,"column":2},"end":{"line":109,"column":49}},"55":{"start":{"line":115,"column":2},"end":{"line":115,"column":22}},"56":{"start":{"line":116,"column":2},"end":{"line":116,"column":6}},"57":{"start":{"line":117,"column":2},"end":{"line":134,"column":5}},"58":{"start":{"line":119,"column":4},"end":{"line":119,"column":89}},"59":{"start":{"line":121,"column":4},"end":{"line":131,"column":4}},"60":{"start":{"line":123,"column":5},"end":{"line":128,"column":41}},"61":{"start":{"line":125,"column":6},"end":{"line":125,"column":35}},"62":{"start":{"line":126,"column":6},"end":{"line":126,"column":11}},"63":{"start":{"line":128,"column":11},"end":{"line":128,"column":40}},"64":{"start":{"line":130,"column":5},"end":{"line":130,"column":32}},"65":{"start":{"line":133,"column":4},"end":{"line":133,"column":56}},"66":{"start":{"line":138,"column":2},"end":{"line":142,"column":8}},"67":{"start":{"line":139,"column":6},"end":{"line":141,"column":8}},"68":{"start":{"line":140,"column":9},"end":{"line":140,"column":77}},"69":{"start":{"line":144,"column":2},"end":{"line":144,"column":29}},"70":{"start":{"line":155,"column":2},"end":{"line":155,"column":16}},"71":{"start":{"line":157,"column":2},"end":{"line":157,"column":10}},"72":{"start":{"line":158,"column":2},"end":{"line":158,"column":8}},"73":{"start":{"line":159,"column":2},"end":{"line":159,"column":8}},"74":{"start":{"line":161,"column":2},"end":{"line":161,"column":13}},"75":{"start":{"line":163,"column":2},"end":{"line":189,"column":5}},"76":{"start":{"line":165,"column":3},"end":{"line":165,"column":49}},"77":{"start":{"line":165,"column":36},"end":{"line":165,"column":42}},"78":{"start":{"line":165,"column":43},"end":{"line":165,"column":48}},"79":{"start":{"line":166,"column":3},"end":{"line":166,"column":43}},"80":{"start":{"line":166,"column":36},"end":{"line":166,"column":42}},"81":{"start":{"line":171,"column":3},"end":{"line":171,"column":43}},"82":{"start":{"line":173,"column":3},"end":{"line":174,"column":12}},"83":{"start":{"line":174,"column":4},"end":{"line":174,"column":11}},"84":{"start":{"line":176,"column":3},"end":{"line":179,"column":62}},"85":{"start":{"line":177,"column":4},"end":{"line":177,"column":59}},"86":{"start":{"line":179,"column":4},"end":{"line":179,"column":61}},"87":{"start":{"line":181,"column":4},"end":{"line":182,"column":13}},"88":{"start":{"line":182,"column":4},"end":{"line":182,"column":12}},"89":{"start":{"line":184,"column":4},"end":{"line":184,"column":35}},"90":{"start":{"line":185,"column":4},"end":{"line":185,"column":41}},"91":{"start":{"line":186,"column":4},"end":{"line":186,"column":44}},"92":{"start":{"line":188,"column":4},"end":{"line":188,"column":39}},"93":{"start":{"line":191,"column":3},"end":{"line":191,"column":19}},"94":{"start":{"line":192,"column":3},"end":{"line":192,"column":31}},"95":{"start":{"line":193,"column":3},"end":{"line":200,"column":4}},"96":{"start":{"line":195,"column":4},"end":{"line":199,"column":5}},"97":{"start":{"line":197,"column":5},"end":{"line":197,"column":14}},"98":{"start":{"line":198,"column":5},"end":{"line":198,"column":63}},"99":{"start":{"line":202,"column":4},"end":{"line":202,"column":24}},"100":{"start":{"line":207,"column":2},"end":{"line":207,"column":83}},"101":{"start":{"line":211,"column":2},"end":{"line":211,"column":51}},"102":{"start":{"line":215,"column":2},"end":{"line":215,"column":44}},"103":{"start":{"line":219,"column":2},"end":{"line":219,"column":43}},"104":{"start":{"line":223,"column":2},"end":{"line":224,"column":71}},"105":{"start":{"line":224,"column":3},"end":{"line":224,"column":71}},"106":{"start":{"line":228,"column":0},"end":{"line":238,"column":2}},"107":{"start":{"line":230,"column":1},"end":{"line":230,"column":11}},"108":{"start":{"line":231,"column":1},"end":{"line":231,"column":15}},"109":{"start":{"line":232,"column":1},"end":{"line":232,"column":15}},"110":{"start":{"line":233,"column":1},"end":{"line":233,"column":15}},"111":{"start":{"line":234,"column":1},"end":{"line":234,"column":51}},"112":{"start":{"line":235,"column":1},"end":{"line":235,"column":48}},"113":{"start":{"line":236,"column":1},"end":{"line":236,"column":138}},"114":{"start":{"line":237,"column":1},"end":{"line":237,"column":13}},"115":{"start":{"line":240,"column":0},"end":{"line":240,"column":37}}},"branchMap":{"1":{"line":22,"type":"binary-expr","locations":[{"start":{"line":22,"column":8},"end":{"line":22,"column":12}},{"start":{"line":22,"column":16},"end":{"line":22,"column":18}}]},"2":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},{"start":{"line":24,"column":1},"end":{"line":24,"column":1}}]},"3":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},{"start":{"line":28,"column":1},"end":{"line":28,"column":1}}]},"4":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},{"start":{"line":33,"column":1},"end":{"line":33,"column":1}}]},"5":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},{"start":{"line":37,"column":1},"end":{"line":37,"column":1}}]},"6":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},{"start":{"line":41,"column":1},"end":{"line":41,"column":1}}]},"7":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":2},"end":{"line":79,"column":2}},{"start":{"line":79,"column":2},"end":{"line":79,"column":2}}]},"8":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":5},"end":{"line":123,"column":5}},{"start":{"line":123,"column":5},"end":{"line":123,"column":5}}]},"9":{"line":140,"type":"cond-expr","locations":[{"start":{"line":140,"column":41},"end":{"line":140,"column":42}},{"start":{"line":140,"column":46},"end":{"line":140,"column":74}}]},"10":{"line":140,"type":"cond-expr","locations":[{"start":{"line":140,"column":68},"end":{"line":140,"column":69}},{"start":{"line":140,"column":72},"end":{"line":140,"column":74}}]},"11":{"line":165,"type":"if","locations":[{"start":{"line":165,"column":3},"end":{"line":165,"column":3}},{"start":{"line":165,"column":3},"end":{"line":165,"column":3}}]},"12":{"line":166,"type":"if","locations":[{"start":{"line":166,"column":3},"end":{"line":166,"column":3}},{"start":{"line":166,"column":3},"end":{"line":166,"column":3}}]},"13":{"line":173,"type":"if","locations":[{"start":{"line":173,"column":3},"end":{"line":173,"column":3}},{"start":{"line":173,"column":3},"end":{"line":173,"column":3}}]},"14":{"line":176,"type":"if","locations":[{"start":{"line":176,"column":3},"end":{"line":176,"column":3}},{"start":{"line":176,"column":3},"end":{"line":176,"column":3}}]},"15":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":4},"end":{"line":181,"column":4}},{"start":{"line":181,"column":4},"end":{"line":181,"column":4}}]},"16":{"line":195,"type":"if","locations":[{"start":{"line":195,"column":4},"end":{"line":195,"column":4}},{"start":{"line":195,"column":4},"end":{"line":195,"column":4}}]},"17":{"line":223,"type":"if","locations":[{"start":{"line":223,"column":2},"end":{"line":223,"column":2}},{"start":{"line":223,"column":2},"end":{"line":223,"column":2}}]},"18":{"line":234,"type":"cond-expr","locations":[{"start":{"line":234,"column":37},"end":{"line":234,"column":38}},{"start":{"line":234,"column":40},"end":{"line":234,"column":50}}]},"19":{"line":235,"type":"cond-expr","locations":[{"start":{"line":235,"column":34},"end":{"line":235,"column":35}},{"start":{"line":235,"column":37},"end":{"line":235,"column":47}}]},"20":{"line":236,"type":"cond-expr","locations":[{"start":{"line":236,"column":59},"end":{"line":236,"column":60}},{"start":{"line":236,"column":62},"end":{"line":236,"column":137}}]}},"code":["var hash = require(\"../../utils/hash\");","var sprintf = require(\"sprintf\").sprintf;","var multilabelutils = require('./multilabelutils');","var _ = require(\"underscore\")._;","var PrecisionRecall = require('../../utils/PrecisionRecall');","var partitions = require('../../utils/partitions');","var ulist = require('../../utils/list');","","","/* ThresholdClassifier - classifier that converts multi-class classifier to multi-label classifier by finding"," * the best appropriate threshold. "," * @param opts"," *            numOfFoldsForThresholdCalculation - =1 the threshold is approximated on validation set of size 10% of training set"," \t\t\t\t\t\t\t\t\t\t\t\t  >1 n - fold cross - validation is applied to approximate the threshold"," *            evaluateMeasureToMaximize (['Accuracy','F1']) - string of the measure that operate the improvement of threshold"," *\t\t\t  multiclassClassifier - multi-class classifier used for classification."," * @author Vasily Konovalov"," */","","var ThresholdClassifier = function(opts) {","\t","\topts = opts || {};","","\tif (!('multiclassClassifierType' in opts)) {","\t\tconsole.dir(opts);","\t\tthrow new Error(\"opts must contain multiclassClassifierType\");","\t}","\tif (!opts.multiclassClassifierType) {","\t\tconsole.dir(opts);","\t\tthrow new Error(\"opts.multiclassClassifierType is null\");","\t}","","\tif (!('evaluateMeasureToMaximize' in opts)) {","\t\tconsole.dir(opts);","\t\tthrow new Error(\"opts must contain evaluateMeasureToMaximize\");","\t}","\tif (!opts.evaluateMeasureToMaximize) {","\t\tconsole.dir(opts);","\t\tthrow new Error(\"opts.evaluateMeasureToMaximize is null\");","\t}","\tif (!opts.numOfFoldsForThresholdCalculation) {","\t\tconsole.dir(opts);","\t\tthrow new Error(\"opts.numOfFoldsForThresholdCalculation is null\");","\t}","\t","\tthis.multiclassClassifier = new opts.multiclassClassifierType();","","\t// [F1, Accuracy]\t","\tthis.evaluateMeasureToMaximize = opts.evaluateMeasureToMaximize;","","\t// constant size of validation set","\tthis.devsetsize = 0.1","","\t// > 1, n - fold cross - validation, otherwise validation set","\tthis.numOfFoldsForThresholdCalculation = opts.numOfFoldsForThresholdCalculation","}","","ThresholdClassifier.prototype = {","","\ttrainOnline: function(sample, labels) {","\t\tthrow new Error(\"ThresholdClassifier does not support online training\");","\t},","","\t/**","\t * Train the classifier with all the given documents and identify the best possible threshold","\t * simply by running over all relevant scores and determining the value of feedback function","\t * (F1 by default)","\t * ","\t * @param dataset","\t *            an array with objects of the format: ","\t *            {input: sample1, output: [class11, class12...]}","\t * @author Vasily Konovalov","\t * ","\t */","\ttrainBatch : function(dataset) {","","\t\t_.times(3, function(n) {dataset = _.shuffle(dataset)})","","\t\tif (this.numOfFoldsForThresholdCalculation > 1) {","\t\t\tthresholds=[]","\t\t\tbest_performances=[]","\t\t\taverage_performances = []","\t\t\tmedian_performances = []","\t\t\tpartitions.partitions_consistent(dataset, this.numOfFoldsForThresholdCalculation, (function(trainSet, testSet, index) { \t ","\t\t\t\tthis.multiclassClassifier.trainBatch(trainSet);","\t\t\t\tresult = this.receiveScores(testSet)","\t\t\t\tperformance = this.CalculatePerformance(result[0], testSet, result[1])","\t\t\t\tbest_performances.push(performance)","\t\t\t}).bind(this))","","\t\t\tthis.stats = best_performances","\t\t\t\t\t","\t\t\tthreshold_average = ulist.average(_.pluck(best_performances, 'Threshold'))","\t\t\tthreshold_median = ulist.median(_.pluck(best_performances, 'Threshold'))","","\t\t\tThreshold = threshold_median","\t\t}","\t\telse","\t\t{","\t\t\tdataset = partitions.partition(dataset, 1, Math.round(dataset.length*this.devsetsize))","\t\t\ttrainSet = dataset['train']","\t\t\ttestSet = dataset['test']","\t\t\tthis.multiclassClassifier.trainBatch(trainSet);","\t\t\tresult = this.receiveScores(testSet)","\t\t\tperformance = this.CalculatePerformance(result[0], testSet, result[1])","\t\t\tThreshold = performance['Threshold']\t","\t\t}","","\t\tthis.multiclassClassifier.threshold = Threshold","\t},","\t/*","\t* Classify dataset and return the scored result in sorted list","\t*/","\treceiveScores: function(dataset) {","\t\tlist_of_scores = [];","\t\tFN=0","\t\tfor (var i=0; i<dataset.length; ++i) ","\t\t{"," \t\t\tvar scoresVector = this.multiclassClassifier.classify(dataset[i].input, false, true);",""," \t\t\tfor (score in scoresVector)"," \t\t\t{"," \t\t\t\tif (dataset[i].output.indexOf(scoresVector[score][0])>-1)"," \t\t\t\t{"," \t\t\t\t\tscoresVector[score].push(\"+\")"," \t\t\t\t\tFN+=1"," \t\t\t\t}"," \t\t\t\telse {scoresVector[score].push(\"-\")}",""," \t\t\t\tscoresVector[score].push(i)\t","\t\t\t}",""," \t\t\tlist_of_scores = list_of_scores.concat(scoresVector)","  \t\t}\t","","  \t\t// list_of_scores = [['d',4],['b',2],['a',1],['c',3]]","","\t\tlist_of_scores.sort((function(index){","\t\t    return function(a, b){","\t        return (a[index] === b[index] ? 0 : (a[index] < b[index] ? 1 : -1));","\t\t    };","\t\t})(1))","","\t\treturn [list_of_scores, FN]","\t},","\t","\t/*","\tCalculate the bst threshold with the highest evaluateMeasureToMaximize","\t@param  list_of_scores list of scores","\t@param  testSet test set","\t@param FN false negative","\t*/","\tCalculatePerformance: function(list_of_scores, testSet, FN){","","\t\tcurrent_set=[]","","\t\tTRUE = 0","\t\tFP = 0","\t\tTP = 0","","\t\tresult = []","\t\t","\t\tfor (var th=0; th<list_of_scores.length; ++th) {","","\t\t\tif (list_of_scores[th][2]==\"+\") {TP+=1; FN-=1}","\t\t\tif (list_of_scores[th][2]==\"-\") {FP+=1;}","","\t\t\t// console.log(list_of_scores[th])","\t\t\t// console.log(\"TP \"+TP+\" FP \"+FP+\" FN \"+FN)","","\t\t\tindex_in_testSet = list_of_scores[th][3]","","\t\t\tif (_.isEqual(current_set[index_in_testSet], testSet[index_in_testSet]['output'])) ","\t\t\t{TRUE-=1}","\t\t\t","\t\t\tif (!current_set[index_in_testSet])","\t\t\t{current_set[index_in_testSet] = [list_of_scores[th][0]]}","\t\t\telse","\t\t\t{current_set[index_in_testSet].push(list_of_scores[th][0])}",""," \t\t\tif (_.isEqual(current_set[index_in_testSet], testSet[index_in_testSet]['output'])) ","\t\t\t{TRUE+=1 }","\t\t\t"," \t\t\tPRF = calculate_PRF(TP, FP, FN)"," \t\t\tPRF['Accuracy'] = TRUE/testSet.length"," \t\t\tPRF['Threshold'] = list_of_scores[th][1]"," "," \t\t\tresult[list_of_scores[th][1]] = PRF"," \t\t\t}","","\t\t\toptial_measure=0","\t\t\tindex=Object.keys(result)[0]","\t\t\tfor (i in result)","\t\t\t{","\t\t\t\tif (result[i][this.evaluateMeasureToMaximize] >= optial_measure)","\t\t\t\t{","\t\t\t\t\tindex = i","\t\t\t\t\toptial_measure = result[i][this.evaluateMeasureToMaximize]","\t\t\t\t}","\t\t\t}",""," \t\t\treturn result[index]"," \t\t","\t},","\t","\tclassify: function(sample, explain) {","\t\treturn this.multiclassClassifier.classify(sample, explain, /*withScores=*/false);","\t},","\t","\tgetAllClasses: function() {","\t\treturn this.multiclassClassifier.getAllClasses();","\t},","","\ttoJSON : function() {","\t\treturn this.multiclassClassifier.toJSON();","\t},","","\tfromJSON : function(json) {","\t\tthis.multiclassClassifier.fromJSON(json);","\t},","\t","\tsetFeatureLookupTable: function(featureLookupTable) {","\t\tif (this.multiclassClassifier.setFeatureLookupTable)","\t\t\tthis.multiclassClassifier.setFeatureLookupTable(featureLookupTable);","\t},","}","","function calculate_PRF(TP, FP, FN)","\t{","\tstats = {}","\tstats['TP']=TP","\tstats['FP']=FP","\tstats['FN']=FN","\tstats['Precision'] = (TP + FP == 0? 0: TP/(TP+FP))","\tstats['Recall'] = (TP + FN == 0? 0: TP/(TP+FN))","\tstats['F1'] = (stats['Precision'] + stats['Recall'] == 0? 0: 2*stats['Precision']*stats['Recall']/(stats['Precision'] + stats['Recall']))","\treturn stats","\t}","","module.exports = ThresholdClassifier;",""],"l":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"20":1,"22":0,"24":0,"25":0,"26":0,"28":0,"29":0,"30":0,"33":0,"34":0,"35":0,"37":0,"38":0,"39":0,"41":0,"42":0,"43":0,"46":0,"49":0,"52":0,"55":0,"58":1,"61":0,"77":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"91":0,"93":0,"94":0,"96":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"109":0,"115":0,"116":0,"117":0,"119":0,"121":0,"123":0,"125":0,"126":0,"128":0,"130":0,"133":0,"138":0,"139":0,"140":0,"144":0,"155":0,"157":0,"158":0,"159":0,"161":0,"163":0,"165":0,"166":0,"171":0,"173":0,"174":0,"176":0,"177":0,"179":0,"181":0,"182":0,"184":0,"185":0,"186":0,"188":0,"191":0,"192":0,"193":0,"195":0,"197":0,"198":0,"202":0,"207":0,"211":0,"215":0,"219":0,"223":0,"224":0,"228":1,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"240":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/utils/PrecisionRecall.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/utils/PrecisionRecall.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},"fnMap":{"1":{"name":"(anonymous_1)","line":11,"loc":{"start":{"line":11,"column":22},"end":{"line":11,"column":33}}},"2":{"name":"(anonymous_2)","line":28,"loc":{"start":{"line":28,"column":10},"end":{"line":28,"column":37}}},"3":{"name":"(anonymous_3)","line":45,"loc":{"start":{"line":45,"column":11},"end":{"line":45,"column":71}}},"4":{"name":"(anonymous_4)","line":86,"loc":{"start":{"line":86,"column":15},"end":{"line":86,"column":76}}},"5":{"name":"(anonymous_5)","line":95,"loc":{"start":{"line":95,"column":25},"end":{"line":95,"column":57}}},"6":{"name":"(anonymous_6)","line":148,"loc":{"start":{"line":148,"column":23},"end":{"line":148,"column":49}}},"7":{"name":"(anonymous_7)","line":162,"loc":{"start":{"line":162,"column":17},"end":{"line":163,"column":1}}},"8":{"name":"(anonymous_8)","line":164,"loc":{"start":{"line":164,"column":35},"end":{"line":164,"column":61}}},"9":{"name":"(anonymous_9)","line":174,"loc":{"start":{"line":174,"column":32},"end":{"line":174,"column":45}}},"10":{"name":"(anonymous_10)","line":180,"loc":{"start":{"line":180,"column":17},"end":{"line":181,"column":1}}},"11":{"name":"(anonymous_11)","line":189,"loc":{"start":{"line":189,"column":40},"end":{"line":189,"column":66}}},"12":{"name":"(anonymous_12)","line":192,"loc":{"start":{"line":192,"column":51},"end":{"line":192,"column":70}}},"13":{"name":"(anonymous_13)","line":195,"loc":{"start":{"line":195,"column":29},"end":{"line":195,"column":55}}},"14":{"name":"(anonymous_14)","line":197,"loc":{"start":{"line":197,"column":41},"end":{"line":197,"column":60}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":29}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":41}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":32}},"4":{"start":{"line":11,"column":0},"end":{"line":18,"column":1}},"5":{"start":{"line":12,"column":1},"end":{"line":12,"column":17}},"6":{"start":{"line":13,"column":1},"end":{"line":13,"column":20}},"7":{"start":{"line":15,"column":1},"end":{"line":15,"column":16}},"8":{"start":{"line":16,"column":1},"end":{"line":16,"column":15}},"9":{"start":{"line":17,"column":1},"end":{"line":17,"column":29}},"10":{"start":{"line":20,"column":0},"end":{"line":227,"column":1}},"11":{"start":{"line":29,"column":2},"end":{"line":29,"column":15}},"12":{"start":{"line":30,"column":2},"end":{"line":30,"column":36}},"13":{"start":{"line":30,"column":26},"end":{"line":30,"column":36}},"14":{"start":{"line":31,"column":2},"end":{"line":31,"column":37}},"15":{"start":{"line":31,"column":27},"end":{"line":31,"column":37}},"16":{"start":{"line":32,"column":2},"end":{"line":32,"column":37}},"17":{"start":{"line":32,"column":27},"end":{"line":32,"column":37}},"18":{"start":{"line":33,"column":2},"end":{"line":33,"column":38}},"19":{"start":{"line":33,"column":28},"end":{"line":33,"column":38}},"20":{"start":{"line":34,"column":2},"end":{"line":34,"column":36}},"21":{"start":{"line":34,"column":24},"end":{"line":34,"column":36}},"22":{"start":{"line":46,"column":2},"end":{"line":46,"column":24}},"23":{"start":{"line":47,"column":2},"end":{"line":47,"column":49}},"24":{"start":{"line":48,"column":2},"end":{"line":48,"column":53}},"25":{"start":{"line":50,"column":2},"end":{"line":50,"column":21}},"26":{"start":{"line":51,"column":2},"end":{"line":60,"column":3}},"27":{"start":{"line":52,"column":3},"end":{"line":59,"column":4}},"28":{"start":{"line":53,"column":4},"end":{"line":53,"column":83}},"29":{"start":{"line":53,"column":26},"end":{"line":53,"column":83}},"30":{"start":{"line":54,"column":4},"end":{"line":54,"column":14}},"31":{"start":{"line":56,"column":4},"end":{"line":56,"column":62}},"32":{"start":{"line":57,"column":4},"end":{"line":57,"column":14}},"33":{"start":{"line":58,"column":4},"end":{"line":58,"column":20}},"34":{"start":{"line":61,"column":2},"end":{"line":67,"column":3}},"35":{"start":{"line":62,"column":3},"end":{"line":66,"column":4}},"36":{"start":{"line":63,"column":4},"end":{"line":63,"column":64}},"37":{"start":{"line":64,"column":4},"end":{"line":64,"column":14}},"38":{"start":{"line":65,"column":4},"end":{"line":65,"column":20}},"39":{"start":{"line":68,"column":2},"end":{"line":71,"column":3}},"40":{"start":{"line":69,"column":3},"end":{"line":69,"column":64}},"41":{"start":{"line":69,"column":25},"end":{"line":69,"column":64}},"42":{"start":{"line":70,"column":3},"end":{"line":70,"column":15}},"43":{"start":{"line":72,"column":2},"end":{"line":72,"column":15}},"44":{"start":{"line":73,"column":2},"end":{"line":73,"column":22}},"45":{"start":{"line":87,"column":2},"end":{"line":87,"column":24}},"46":{"start":{"line":88,"column":2},"end":{"line":88,"column":26}},"47":{"start":{"line":88,"column":27},"end":{"line":88,"column":51}},"48":{"start":{"line":88,"column":52},"end":{"line":88,"column":76}},"49":{"start":{"line":90,"column":2},"end":{"line":100,"column":3}},"50":{"start":{"line":92,"column":3},"end":{"line":92,"column":36}},"51":{"start":{"line":93,"column":3},"end":{"line":94,"column":34}},"52":{"start":{"line":94,"column":5},"end":{"line":94,"column":34}},"53":{"start":{"line":95,"column":3},"end":{"line":99,"column":11}},"54":{"start":{"line":96,"column":4},"end":{"line":97,"column":46}},"55":{"start":{"line":97,"column":5},"end":{"line":97,"column":46}},"56":{"start":{"line":98,"column":4},"end":{"line":98,"column":45}},"57":{"start":{"line":102,"column":2},"end":{"line":102,"column":49}},"58":{"start":{"line":103,"column":2},"end":{"line":103,"column":53}},"59":{"start":{"line":105,"column":2},"end":{"line":105,"column":21}},"60":{"start":{"line":106,"column":2},"end":{"line":125,"column":3}},"61":{"start":{"line":108,"column":3},"end":{"line":113,"column":5}},"62":{"start":{"line":109,"column":4},"end":{"line":109,"column":31}},"63":{"start":{"line":110,"column":4},"end":{"line":110,"column":36}},"64":{"start":{"line":111,"column":4},"end":{"line":111,"column":36}},"65":{"start":{"line":112,"column":4},"end":{"line":112,"column":36}},"66":{"start":{"line":115,"column":3},"end":{"line":124,"column":4}},"67":{"start":{"line":116,"column":4},"end":{"line":116,"column":63}},"68":{"start":{"line":116,"column":26},"end":{"line":116,"column":63}},"69":{"start":{"line":117,"column":4},"end":{"line":117,"column":39}},"70":{"start":{"line":120,"column":4},"end":{"line":120,"column":41}},"71":{"start":{"line":121,"column":4},"end":{"line":121,"column":39}},"72":{"start":{"line":123,"column":4},"end":{"line":123,"column":20}},"73":{"start":{"line":126,"column":2},"end":{"line":141,"column":3}},"74":{"start":{"line":128,"column":3},"end":{"line":133,"column":5}},"75":{"start":{"line":129,"column":4},"end":{"line":129,"column":33}},"76":{"start":{"line":130,"column":4},"end":{"line":130,"column":38}},"77":{"start":{"line":131,"column":4},"end":{"line":131,"column":38}},"78":{"start":{"line":132,"column":4},"end":{"line":132,"column":38}},"79":{"start":{"line":135,"column":3},"end":{"line":140,"column":4}},"80":{"start":{"line":136,"column":4},"end":{"line":136,"column":43}},"81":{"start":{"line":137,"column":4},"end":{"line":137,"column":41}},"82":{"start":{"line":139,"column":4},"end":{"line":139,"column":20}},"83":{"start":{"line":142,"column":2},"end":{"line":145,"column":3}},"84":{"start":{"line":144,"column":3},"end":{"line":144,"column":15}},"85":{"start":{"line":146,"column":2},"end":{"line":146,"column":15}},"86":{"start":{"line":148,"column":2},"end":{"line":151,"column":10}},"87":{"start":{"line":150,"column":3},"end":{"line":150,"column":27}},"88":{"start":{"line":153,"column":2},"end":{"line":154,"column":28}},"89":{"start":{"line":154,"column":3},"end":{"line":154,"column":28}},"90":{"start":{"line":156,"column":2},"end":{"line":157,"column":28}},"91":{"start":{"line":157,"column":3},"end":{"line":157,"column":28}},"92":{"start":{"line":159,"column":2},"end":{"line":159,"column":22}},"93":{"start":{"line":164,"column":2},"end":{"line":171,"column":10}},"94":{"start":{"line":166,"column":3},"end":{"line":166,"column":115}},"95":{"start":{"line":167,"column":3},"end":{"line":167,"column":118}},"96":{"start":{"line":168,"column":3},"end":{"line":168,"column":102}},"97":{"start":{"line":170,"column":3},"end":{"line":170,"column":63}},"98":{"start":{"line":170,"column":34},"end":{"line":170,"column":63}},"99":{"start":{"line":173,"column":2},"end":{"line":173,"column":37}},"100":{"start":{"line":174,"column":2},"end":{"line":174,"column":68}},"101":{"start":{"line":174,"column":47},"end":{"line":174,"column":66}},"102":{"start":{"line":175,"column":2},"end":{"line":175,"column":34}},"103":{"start":{"line":177,"column":2},"end":{"line":177,"column":20}},"104":{"start":{"line":182,"column":2},"end":{"line":182,"column":16}},"105":{"start":{"line":183,"column":2},"end":{"line":183,"column":21}},"106":{"start":{"line":185,"column":2},"end":{"line":185,"column":23}},"107":{"start":{"line":187,"column":2},"end":{"line":187,"column":41}},"108":{"start":{"line":189,"column":2},"end":{"line":193,"column":4}},"109":{"start":{"line":190,"column":3},"end":{"line":190,"column":50}},"110":{"start":{"line":192,"column":3},"end":{"line":192,"column":187}},"111":{"start":{"line":192,"column":72},"end":{"line":192,"column":158}},"112":{"start":{"line":192,"column":120},"end":{"line":192,"column":139}},"113":{"start":{"line":192,"column":146},"end":{"line":192,"column":158}},"114":{"start":{"line":195,"column":2},"end":{"line":198,"column":4}},"115":{"start":{"line":196,"column":3},"end":{"line":196,"column":45}},"116":{"start":{"line":197,"column":3},"end":{"line":197,"column":82}},"117":{"start":{"line":197,"column":62},"end":{"line":197,"column":80}},"118":{"start":{"line":200,"column":2},"end":{"line":200,"column":28}},"119":{"start":{"line":201,"column":2},"end":{"line":201,"column":48}},"120":{"start":{"line":202,"column":2},"end":{"line":202,"column":58}},"121":{"start":{"line":203,"column":2},"end":{"line":203,"column":20}},"122":{"start":{"line":204,"column":2},"end":{"line":204,"column":20}},"123":{"start":{"line":205,"column":2},"end":{"line":205,"column":20}},"124":{"start":{"line":206,"column":2},"end":{"line":206,"column":45}},"125":{"start":{"line":207,"column":2},"end":{"line":207,"column":47}},"126":{"start":{"line":208,"column":2},"end":{"line":208,"column":41}},"127":{"start":{"line":209,"column":2},"end":{"line":209,"column":33}},"128":{"start":{"line":210,"column":2},"end":{"line":210,"column":55}},"129":{"start":{"line":211,"column":2},"end":{"line":211,"column":52}},"130":{"start":{"line":212,"column":2},"end":{"line":212,"column":66}},"131":{"start":{"line":213,"column":2},"end":{"line":213,"column":63}},"132":{"start":{"line":214,"column":2},"end":{"line":214,"column":40}},"133":{"start":{"line":229,"column":0},"end":{"line":229,"column":33}}},"branchMap":{"1":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":2},"end":{"line":30,"column":2}},{"start":{"line":30,"column":2},"end":{"line":30,"column":2}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":6},"end":{"line":30,"column":14}},{"start":{"line":30,"column":18},"end":{"line":30,"column":24}}]},"3":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":2},"end":{"line":31,"column":2}},{"start":{"line":31,"column":2},"end":{"line":31,"column":2}}]},"4":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":6},"end":{"line":31,"column":15}},{"start":{"line":31,"column":19},"end":{"line":31,"column":25}}]},"5":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":2},"end":{"line":32,"column":2}},{"start":{"line":32,"column":2},"end":{"line":32,"column":2}}]},"6":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":6},"end":{"line":32,"column":14}},{"start":{"line":32,"column":18},"end":{"line":32,"column":25}}]},"7":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":2},"end":{"line":33,"column":2}},{"start":{"line":33,"column":2},"end":{"line":33,"column":2}}]},"8":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":6},"end":{"line":33,"column":15}},{"start":{"line":33,"column":19},"end":{"line":33,"column":26}}]},"9":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":2},"end":{"line":34,"column":2}},{"start":{"line":34,"column":2},"end":{"line":34,"column":2}}]},"10":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":3},"end":{"line":52,"column":3}},{"start":{"line":52,"column":3},"end":{"line":52,"column":3}}]},"11":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":4},"end":{"line":53,"column":4}},{"start":{"line":53,"column":4},"end":{"line":53,"column":4}}]},"12":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":3},"end":{"line":62,"column":3}},{"start":{"line":62,"column":3},"end":{"line":62,"column":3}}]},"13":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":2},"end":{"line":68,"column":2}},{"start":{"line":68,"column":2},"end":{"line":68,"column":2}}]},"14":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":3},"end":{"line":69,"column":3}},{"start":{"line":69,"column":3},"end":{"line":69,"column":3}}]},"15":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":2},"end":{"line":90,"column":2}},{"start":{"line":90,"column":2},"end":{"line":90,"column":2}}]},"16":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":3},"end":{"line":93,"column":3}},{"start":{"line":93,"column":3},"end":{"line":93,"column":3}}]},"17":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":4},"end":{"line":96,"column":4}},{"start":{"line":96,"column":4},"end":{"line":96,"column":4}}]},"18":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":3},"end":{"line":108,"column":3}},{"start":{"line":108,"column":3},"end":{"line":108,"column":3}}]},"19":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":3},"end":{"line":115,"column":3}},{"start":{"line":115,"column":3},"end":{"line":115,"column":3}}]},"20":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":4},"end":{"line":116,"column":4}},{"start":{"line":116,"column":4},"end":{"line":116,"column":4}}]},"21":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":3},"end":{"line":128,"column":3}},{"start":{"line":128,"column":3},"end":{"line":128,"column":3}}]},"22":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":3},"end":{"line":135,"column":3}},{"start":{"line":135,"column":3},"end":{"line":135,"column":3}}]},"23":{"line":142,"type":"if","locations":[{"start":{"line":142,"column":2},"end":{"line":142,"column":2}},{"start":{"line":142,"column":2},"end":{"line":142,"column":2}}]},"24":{"line":153,"type":"if","locations":[{"start":{"line":153,"column":2},"end":{"line":153,"column":2}},{"start":{"line":153,"column":2},"end":{"line":153,"column":2}}]},"25":{"line":156,"type":"if","locations":[{"start":{"line":156,"column":2},"end":{"line":156,"column":2}},{"start":{"line":156,"column":2},"end":{"line":156,"column":2}}]},"26":{"line":170,"type":"if","locations":[{"start":{"line":170,"column":3},"end":{"line":170,"column":3}},{"start":{"line":170,"column":3},"end":{"line":170,"column":3}}]},"27":{"line":192,"type":"if","locations":[{"start":{"line":192,"column":72},"end":{"line":192,"column":72}},{"start":{"line":192,"column":72},"end":{"line":192,"column":72}}]},"28":{"line":192,"type":"binary-expr","locations":[{"start":{"line":192,"column":76},"end":{"line":192,"column":89}},{"start":{"line":192,"column":93},"end":{"line":192,"column":107}},{"start":{"line":192,"column":111},"end":{"line":192,"column":117}}]}},"code":["var hash = require(\"./hash\");","var sprintf = require('sprintf').sprintf;","var _ = require('underscore')._;","","/**"," * PrecisionRecall - an object for tracking results of experiments: precision, recall, f1, and execution time."," * "," * @author Erel Segal-haLevi"," * @since 2013-06"," */","var PrecisionRecall = function() {","\tthis.labels = {}","\tthis.confusion = {} // only in single label case","\t","\tthis.count = 0;","\tthis.TRUE = 0;","\tthis.startTime = new Date();","}","","PrecisionRecall.prototype = {","\t\t","\t/**","\t * Record the result of a new binary experiment.","\t * ","\t * @param expected - the expected result (true/false).","\t * @param actual   - the actual   result (true/false).","\t */","\taddCase: function(expected, actual) {","\t\tthis.count++;","\t\tif (expected && actual) this.TP++;","\t\tif (!expected && actual) this.FP++;","\t\tif (expected && !actual) this.FN++;","\t\tif (!expected && !actual) this.TN++;","\t\tif (expected==actual) this.TRUE++;","\t},","","\t/**","\t * Record the result of a new classes experiment.","\t *","\t * @param expectedClasses - the expected set of classes (as an array or a hash).","\t * @param actualClasses   - the actual   set of classes (as an array or a hash).","\t * @param logTruePositives- if true, log the true positives. ","\t * @return an array of explanations \"FALSE POSITIVE\", \"FALSE NEGATIVE\", and maybe also \"TRUE POSITIVE\"","\t */","\taddCases: function (expectedClasses, actualClasses, logTruePositives) {","\t\tvar explanations = [];","\t\tactualClasses = hash.normalized(actualClasses);","\t\texpectedClasses = hash.normalized(expectedClasses);","","\t\tvar allTrue = true;","\t\tfor (var actualClass in actualClasses) {","\t\t\tif (actualClass in expectedClasses) { ","\t\t\t\tif (logTruePositives) explanations.push(\"\\t\\t+++ TRUE POSITIVE: \"+actualClass);","\t\t\t\tthis.TP++;","\t\t\t} else {","\t\t\t\texplanations.push(\"\\t\\t--- FALSE POSITIVE: \"+actualClass);","\t\t\t\tthis.FP++;","\t\t\t\tallTrue = false;","\t\t\t}","\t\t}","\t\tfor (var expectedClass in expectedClasses) {","\t\t\tif (!(expectedClass in actualClasses)) {","\t\t\t\texplanations.push(\"\\t\\t--- FALSE NEGATIVE: \"+expectedClass);","\t\t\t\tthis.FN++;","\t\t\t\tallTrue = false;","\t\t\t}","\t\t}","\t\tif (allTrue) {","\t\t\tif (logTruePositives) explanations.push(\"\\t\\t*** ALL TRUE!\");","\t\t\tthis.TRUE++;","\t\t}","\t\tthis.count++;","\t\treturn explanations;","\t},","","/**","\t * Record the result of a new classes experiment in a hash manner.","\t * Doesn't allowed to do a inner output, all stats are put in hash","\t * @param expectedClasses - the expected set of classes (as an array or a hash).","\t * @param actualClasses   - the actual   set of classes (as an array or a hash).","\t * @param logTruePositives- if true, log the true positives. ","\t * @return an array of explanations \"FALSE POSITIVE\", \"FALSE NEGATIVE\", and maybe also \"TRUE POSITIVE\"","     * @author Vasily Konovalov","\t */","","\taddCasesHash: function (expectedClasses, actualClasses, logTruePositives ) {","\t\tvar explanations = {};","\t\texplanations['TP'] = []; explanations['FP'] = []; explanations['FN'] = [];","","\t\tif (expectedClasses.length == 1)","\t\t{","\t\t\tvar expected = expectedClasses[0]","\t\t\tif (!(expected in this.confusion))","\t\t\t\t\tthis.confusion[expected] = {}","\t\t\t_.each(actualClasses, function(actualClass, key, list){","\t\t\t\tif (!(actualClass in this.confusion[expected]))","\t\t\t\t\tthis.confusion[expected][actualClass] = 0","\t\t\t\tthis.confusion[expected][actualClass] +=1","\t\t\t}, this)","\t\t}","","\t\tactualClasses = hash.normalized(actualClasses);","\t\texpectedClasses = hash.normalized(expectedClasses);","","\t\tvar allTrue = true;","\t\tfor (var actualClass in actualClasses) {","","\t\t\tif (!(actualClass in this.labels)) {","\t\t\t\tthis.labels[actualClass]={}","\t\t\t\tthis.labels[actualClass]['TP']=0","\t\t\t\tthis.labels[actualClass]['FP']=0","\t\t\t\tthis.labels[actualClass]['FN']=0","\t\t\t\t}","","\t\t\tif (actualClass in expectedClasses) { ","\t\t\t\tif (logTruePositives) explanations['TP'].push(actualClass);","\t\t\t\tthis.labels[actualClass]['TP'] += 1 ","\t\t\t\t// this.TP++;","\t\t\t} else {","\t\t\t\texplanations['FP'].push(actualClass);","\t\t\t\tthis.labels[actualClass]['FP'] += 1","\t\t\t\t// this.FP++;","\t\t\t\tallTrue = false;","\t\t\t}","\t\t}","\t\tfor (var expectedClass in expectedClasses) {","","\t\t\tif (!(expectedClass in this.labels)) {","\t\t\t\tthis.labels[expectedClass]={}","\t\t\t\tthis.labels[expectedClass]['TP']=0","\t\t\t\tthis.labels[expectedClass]['FP']=0","\t\t\t\tthis.labels[expectedClass]['FN']=0","\t\t\t\t}","","\t\t\tif (!(expectedClass in actualClasses)) {","\t\t\t\texplanations['FN'].push(expectedClass);","\t\t\t\tthis.labels[expectedClass]['FN'] += 1 ","\t\t\t\t// this.FN++;","\t\t\t\tallTrue = false;","\t\t\t}","\t\t}","\t\tif (allTrue) {","\t\t\t// if ((logTruePositives)&& (!only_false_cases)) explanations.push(\"\\t\\t*** ALL TRUE!\");","\t\t\tthis.TRUE++;","\t\t}","\t\tthis.count++;","","\t\t_.each(explanations, function(value, key, list){ ","\t\t\t// explanations[key] = _.sortBy(explanations[key], function(num){ num });","\t\t\texplanations[key].sort()","\t\t}, this)","","\t\tif (explanations['FP'].length == 0)","\t\t\tdelete explanations['FP']","","\t\tif (explanations['FN'].length == 0)","\t\t\tdelete explanations['FN']","","\t\treturn explanations;","\t},","","\tretrieveLabels: function()","\t{","\t\t_.each(Object.keys(this.labels), function(label, key, list){ ","\t\t\t","\t\t\tthis.labels[label]['Recall'] = this.labels[label]['TP'] / (this.labels[label]['TP'] + this.labels[label]['FN']);","\t\t\tthis.labels[label]['Precision'] = this.labels[label]['TP'] / (this.labels[label]['TP'] + this.labels[label]['FP']);","\t\t\tthis.labels[label]['F1'] = 2 / (1/this.labels[label]['Recall'] + 1/this.labels[label]['Precision'])","","\t\t\tif (!this.labels[label]['F1']) this.labels[label]['F1'] = -1","\t\t}, this)","","\t\tvar arlabels = _.pairs(this.labels) ","\t\tarlabels = _.sortBy(arlabels, function(num){ return arlabels[0] })","\t\tthis.labels = _.object(arlabels)","","\t\treturn this.labels","\t},","","\tcalculateStats: function()","\t{","\t\tvar stats = {}","\t\tvar temp_stats = {}","\t\t","\t\tthis.retrieveLabels()","","\t\tvar labelsstats = _.values(this.labels)","","\t\t_.each(['Precision', 'Recall', 'F1'], function(param, key, list){ ","\t\t\ttemp_stats[param] = _.pluck(labelsstats, param)","\t\t\t// temp_stats[param] = _.filter(temp_stats[param], function(elem){ return (!_.isNaN(elem) && !_.isNull(elem) && elem>-1)  })","\t\t\ttemp_stats[param] = _.reduce(temp_stats[param], function(memo, num){ if (!_.isNaN(num) && !_.isNull(num) && num>-1) {return (memo + num)} else return memo }) / temp_stats[param].length","\t\t})","","\t\t_.each(['TP', 'FP', 'FN'], function(param, key, list){ ","\t\t\tstats[param] = _.pluck(labelsstats, param)","\t\t\tstats[param] = _.reduce(stats[param], function(memo, num){ return memo + num })","\t\t})","","\t\tthis.endTime = new Date();","\t\tthis.timeMillis = this.endTime-this.startTime;","\t\tthis.timePerSampleMillis = this.timeMillis / this.count;","\t\tthis.TP = stats.TP","\t\tthis.FP = stats.FP","\t\tthis.FN = stats.FN","\t\tthis.Accuracy = (this.TRUE) / (this.count);","\t\tthis.macroPrecision = temp_stats['Precision']","\t\tthis.macroRecall = temp_stats['Recall']","\t\tthis.macroF1 = temp_stats['F1']","\t\tthis.microPrecision = stats.TP / (stats.TP+stats.FP);","\t\tthis.microRecall = stats.TP / (stats.TP+stats.FN);","\t\tthis.microF1 = 2 / (1/this.microRecall + 1/this.microPrecision);","\t\tthis.HammingLoss = (stats.FN+stats.FP) / (stats.FN+stats.TP); // \"the percentage of the wrong labels to the total number of labels\"","\t\tthis.HammingGain = 1-this.HammingLoss;","\t\t","\t\t// this.shortStatsString = sprintf(\"Accuracy=%d/%d=%1.0f%% HammingGain=1-%d/%d=%1.0f%% Precision=%1.0f%% Recall=%1.0f%% F1=%1.0f%% timePerSample=%1.0f[ms]\",","\t\t\t\t// this.TRUE, this.count, this.Accuracy*100, (this.FN+this.FP), (this.FN+this.TP), this.HammingGain*100, this.Precision*100, this.Recall*100, this.F1*100, this.timePerSampleMillis);","\t\t","\t\t// _.each(this.labels, function(st, lab, list){ ","\t\t// \t_.each(st, function(val, par, list){ ","\t\t// \t\tstats[lab+\"_\"+par] = val","\t\t// \t}, this)","\t\t// }, this)","","\t\t// return stats","\t}","}","","module.exports = PrecisionRecall;","","","// example of usage see in test","\t// addCasesHashSeq: function (expectedClasses, actualClasses, logTruePositives ) {","","\t// \tvar ex = []","\t// \tvar ac = []","\t// \tvar matchlist = []","","\t// \t// clean up expected list","\t// \t_.each(expectedClasses, function(expected, key, list){ ","\t// \t\tif ((expected.length == 2) || (expected.length == 3))","\t// \t\t\tex.push(expected)","\t// \t}, this)","","\t// \t// ac = actualClasses","\t// \t// // filtering actual classes\t\t","\t// \t// _.each(actualClasses, function(actual, key, list){ ","\t// \t// \tvar found = _.filter(ac, function(num){ return ((num[0] == actual[0]) && (this.intersection(num[1], actual[1]) == true)) }, this);","\t// \t// \tif (found.length == 0)","\t// \t// \t\tac.push(actual)","\t// \t// }, this)","","\t// \t// console.log(JSON.stringify(actualClasses, null, 4))","","\t// \t// var ac = this.uniquecandidate(this.uniqueaggregate(actualClasses))","\t// \tvar ac = actualClasses","","","\t// \t// filling interdependencies between labels ","\t// \t// for every candidate (actual) it looks for intersection between actual labels with different ","\t// \t// intents, intersection means that different intents came to the common substring, then arrange ","\t// \t// all the data in the hash, and mention only keyphrases.","","\t// \t_.each(ac, function(actual, key, list){","\t// \tif (actual.length > 3)","\t// \t\t{\t ","\t// \t\tlabel = actual[0]","\t// \t\t// keyphrase","\t// \t\tstr = actual[2]","\t// \t\tif (!(label in this.dep))","\t// \t\t\t{","\t// \t\t\tthis.dep[label] = {}","\t// \t\t\tthis.dep[label][label] = []","\t// \t\t\t}","\t// \t\tthis.dep[label][label].push(str)","","\t// \t\t// intersection, different intents but actual intersection","\t// \t\tvar found = _.filter(ac, function(num){ return ((num[0] != actual[0]) && (this.intersection(num[1], actual[1]) == true)) }, this);","\t// \t\t_.each(found, function(sublabel, key, list){","\t// \t\t\tif (!(sublabel[0] in this.dep[label]))","\t// \t\t\t\tthis.dep[label][sublabel[0]] = []","\t// \t\t\tthis.dep[label][sublabel[0]].push([[actual[2],actual[4]], [sublabel[2],sublabel[4]]])","\t// \t\t}, this)","\t// \t\t}","\t// \t}, this)","","\t// \tvar explanations = {};","\t// \texplanations['TP'] = []; explanations['FP'] = []; explanations['FN'] = [];","\t\t","\t// \tvar explanations_detail = {};","\t// \texplanations_detail['TP'] = []; explanations_detail['FP'] = []; explanations_detail['FN'] = [];","\t\t","\t// \tvar allTrue = true;","\t// \tfor (var actualClassindex in ac) {","\t\t\t","\t// \t\tif (!(ac[actualClassindex][0] in this.labels)) {","\t// \t\t\tthis.labels[ac[actualClassindex][0]]={}","\t// \t\t\tthis.labels[ac[actualClassindex][0]]['TP']=0","\t// \t\t\tthis.labels[ac[actualClassindex][0]]['FP']=0","\t// \t\t\tthis.labels[ac[actualClassindex][0]]['FN']=0","\t// \t\t\t}","","\t// \t\tvar found = false","\t// \t\t_.each(ex, function(exc, key, list){","\t// \t\t\tif (ac[actualClassindex][0] == exc[0])","\t// \t\t\t\t{","\t// \t\t\t\tif ((exc[1].length == 0) || (ac[actualClassindex][1][0] == -1))","\t// \t\t\t\t\t{","\t// \t\t\t\t\tfound = true","\t// \t\t\t\t\tmatchlist.push(ac[actualClassindex])","\t// \t\t\t\t\t}","\t// \t\t\t\telse","\t// \t\t\t\t\t{","\t// \t\t\t\t\tif (this.intersection(ac[actualClassindex][1], exc[1]))","\t// \t\t\t\t\t\t{","\t// \t\t\t\t\t\tfound = true","\t// \t\t\t\t\t\tmatchlist.push(ac[actualClassindex])","\t// \t\t\t\t\t\t}","\t// \t\t\t\t\t}","\t// \t\t\t\t}","\t// \t\t}, this)","","\t// \t\tif (found) { ","\t// \t\t\tif (logTruePositives)","\t// \t\t\t\t{","\t// \t\t\t\t\texplanations['TP'].push(ac[actualClassindex][0]);","\t// \t\t\t\t\texplanations_detail['TP'].push(ac[actualClassindex]);","\t// \t\t\t\t\tthis.labels[ac[actualClassindex][0]]['TP'] += 1","\t// \t\t\t\t\tthis.TP++","\t// \t\t\t\t}","\t// \t\t} else {","\t// \t\t\texplanations['FP'].push(ac[actualClassindex][0]);","\t// \t\t\texplanations_detail['FP'].push(ac[actualClassindex]);","\t// \t\t\tthis.labels[ac[actualClassindex][0]]['FP'] += 1","\t// \t\t\tthis.FP++","\t// \t\t\tallTrue = false;","\t// \t\t}","\t// \t}","","\t// \tfor (var expectedClassindex in ex) {","\t// \t\tvar found = false","","\t// \t\tif (!(ex[expectedClassindex][0] in this.labels)) {","\t// \t\t\tthis.labels[ex[expectedClassindex][0]]={}","\t// \t\t\tthis.labels[ex[expectedClassindex][0]]['TP']=0","\t// \t\t\tthis.labels[ex[expectedClassindex][0]]['FP']=0","\t// \t\t\tthis.labels[ex[expectedClassindex][0]]['FN']=0","\t// \t\t\t}","","\t// \t\t_.each(ac, function(acc, key, list){ ","\t// \t\t\tif (ex[expectedClassindex][0] == acc[0])","\t// \t\t\t\t{","\t// \t\t\t\t\tif ((ex[expectedClassindex][1].length == 0) || (acc[1][0] == -1))","\t// \t\t\t\t\t\tfound = true","\t// \t\t\t\t\telse","\t// \t\t\t\t\t\t{","\t// \t\t\t\t\t\tif (this.intersection(ex[expectedClassindex][1], acc[1]))","\t// \t\t\t\t\t\t\tfound = true","\t// \t\t\t\t\t\t}","\t// \t\t\t\t}","\t// \t\t}, this)","","\t// \t\tif (!found)","\t// \t\t\t{","\t// \t\t\texplanations['FN'].push(ex[expectedClassindex][0]);","\t// \t\t\texplanations_detail['FN'].push(ex[expectedClassindex]);","\t// \t\t\tthis.labels[ex[expectedClassindex][0]]['FN'] += 1","\t// \t\t\tthis.FN++;","\t// \t\t\tallTrue = false;","\t// \t\t\t}","\t// \t}","","\t// \tif (allTrue) {","\t// \t\t// if ((logTruePositives)&& (!only_false_cases)) explanations.push(\"\\t\\t*** ALL TRUE!\");","\t// \t\tthis.TRUE++;","\t// \t}","\t// \tthis.count++;","","\t// \t// _.each(explanations, function(value, key, list){ ","\t// \t\t// explanations[key] = _.sortBy(explanations[key], function(num){ num });","\t// \t\t// explanations[key].sort()","\t// \t// }, this)","","\t// \t// console.log(explanations)","\t// \t// console.log(matchlist)","\t\t","\t// \t// if (expectedClasses.length > 1)","\t// \t\t// process.exit(0)","","\t// \treturn {","\t// \t\t\t'explanations': explanations,","\t// \t\t\t'match': matchlist,","\t// \t\t\t'explanations_detail': explanations_detail","\t// \t\t\t}","\t// },","","\t// simple intersection","\t// intersection:function(begin, end)","\t// {","\t// \tif ((begin[0]<=end[0])&&(begin[1]>=end[0]))","\t// \t\treturn true","\t// \tif ((begin[0]>=end[0])&&(begin[0]<=end[1]))","\t// \t\treturn true","\t// \treturn false","\t// },","\t"],"l":{"1":1,"2":1,"3":1,"11":1,"12":0,"13":0,"15":0,"16":0,"17":0,"20":1,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"46":0,"47":0,"48":0,"50":0,"51":0,"52":0,"53":0,"54":0,"56":0,"57":0,"58":0,"61":0,"62":0,"63":0,"64":0,"65":0,"68":0,"69":0,"70":0,"72":0,"73":0,"87":0,"88":0,"90":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"102":0,"103":0,"105":0,"106":0,"108":0,"109":0,"110":0,"111":0,"112":0,"115":0,"116":0,"117":0,"120":0,"121":0,"123":0,"126":0,"128":0,"129":0,"130":0,"131":0,"132":0,"135":0,"136":0,"137":0,"139":0,"142":0,"144":0,"146":0,"148":0,"150":0,"153":0,"154":0,"156":0,"157":0,"159":0,"164":0,"166":0,"167":0,"168":0,"170":0,"173":0,"174":0,"175":0,"177":0,"182":0,"183":0,"185":0,"187":0,"189":0,"190":0,"192":0,"195":0,"196":0,"197":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"229":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/utils/partitions.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/utils/partitions.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1,"31":0,"32":0,"33":0,"34":0,"35":0,"36":1,"37":0,"38":0,"39":0,"40":0,"41":0,"42":1,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":1,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":20},"end":{"line":18,"column":66}}},"2":{"name":"(anonymous_2)","line":36,"loc":{"start":{"line":36,"column":21},"end":{"line":36,"column":66}}},"3":{"name":"(anonymous_3)","line":53,"loc":{"start":{"line":53,"column":40},"end":{"line":53,"column":91}}},"4":{"name":"(anonymous_4)","line":81,"loc":{"start":{"line":81,"column":32},"end":{"line":81,"column":77}}},"5":{"name":"(anonymous_5)","line":91,"loc":{"start":{"line":91,"column":30},"end":{"line":91,"column":75}}},"6":{"name":"(anonymous_6)","line":102,"loc":{"start":{"line":102,"column":26},"end":{"line":102,"column":73}}},"7":{"name":"(anonymous_7)","line":115,"loc":{"start":{"line":115,"column":32},"end":{"line":115,"column":43}}},"8":{"name":"(anonymous_8)","line":117,"loc":{"start":{"line":117,"column":18},"end":{"line":117,"column":44}}},"9":{"name":"(anonymous_9)","line":119,"loc":{"start":{"line":119,"column":17},"end":{"line":119,"column":44}}},"10":{"name":"(anonymous_10)","line":130,"loc":{"start":{"line":130,"column":31},"end":{"line":130,"column":75}}},"11":{"name":"(anonymous_11)","line":141,"loc":{"start":{"line":141,"column":31},"end":{"line":141,"column":42}}},"12":{"name":"(anonymous_12)","line":143,"loc":{"start":{"line":143,"column":19},"end":{"line":143,"column":45}}},"13":{"name":"(anonymous_13)","line":145,"loc":{"start":{"line":145,"column":16},"end":{"line":145,"column":43}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":32}},"2":{"start":{"line":18,"column":0},"end":{"line":23,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":57}},"4":{"start":{"line":20,"column":2},"end":{"line":20,"column":64}},"5":{"start":{"line":21,"column":2},"end":{"line":21,"column":30}},"6":{"start":{"line":22,"column":2},"end":{"line":22,"column":42}},"7":{"start":{"line":36,"column":0},"end":{"line":45,"column":1}},"8":{"start":{"line":37,"column":1},"end":{"line":37,"column":42}},"9":{"start":{"line":38,"column":1},"end":{"line":38,"column":53}},"10":{"start":{"line":40,"column":1},"end":{"line":44,"column":2}},"11":{"start":{"line":41,"column":2},"end":{"line":41,"column":45}},"12":{"start":{"line":42,"column":2},"end":{"line":42,"column":73}},"13":{"start":{"line":43,"column":2},"end":{"line":43,"column":56}},"14":{"start":{"line":53,"column":0},"end":{"line":79,"column":1}},"15":{"start":{"line":55,"column":1},"end":{"line":56,"column":44}},"16":{"start":{"line":56,"column":2},"end":{"line":56,"column":44}},"17":{"start":{"line":58,"column":1},"end":{"line":59,"column":54}},"18":{"start":{"line":59,"column":2},"end":{"line":59,"column":54}},"19":{"start":{"line":61,"column":1},"end":{"line":62,"column":52}},"20":{"start":{"line":62,"column":2},"end":{"line":62,"column":52}},"21":{"start":{"line":64,"column":1},"end":{"line":64,"column":53}},"22":{"start":{"line":66,"column":1},"end":{"line":66,"column":39}},"23":{"start":{"line":68,"column":1},"end":{"line":77,"column":2}},"24":{"start":{"line":69,"column":2},"end":{"line":69,"column":45}},"25":{"start":{"line":70,"column":2},"end":{"line":70,"column":73}},"26":{"start":{"line":72,"column":2},"end":{"line":76,"column":4}},"27":{"start":{"line":74,"column":4},"end":{"line":74,"column":37}},"28":{"start":{"line":75,"column":4},"end":{"line":75,"column":35}},"29":{"start":{"line":78,"column":1},"end":{"line":78,"column":14}},"30":{"start":{"line":81,"column":0},"end":{"line":89,"column":1}},"31":{"start":{"line":82,"column":1},"end":{"line":82,"column":53}},"32":{"start":{"line":84,"column":1},"end":{"line":88,"column":2}},"33":{"start":{"line":85,"column":2},"end":{"line":85,"column":45}},"34":{"start":{"line":86,"column":2},"end":{"line":86,"column":73}},"35":{"start":{"line":87,"column":2},"end":{"line":87,"column":56}},"36":{"start":{"line":91,"column":0},"end":{"line":99,"column":1}},"37":{"start":{"line":92,"column":1},"end":{"line":92,"column":53}},"38":{"start":{"line":94,"column":1},"end":{"line":98,"column":2}},"39":{"start":{"line":95,"column":2},"end":{"line":95,"column":45}},"40":{"start":{"line":96,"column":2},"end":{"line":96,"column":73}},"41":{"start":{"line":97,"column":2},"end":{"line":97,"column":56}},"42":{"start":{"line":102,"column":0},"end":{"line":127,"column":1}},"43":{"start":{"line":104,"column":1},"end":{"line":104,"column":56}},"44":{"start":{"line":105,"column":1},"end":{"line":105,"column":55}},"45":{"start":{"line":107,"column":1},"end":{"line":126,"column":2}},"46":{"start":{"line":108,"column":2},"end":{"line":108,"column":45}},"47":{"start":{"line":110,"column":2},"end":{"line":110,"column":53}},"48":{"start":{"line":112,"column":2},"end":{"line":112,"column":15}},"49":{"start":{"line":113,"column":2},"end":{"line":113,"column":16}},"50":{"start":{"line":115,"column":2},"end":{"line":115,"column":62}},"51":{"start":{"line":115,"column":45},"end":{"line":115,"column":60}},"52":{"start":{"line":117,"column":2},"end":{"line":122,"column":10}},"53":{"start":{"line":118,"column":3},"end":{"line":118,"column":63}},"54":{"start":{"line":119,"column":3},"end":{"line":121,"column":11}},"55":{"start":{"line":120,"column":4},"end":{"line":120,"column":26}},"56":{"start":{"line":125,"column":2},"end":{"line":125,"column":36}},"57":{"start":{"line":130,"column":0},"end":{"line":151,"column":1}},"58":{"start":{"line":132,"column":1},"end":{"line":132,"column":56}},"59":{"start":{"line":133,"column":1},"end":{"line":133,"column":55}},"60":{"start":{"line":135,"column":1},"end":{"line":135,"column":38}},"61":{"start":{"line":138,"column":1},"end":{"line":138,"column":14}},"62":{"start":{"line":139,"column":1},"end":{"line":139,"column":15}},"63":{"start":{"line":141,"column":1},"end":{"line":141,"column":61}},"64":{"start":{"line":141,"column":44},"end":{"line":141,"column":59}},"65":{"start":{"line":143,"column":1},"end":{"line":148,"column":9}},"66":{"start":{"line":144,"column":2},"end":{"line":144,"column":62}},"67":{"start":{"line":145,"column":2},"end":{"line":147,"column":10}},"68":{"start":{"line":146,"column":3},"end":{"line":146,"column":25}},"69":{"start":{"line":150,"column":1},"end":{"line":150,"column":38}}},"branchMap":{"1":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},{"start":{"line":55,"column":1},"end":{"line":55,"column":1}}]},"2":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":1},"end":{"line":58,"column":1}},{"start":{"line":58,"column":1},"end":{"line":58,"column":1}}]},"3":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},{"start":{"line":61,"column":1},"end":{"line":61,"column":1}}]},"4":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":2},"end":{"line":72,"column":2}},{"start":{"line":72,"column":2},"end":{"line":72,"column":2}}]}},"code":["/**"," * Utilities for partitioning datasets of documents for training and testing."," * "," * @author Erel Segal-haLevi"," * @since 2013-06"," */","var _ = require(\"underscore\")._;","","","/**"," * Create a single partition of the given dataset."," *"," * @param dataset an array."," * @param testSetStart an index into the array."," * @param testSetCount int - the num of samples in the test set, starting from testSetStart."," * @return an object {train: trainSet, test: testSet}s"," */","exports.partition = function(dataset, testSetStart, testSetCount) {","\t\tvar datasetclone = JSON.parse(JSON.stringify(dataset));","\t\tvar testSet = datasetclone.splice(testSetStart, testSetCount);","\t\tvar trainSet = datasetclone; // without the test-set","\t\treturn {train: trainSet, test: testSet};","}","","/**"," * Create several different partitions of the given dataset to train and test."," * Useful for cross-validation. "," * "," * @param dataset any array."," * @param numOfPartitions number of different partitions to generate."," * @param callback a function to call for each partition."," * "," * @return an object: {train: [array-for-train], test: [array-for-test]}"," * @note code adapted from Heather Arthur:  https://github.com/harthur/classifier/blob/master/test/cross-validation/cross-validate.js"," */","exports.partitions = function(dataset, numOfPartitions, callback) {","\tvar shuffledDataset = _.shuffle(dataset);","\tvar testSetCount = dataset.length / numOfPartitions;","\t","\tfor (var iPartition=0; iPartition<numOfPartitions; ++iPartition) {","\t\tvar testSetStart = iPartition*testSetCount;","\t\tvar partition = exports.partition(dataset, testSetStart, testSetCount);","\t\tcallback(partition.train, partition.test, iPartition);","\t}","}","","/**"," * Create several different partitions of the given dataset to train and test without doing shuffling"," * Useful for cross-validation in Threshold classifier."," * ","*/","","exports.partitions_consistent_by_fold = function(dataset, numOfPartitions, partitionIndex) {","","\tif (!_.isArray(dataset))","\t\tthrow new Error(\"dataset is not an array\")","","\tif (_.isUndefined(numOfPartitions))","\t\tthrow new Error(\"numOfPartitions \"+ numOfPartitions)","","\tif (_.isUndefined(partitionIndex))","\t\tthrow new Error(\"partitionIndex \"+ partitionIndex)","","\tvar testSetCount = dataset.length / numOfPartitions;","","\tvar result = {'train': [], 'test': []}","\t","\tfor (var iPartition=0; iPartition<numOfPartitions; ++iPartition) {","\t\tvar testSetStart = iPartition*testSetCount;","\t\tvar partition = exports.partition(dataset, testSetStart, testSetCount);","","\t\tif (iPartition == partitionIndex)","\t\t\t{","\t\t\t\tresult['train'] = partition.train","\t\t\t\tresult['test'] = partition.test","\t\t\t}","\t}","\treturn result","}","","exports.partitions_consistent = function(dataset, numOfPartitions, callback) {","\tvar testSetCount = dataset.length / numOfPartitions;","\t","\tfor (var iPartition=0; iPartition<numOfPartitions; ++iPartition) {","\t\tvar testSetStart = iPartition*testSetCount;","\t\tvar partition = exports.partition(dataset, testSetStart, testSetCount);","\t\tcallback(partition.train, partition.test, iPartition);","\t}","}","","exports.partitions_reverese = function(dataset, numOfPartitions, callback) {","\tvar testSetCount = dataset.length / numOfPartitions;","\t","\tfor (var iPartition=0; iPartition<numOfPartitions; ++iPartition) {","\t\tvar testSetStart = iPartition*testSetCount;","\t\tvar partition = exports.partition(dataset, testSetStart, testSetCount);","\t\tcallback(partition.test, partition.train, iPartition);","\t}","}","","","exports.partitions_hash = function(datasetor, numOfPartitions, callback) {","","\tvar count = datasetor[Object.keys(datasetor)[0]].length","\tvar testSetCount = Math.floor(count / numOfPartitions)","","\tfor (var iPartition=0; iPartition<numOfPartitions; ++iPartition) {","\t\tvar testSetStart = iPartition*testSetCount;","","\t\tvar dataset = JSON.parse(JSON.stringify(datasetor))","","\t\tvar test = []","\t\tvar train = []","","\t\t_(count - testSetCount).times(function(n){ train.push([]) })","\t\t","\t\t_.each(dataset, function(value, key, list){ ","\t\t\ttest = test.concat(value.splice(testSetStart, testSetCount))","\t\t\t_.each(value, function(elem, key1, list1){ ","\t\t\t\ttrain[key1].push(elem)","\t\t\t}, this)","\t\t}, this)","\t","","\t\tcallback(train, test, iPartition);","\t}","}","","","exports.partitions_hash_fold = function(datasetor, numOfPartitions, fold ) {","","\tvar count = datasetor[Object.keys(datasetor)[0]].length","\tvar testSetCount = Math.floor(count / numOfPartitions)","","\tvar testSetStart = fold*testSetCount;","\t// var dataset = JSON.parse(JSON.stringify(datasetor))","","\tvar test = []","\tvar train = []","","\t_(count - testSetCount).times(function(n){ train.push([]) })","\t\t","\t_.each(datasetor, function(value, key, list){ ","\t\ttest = test.concat(value.splice(testSetStart, testSetCount))","\t\t_.each(value, function(elem, key1, list1){ ","\t\t\ttrain[key1].push(elem)","\t\t}, this)","\t}, this)","\t","\treturn {\"train\": train, \"test\": test}","}",""],"l":{"7":1,"18":1,"19":0,"20":0,"21":0,"22":0,"36":1,"37":0,"38":0,"40":0,"41":0,"42":0,"43":0,"53":1,"55":0,"56":0,"58":0,"59":0,"61":0,"62":0,"64":0,"66":0,"68":0,"69":0,"70":0,"72":0,"74":0,"75":0,"78":0,"81":1,"82":0,"84":0,"85":0,"86":0,"87":0,"91":1,"92":0,"94":0,"95":0,"96":0,"97":0,"102":1,"104":0,"105":0,"107":0,"108":0,"110":0,"112":0,"113":0,"115":0,"117":0,"118":0,"119":0,"120":0,"125":0,"130":1,"132":0,"133":0,"135":0,"138":0,"139":0,"141":0,"143":0,"144":0,"145":0,"146":0,"150":0}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/utils/list.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/utils/list.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1,"31":0,"32":0,"33":0,"34":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"(anonymous_1)","line":10,"loc":{"start":{"line":10,"column":18},"end":{"line":10,"column":35}}},"2":{"name":"(anonymous_2)","line":11,"loc":{"start":{"line":11,"column":18},"end":{"line":11,"column":32}}},"3":{"name":"(anonymous_3)","line":19,"loc":{"start":{"line":19,"column":19},"end":{"line":20,"column":1}}},"4":{"name":"(anonymous_4)","line":21,"loc":{"start":{"line":21,"column":23},"end":{"line":21,"column":42}}},"5":{"name":"(anonymous_5)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":43}}},"6":{"name":"(anonymous_6)","line":28,"loc":{"start":{"line":28,"column":18},"end":{"line":29,"column":1}}},"7":{"name":"(anonymous_7)","line":30,"loc":{"start":{"line":30,"column":23},"end":{"line":30,"column":42}}},"8":{"name":"(anonymous_8)","line":36,"loc":{"start":{"line":36,"column":20},"end":{"line":37,"column":1}}},"9":{"name":"(anonymous_9)","line":59,"loc":{"start":{"line":59,"column":23},"end":{"line":60,"column":1}}},"10":{"name":"(anonymous_10)","line":62,"loc":{"start":{"line":62,"column":13},"end":{"line":62,"column":39}}}},"statementMap":{"1":{"start":{"line":6,"column":0},"end":{"line":6,"column":30}},"2":{"start":{"line":10,"column":0},"end":{"line":17,"column":2}},"3":{"start":{"line":11,"column":6},"end":{"line":11,"column":50}},"4":{"start":{"line":11,"column":33},"end":{"line":11,"column":46}},"5":{"start":{"line":12,"column":5},"end":{"line":12,"column":44}},"6":{"start":{"line":13,"column":5},"end":{"line":16,"column":54}},"7":{"start":{"line":14,"column":9},"end":{"line":14,"column":29}},"8":{"start":{"line":16,"column":9},"end":{"line":16,"column":54}},"9":{"start":{"line":19,"column":0},"end":{"line":26,"column":2}},"10":{"start":{"line":21,"column":2},"end":{"line":21,"column":69}},"11":{"start":{"line":21,"column":44},"end":{"line":21,"column":62}},"12":{"start":{"line":22,"column":2},"end":{"line":22,"column":23}},"13":{"start":{"line":23,"column":2},"end":{"line":23,"column":74}},"14":{"start":{"line":23,"column":45},"end":{"line":23,"column":67}},"15":{"start":{"line":24,"column":2},"end":{"line":24,"column":25}},"16":{"start":{"line":25,"column":2},"end":{"line":25,"column":21}},"17":{"start":{"line":28,"column":0},"end":{"line":32,"column":2}},"18":{"start":{"line":30,"column":2},"end":{"line":30,"column":69}},"19":{"start":{"line":30,"column":44},"end":{"line":30,"column":62}},"20":{"start":{"line":31,"column":2},"end":{"line":31,"column":24}},"21":{"start":{"line":36,"column":0},"end":{"line":57,"column":2}},"22":{"start":{"line":38,"column":2},"end":{"line":39,"column":14}},"23":{"start":{"line":39,"column":3},"end":{"line":39,"column":14}},"24":{"start":{"line":43,"column":2},"end":{"line":46,"column":24}},"25":{"start":{"line":45,"column":2},"end":{"line":46,"column":24}},"26":{"start":{"line":46,"column":3},"end":{"line":46,"column":24}},"27":{"start":{"line":48,"column":2},"end":{"line":51,"column":15}},"28":{"start":{"line":49,"column":3},"end":{"line":49,"column":17}},"29":{"start":{"line":51,"column":3},"end":{"line":51,"column":15}},"30":{"start":{"line":59,"column":0},"end":{"line":66,"column":2}},"31":{"start":{"line":61,"column":1},"end":{"line":61,"column":10}},"32":{"start":{"line":62,"column":1},"end":{"line":64,"column":4}},"33":{"start":{"line":63,"column":2},"end":{"line":63,"column":27}},"34":{"start":{"line":65,"column":1},"end":{"line":65,"column":12}}},"branchMap":{"1":{"line":13,"type":"if","locations":[{"start":{"line":13,"column":5},"end":{"line":13,"column":5}},{"start":{"line":13,"column":5},"end":{"line":13,"column":5}}]},"2":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":2},"end":{"line":38,"column":2}},{"start":{"line":38,"column":2},"end":{"line":38,"column":2}}]},"3":{"line":38,"type":"binary-expr","locations":[{"start":{"line":38,"column":7},"end":{"line":38,"column":21}},{"start":{"line":38,"column":27},"end":{"line":38,"column":45}},{"start":{"line":38,"column":51},"end":{"line":38,"column":78}}]},"4":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":2},"end":{"line":43,"column":2}},{"start":{"line":43,"column":2},"end":{"line":43,"column":2}}]},"5":{"line":43,"type":"binary-expr","locations":[{"start":{"line":43,"column":7},"end":{"line":43,"column":24}},{"start":{"line":43,"column":27},"end":{"line":43,"column":46}}]},"6":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":2},"end":{"line":45,"column":2}},{"start":{"line":45,"column":2},"end":{"line":45,"column":2}}]},"7":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":2},"end":{"line":48,"column":2}},{"start":{"line":48,"column":2},"end":{"line":48,"column":2}}]}},"code":["/**"," * Utilities for lists"," * "," * @author Vasily Konovalov"," */","var _ = require('underscore');","","// Calculating the median of an array basically involves sorting the array and picking the middle number. ","// If it’s an even amount of numbers you take the two numbers in the middle and average them.","exports.median =  function(values) {"," \t    values.sort(function(a,b) {return a - b;} );","\t    var half = Math.floor(values.length/2);","\t    if(values.length % 2)","\t        return values[half];","\t    else","\t        return (values[half-1] + values[half]) / 2.0;","\t}","","exports.variance = function(list)","\t{","\t\tsum = _.reduce(list, function(memo, num){ return memo + num; }, 0);","\t\texp = sum/list.length","\t\tsum2 = _.reduce(list, function(memo, num){ return memo + num*num; }, 0);","\t\texp2 = sum2/list.length","\t\treturn exp2-exp*exp","\t}","","exports.average = function(list)","\t{","\t\tsum = _.reduce(list, function(memo, num){ return memo + num; }, 0);","\t\treturn sum/list.length","\t}","","// @input - list ","// @output - embedded list","exports.listembed = function(label)","\t{","\t\tif ((label === null) || (label == undefined) || (typeof label == 'undefined'))","\t\t\treturn [[]]","\t\t// if (typeof label != 'undefined')","\t\t// else","\t\t// {","\t\tif ((_.isObject(label))&&!(_.isArray(label)))","\t\t// if ('classes' in JSON.parse(label))","\t\tif ('classes' in label)","\t\t\tlabel = label.classes","","\t\tif (!(label[0] instanceof Array))","\t\t\treturn [label]","\t\telse ","\t\t\treturn label","\t\t// }","\t\t// else","\t\t// {","\t\t\t// return [label]","\t\t// }","\t}","","exports.clonedataset = function(set)","\t{","\tset1 = []","\t_.each(set, function(value, key, list){","\t\tset1.push(_.clone(value))","\t\t})","\treturn set1","\t}","",""],"l":{"6":1,"10":1,"11":0,"12":0,"13":0,"14":0,"16":0,"19":1,"21":0,"22":0,"23":0,"24":0,"25":0,"28":1,"30":0,"31":0,"36":1,"38":0,"39":0,"43":0,"45":0,"46":0,"48":0,"49":0,"51":0,"59":1,"61":0,"62":0,"63":0,"65":0}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/multilabel/Adaboost.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/multilabel/Adaboost.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":15},"end":{"line":23,"column":30}}},"2":{"name":"(anonymous_2)","line":39,"loc":{"start":{"line":39,"column":23},"end":{"line":39,"column":34}}},"3":{"name":"(anonymous_3)","line":50,"loc":{"start":{"line":50,"column":14},"end":{"line":50,"column":39}}},"4":{"name":"(anonymous_4)","line":54,"loc":{"start":{"line":54,"column":14},"end":{"line":54,"column":32}}},"5":{"name":"(anonymous_5)","line":57,"loc":{"start":{"line":57,"column":13},"end":{"line":57,"column":23}}},"6":{"name":"(anonymous_6)","line":58,"loc":{"start":{"line":58,"column":18},"end":{"line":58,"column":44}}},"7":{"name":"(anonymous_7)","line":59,"loc":{"start":{"line":59,"column":27},"end":{"line":59,"column":54}}},"8":{"name":"(anonymous_8)","line":68,"loc":{"start":{"line":68,"column":27},"end":{"line":68,"column":42}}},"9":{"name":"(anonymous_9)","line":70,"loc":{"start":{"line":70,"column":28},"end":{"line":70,"column":55}}},"10":{"name":"(anonymous_10)","line":78,"loc":{"start":{"line":78,"column":37},"end":{"line":78,"column":48}}},"11":{"name":"(anonymous_11)","line":91,"loc":{"start":{"line":91,"column":14},"end":{"line":91,"column":44}}},"12":{"name":"(anonymous_12)","line":93,"loc":{"start":{"line":93,"column":20},"end":{"line":93,"column":46}}},"13":{"name":"(anonymous_13)","line":106,"loc":{"start":{"line":106,"column":11},"end":{"line":106,"column":37}}},"14":{"name":"(anonymous_14)","line":124,"loc":{"start":{"line":124,"column":17},"end":{"line":124,"column":37}}},"15":{"name":"(anonymous_15)","line":132,"loc":{"start":{"line":132,"column":16},"end":{"line":132,"column":27}}},"16":{"name":"(anonymous_16)","line":135,"loc":{"start":{"line":135,"column":17},"end":{"line":135,"column":35}}},"17":{"name":"(anonymous_17)","line":139,"loc":{"start":{"line":139,"column":10},"end":{"line":139,"column":21}}},"18":{"name":"(anonymous_18)","line":142,"loc":{"start":{"line":142,"column":12},"end":{"line":142,"column":27}}},"19":{"name":"(anonymous_19)","line":145,"loc":{"start":{"line":145,"column":24},"end":{"line":145,"column":53}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":39}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":41}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":32}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":23}},"5":{"start":{"line":5,"column":0},"end":{"line":5,"column":51}},"6":{"start":{"line":6,"column":0},"end":{"line":6,"column":30}},"7":{"start":{"line":7,"column":0},"end":{"line":7,"column":48}},"8":{"start":{"line":23,"column":0},"end":{"line":37,"column":1}},"9":{"start":{"line":24,"column":1},"end":{"line":28,"column":2}},"10":{"start":{"line":25,"column":2},"end":{"line":25,"column":54}},"11":{"start":{"line":26,"column":2},"end":{"line":26,"column":20}},"12":{"start":{"line":27,"column":2},"end":{"line":27,"column":23}},"13":{"start":{"line":30,"column":1},"end":{"line":30,"column":24}},"14":{"start":{"line":31,"column":1},"end":{"line":31,"column":27}},"15":{"start":{"line":32,"column":1},"end":{"line":32,"column":56}},"16":{"start":{"line":33,"column":1},"end":{"line":33,"column":31}},"17":{"start":{"line":35,"column":1},"end":{"line":35,"column":43}},"18":{"start":{"line":36,"column":1},"end":{"line":36,"column":42}},"19":{"start":{"line":39,"column":0},"end":{"line":46,"column":1}},"20":{"start":{"line":40,"column":4},"end":{"line":45,"column":5}},"21":{"start":{"line":41,"column":8},"end":{"line":41,"column":43}},"22":{"start":{"line":42,"column":8},"end":{"line":42,"column":20}},"23":{"start":{"line":44,"column":8},"end":{"line":44,"column":21}},"24":{"start":{"line":48,"column":0},"end":{"line":148,"column":1}},"25":{"start":{"line":56,"column":2},"end":{"line":56,"column":20}},"26":{"start":{"line":57,"column":2},"end":{"line":57,"column":54}},"27":{"start":{"line":57,"column":24},"end":{"line":57,"column":52}},"28":{"start":{"line":58,"column":2},"end":{"line":62,"column":11}},"29":{"start":{"line":59,"column":3},"end":{"line":61,"column":10}},"30":{"start":{"line":60,"column":4},"end":{"line":60,"column":51}},"31":{"start":{"line":64,"column":2},"end":{"line":64,"column":44}},"32":{"start":{"line":66,"column":2},"end":{"line":66,"column":48}},"33":{"start":{"line":66,"column":39},"end":{"line":66,"column":47}},"34":{"start":{"line":68,"column":2},"end":{"line":75,"column":11}},"35":{"start":{"line":69,"column":3},"end":{"line":69,"column":14}},"36":{"start":{"line":70,"column":4},"end":{"line":72,"column":12}},"37":{"start":{"line":71,"column":4},"end":{"line":71,"column":74}},"38":{"start":{"line":74,"column":3},"end":{"line":74,"column":52}},"39":{"start":{"line":77,"column":2},"end":{"line":77,"column":9}},"40":{"start":{"line":78,"column":2},"end":{"line":78,"column":63}},"41":{"start":{"line":78,"column":49},"end":{"line":78,"column":61}},"42":{"start":{"line":80,"column":4},"end":{"line":81,"column":40}},"43":{"start":{"line":80,"column":9},"end":{"line":80,"column":50}},"44":{"start":{"line":81,"column":14},"end":{"line":81,"column":39}},"45":{"start":{"line":83,"column":2},"end":{"line":83,"column":108}},"46":{"start":{"line":84,"column":3},"end":{"line":84,"column":71}},"47":{"start":{"line":86,"column":2},"end":{"line":86,"column":10}},"48":{"start":{"line":87,"column":2},"end":{"line":87,"column":76}},"49":{"start":{"line":88,"column":2},"end":{"line":88,"column":32}},"50":{"start":{"line":89,"column":2},"end":{"line":89,"column":31}},"51":{"start":{"line":91,"column":2},"end":{"line":100,"column":10}},"52":{"start":{"line":92,"column":3},"end":{"line":92,"column":11}},"53":{"start":{"line":93,"column":3},"end":{"line":97,"column":9}},"54":{"start":{"line":94,"column":5},"end":{"line":94,"column":43}},"55":{"start":{"line":94,"column":37},"end":{"line":94,"column":43}},"56":{"start":{"line":95,"column":8},"end":{"line":95,"column":88}},"57":{"start":{"line":99,"column":3},"end":{"line":99,"column":69}},"58":{"start":{"line":102,"column":2},"end":{"line":102,"column":95}},"59":{"start":{"line":103,"column":2},"end":{"line":103,"column":21}},"60":{"start":{"line":108,"column":2},"end":{"line":108,"column":68}},"61":{"start":{"line":108,"column":39},"end":{"line":108,"column":67}},"62":{"start":{"line":110,"column":2},"end":{"line":110,"column":93}},"63":{"start":{"line":111,"column":2},"end":{"line":111,"column":75}},"64":{"start":{"line":112,"column":2},"end":{"line":112,"column":216}},"65":{"start":{"line":113,"column":2},"end":{"line":113,"column":84}},"66":{"start":{"line":115,"column":2},"end":{"line":115,"column":36}},"67":{"start":{"line":117,"column":2},"end":{"line":117,"column":42}},"68":{"start":{"line":118,"column":2},"end":{"line":118,"column":23}},"69":{"start":{"line":120,"column":2},"end":{"line":120,"column":43}},"70":{"start":{"line":122,"column":2},"end":{"line":122,"column":14}},"71":{"start":{"line":124,"column":2},"end":{"line":127,"column":5}},"72":{"start":{"line":125,"column":3},"end":{"line":126,"column":37}},"73":{"start":{"line":126,"column":4},"end":{"line":126,"column":36}},"74":{"start":{"line":129,"column":2},"end":{"line":129,"column":16}},"75":{"start":{"line":136,"column":2},"end":{"line":136,"column":64}},"76":{"start":{"line":151,"column":0},"end":{"line":151,"column":26}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},{"start":{"line":24,"column":1},"end":{"line":24,"column":1}}]},"2":{"line":35,"type":"binary-expr","locations":[{"start":{"line":35,"column":21},"end":{"line":35,"column":38}},{"start":{"line":35,"column":42},"end":{"line":35,"column":43}}]},"3":{"line":36,"type":"binary-expr","locations":[{"start":{"line":36,"column":19},"end":{"line":36,"column":34}},{"start":{"line":36,"column":38},"end":{"line":36,"column":42}}]},"4":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":2},"end":{"line":66,"column":2}},{"start":{"line":66,"column":2},"end":{"line":66,"column":2}}]},"5":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":5},"end":{"line":94,"column":5}},{"start":{"line":94,"column":5},"end":{"line":94,"column":5}}]},"6":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":2},"end":{"line":108,"column":2}},{"start":{"line":108,"column":2},"end":{"line":108,"column":2}}]},"7":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":3},"end":{"line":125,"column":3}},{"start":{"line":125,"column":3},"end":{"line":125,"column":3}}]},"8":{"line":136,"type":"cond-expr","locations":[{"start":{"line":136,"column":32},"end":{"line":136,"column":38}},{"start":{"line":136,"column":40},"end":{"line":136,"column":62}}]}},"code":["var hash = require(\"../../utils/hash\");","var sprintf = require(\"sprintf\").sprintf;","var _ = require(\"underscore\")._;","var fs = require('fs');","var partitions = require('../../utils/partitions');","var crypto = require('crypto')","var execSync = require('child_process').execSync","/**"," * Adaptive Boosting (Adaboost) is a greedy search for a linear combination of "," * classifiers by overweighting the examples that are misclassified by each "," * classifier. icsiboost implements Adaboost over stumps (one-level decision trees) "," * on discrete and continuous attributes (words and real values). "," * See http://en.wikipedia.org/wiki/AdaBoost and the papers by Y. Freund and R. Schapire for more details."," * "," * @param opts"," *            ngram_length (optional) "," *            iterations (optional) "," *  "," * The class uses icsiboost open-source implementation of Boostexter"," * https://code.google.com/p/icsiboost/"," */","","var Adaboost = function(opts) {","\tif (!Adaboost.isInstalled()) {","\t\tvar msg = \"Cannot find the executable 'icsiboost'.\";","\t\tconsole.error(msg)","\t\tthrow new Error(msg); ","\t}","","\tthis.set_of_labels = []","\tthis.text_expert = 'ngram'","\tthis.assigner = crypto.randomBytes(20).toString('hex');","\tthis.folder = \"icsiboost_data\"","","\tthis.ngram_length = opts.ngram_length || 2","\tthis.iterations = opts.iterations || 2000","}","","Adaboost.isInstalled = function() {","    try {","        var result = execSync(\"icsiboost\");","        return true;","    } catch (err) {","        return false;","    }","}","","Adaboost.prototype = {","","\ttrainOnline: function(sample, labels) {","\t","\t},","","\ttrainBatch : function(dataset) {","","\t\tset_of_labels = []","\t\t_.times(1, function(){dataset = _.shuffle(dataset)})","\t\t_.each(dataset, function(value, key, list){ ","\t\t\t_.each(value['output'], function(value1, key, list){","\t\t\t\tset_of_labels.push(this.stringifyClass(value1))","\t\t\t},this)","\t\t}, this);","","\t\tthis.set_of_labels = _.uniq(set_of_labels)","","\t\tif (this.set_of_labels.length == 1) {return 0}","","\t\tdataset = _.map(dataset, function(value){ ","\t\t\tvalues = []","\t\t\t\t_.each(value['output'], function(value1, key, list){ ","\t\t\t\tvalues.push(this.set_of_labels.indexOf(this.stringifyClass(value1))+1)","\t\t\t}, this);","","\t\t\treturn {'input':value['input'], 'output': values}","\t\t}, this);","\t","\t\tar = []","\t\t_.times(this.set_of_labels.length, function(n){ar.push(n+1)})","","  \t\ttry {(!fs.statSync(this.folder).isDirectory())}","  \t\tcatch(e) {fs.mkdirSync(this.folder)}","  \t\t\t","\t\tnames = ar.join()+\".\\nsentence:text:expert_type=\"+this.text_expert+\" expert_length=\"+this.ngram_length+\".\"","\t \tfs.writeFileSync(\"./\"+this.folder+\"/\"+this.assigner+'.names', names)","","\t\tset = {}","\t\tdataset = partitions.partition(dataset, 1, Math.round(dataset.length*0.3))","\t\tset['data'] = dataset['train']","\t\tset['dev']  = dataset['test']\t","","\t\t_.each(set, function(valueset, key1, list){ ","\t\t\tstr = \"\"","\t\t\t_.each(valueset, function(value, key, list){","\t\t\t\t\tif (value['input'].length <= 1) return","\t    \t\t\tstr += value['input'].replace(/\\,/g,'') + ',' + value['output'].join(\" \")+ \".\\n\"","\t    \t\t\t//str += value['input']+ ',' + value['output'].join(\" \")+ \".\\n\"","\t    \t\t})   ","","\t\t\tfs.writeFileSync(\"./\"+this.folder+\"/\"+this.assigner+\".\"+key1, str)","\t\t}, this)","","\t\tvar result = execSync(\"icsiboost -S ./\"+this.folder+\"/\"+this.assigner+\" -n \"+this.iterations)","\t\tconsole.log(result)","\t},","","\tclassify: function(sample, explain) {","","\t\tif (this.set_of_labels.length == 1) {return this.set_of_labels[0]}","","\t\tfs.writeFileSync(\"./\"+this.folder+\"/\"+this.assigner+\".test\", sample.replace(/\\,/g,'')+\"\\n\")","\t\tfs.writeFileSync(\"./\"+this.folder+\"/\"+this.assigner+\".test\", sample+\"\\n\")","\t\tvar result = execSync(\"icsiboost -S ./\"+this.folder+\"/\"+this.assigner +\" -W \"+this.ngram_length+\" -N \"+this.text_expert+\" -C < ./\"+this.folder+\"/\"+this.assigner+\".test > ./\"+this.folder+\"/\"+this.assigner+\".output\")","\t\tvar stats = fs.readFileSync(\"./\"+this.folder+\"/\"+this.assigner+\".output\", \"utf8\");","","\t\tset_of_labels = this.set_of_labels","","\t\tstats = stats.replace(/^\\s+|\\s+$/g, \"\");","\t\tar = stats.split(\" \")","","\t\tactual = ar.slice(ar.length/2, ar.length)","","\t\tactual1 = []","","\t\t_.each(actual, function(value, key){ ","\t\t\tif (value>0) {","\t\t\t\tactual1.push(set_of_labels[key])}","\t\t\t})","\t","\t\treturn actual1","\t},","\t","\tgetAllClasses: function() {","\t},","","\tstringifyClass: function (aClass) {","\t\treturn (_(aClass).isString()? aClass: JSON.stringify(aClass));","\t},","","\ttoJSON : function() {","\t},","","\tfromJSON : function(json) {","\t},","\t","\tsetFeatureLookupTable: function(featureLookupTable) {","\t","\t},","}","","","module.exports = Adaboost;","","// ./icsiboost  -C  -W 3 -N ngram  -S agent < agent.test","// ./icsiboost  -S agent -n 1500",""],"l":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"23":1,"24":0,"25":0,"26":0,"27":0,"30":0,"31":0,"32":0,"33":0,"35":0,"36":0,"39":1,"40":0,"41":0,"42":0,"44":0,"48":1,"56":0,"57":0,"58":0,"59":0,"60":0,"64":0,"66":0,"68":0,"69":0,"70":0,"71":0,"74":0,"77":0,"78":0,"80":0,"81":0,"83":0,"84":0,"86":0,"87":0,"88":0,"89":0,"91":0,"92":0,"93":0,"94":0,"95":0,"99":0,"102":0,"103":0,"108":0,"110":0,"111":0,"112":0,"113":0,"115":0,"117":0,"118":0,"120":0,"122":0,"124":0,"125":0,"126":0,"129":0,"136":0,"151":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/multilabel/PartialClassification.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/multilabel/PartialClassification.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":28},"end":{"line":16,"column":43}}},"2":{"name":"(anonymous_2)","line":35,"loc":{"start":{"line":35,"column":23},"end":{"line":35,"column":79}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":30},"end":{"line":37,"column":41}}},"4":{"name":"(anonymous_4)","line":44,"loc":{"start":{"line":44,"column":14},"end":{"line":44,"column":39}}},"5":{"name":"(anonymous_5)","line":48,"loc":{"start":{"line":48,"column":14},"end":{"line":48,"column":32}}},"6":{"name":"(anonymous_6)","line":51,"loc":{"start":{"line":51,"column":18},"end":{"line":51,"column":44}}},"7":{"name":"(anonymous_7)","line":56,"loc":{"start":{"line":56,"column":30},"end":{"line":56,"column":41}}},"8":{"name":"(anonymous_8)","line":58,"loc":{"start":{"line":58,"column":19},"end":{"line":58,"column":45}}},"9":{"name":"(anonymous_9)","line":76,"loc":{"start":{"line":76,"column":11},"end":{"line":76,"column":56}}},"10":{"name":"(anonymous_10)","line":82,"loc":{"start":{"line":82,"column":27},"end":{"line":82,"column":55}}},"11":{"name":"(anonymous_11)","line":97,"loc":{"start":{"line":97,"column":45},"end":{"line":97,"column":71}}},"12":{"name":"(anonymous_12)","line":101,"loc":{"start":{"line":101,"column":45},"end":{"line":101,"column":71}}},"13":{"name":"(anonymous_13)","line":134,"loc":{"start":{"line":134,"column":25},"end":{"line":134,"column":54}}},"14":{"name":"(anonymous_14)","line":135,"loc":{"start":{"line":135,"column":27},"end":{"line":135,"column":55}}},"15":{"name":"(anonymous_15)","line":140,"loc":{"start":{"line":140,"column":16},"end":{"line":140,"column":27}}},"16":{"name":"(anonymous_16)","line":144,"loc":{"start":{"line":144,"column":10},"end":{"line":144,"column":21}}},"17":{"name":"(anonymous_17)","line":148,"loc":{"start":{"line":148,"column":12},"end":{"line":148,"column":27}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":41}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":32}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":51}},"4":{"start":{"line":16,"column":0},"end":{"line":31,"column":1}},"5":{"start":{"line":18,"column":1},"end":{"line":18,"column":19}},"6":{"start":{"line":19,"column":1},"end":{"line":22,"column":2}},"7":{"start":{"line":20,"column":2},"end":{"line":20,"column":20}},"8":{"start":{"line":21,"column":2},"end":{"line":21,"column":59}},"9":{"start":{"line":24,"column":1},"end":{"line":27,"column":2}},"10":{"start":{"line":25,"column":2},"end":{"line":25,"column":20}},"11":{"start":{"line":26,"column":2},"end":{"line":26,"column":54}},"12":{"start":{"line":30,"column":1},"end":{"line":30,"column":101}},"13":{"start":{"line":33,"column":0},"end":{"line":152,"column":1}},"14":{"start":{"line":36,"column":2},"end":{"line":36,"column":17}},"15":{"start":{"line":37,"column":1},"end":{"line":40,"column":5}},"16":{"start":{"line":38,"column":2},"end":{"line":38,"column":41}},"17":{"start":{"line":39,"column":2},"end":{"line":39,"column":27}},"18":{"start":{"line":41,"column":2},"end":{"line":41,"column":19}},"19":{"start":{"line":45,"column":2},"end":{"line":45,"column":76}},"20":{"start":{"line":49,"column":2},"end":{"line":49,"column":24}},"21":{"start":{"line":51,"column":2},"end":{"line":53,"column":11}},"22":{"start":{"line":52,"column":3},"end":{"line":52,"column":79}},"23":{"start":{"line":56,"column":2},"end":{"line":72,"column":11}},"24":{"start":{"line":57,"column":3},"end":{"line":57,"column":12}},"25":{"start":{"line":58,"column":3},"end":{"line":66,"column":11}},"26":{"start":{"line":59,"column":4},"end":{"line":64,"column":6}},"27":{"start":{"line":61,"column":6},"end":{"line":61,"column":29}},"28":{"start":{"line":62,"column":6},"end":{"line":62,"column":40}},"29":{"start":{"line":63,"column":6},"end":{"line":63,"column":23}},"30":{"start":{"line":69,"column":3},"end":{"line":69,"column":38}},"31":{"start":{"line":78,"column":2},"end":{"line":78,"column":17}},"32":{"start":{"line":79,"column":2},"end":{"line":79,"column":22}},"33":{"start":{"line":80,"column":2},"end":{"line":80,"column":17}},"34":{"start":{"line":82,"column":3},"end":{"line":90,"column":5}},"35":{"start":{"line":83,"column":4},"end":{"line":83,"column":68}},"36":{"start":{"line":84,"column":5},"end":{"line":87,"column":23}},"37":{"start":{"line":85,"column":6},"end":{"line":85,"column":32}},"38":{"start":{"line":87,"column":5},"end":{"line":87,"column":23}},"39":{"start":{"line":88,"column":5},"end":{"line":88,"column":40}},"40":{"start":{"line":89,"column":5},"end":{"line":89,"column":44}},"41":{"start":{"line":92,"column":2},"end":{"line":111,"column":4}},"42":{"start":{"line":94,"column":4},"end":{"line":94,"column":21}},"43":{"start":{"line":95,"column":4},"end":{"line":95,"column":21}},"44":{"start":{"line":97,"column":4},"end":{"line":99,"column":13}},"45":{"start":{"line":98,"column":5},"end":{"line":98,"column":41}},"46":{"start":{"line":101,"column":4},"end":{"line":103,"column":13}},"47":{"start":{"line":102,"column":5},"end":{"line":102,"column":41}},"48":{"start":{"line":106,"column":3},"end":{"line":110,"column":5}},"49":{"start":{"line":107,"column":4},"end":{"line":110,"column":5}},"50":{"start":{"line":113,"column":2},"end":{"line":119,"column":11}},"51":{"start":{"line":135,"column":3},"end":{"line":137,"column":5}},"52":{"start":{"line":136,"column":4},"end":{"line":136,"column":53}},"53":{"start":{"line":141,"column":2},"end":{"line":141,"column":64}},"54":{"start":{"line":145,"column":2},"end":{"line":145,"column":64}},"55":{"start":{"line":149,"column":2},"end":{"line":149,"column":64}},"56":{"start":{"line":154,"column":0},"end":{"line":154,"column":39}}},"branchMap":{"1":{"line":18,"type":"binary-expr","locations":[{"start":{"line":18,"column":8},"end":{"line":18,"column":12}},{"start":{"line":18,"column":16},"end":{"line":18,"column":18}}]},"2":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},{"start":{"line":19,"column":1},"end":{"line":19,"column":1}}]},"3":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},{"start":{"line":24,"column":1},"end":{"line":24,"column":1}}]},"4":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":4},"end":{"line":59,"column":4}},{"start":{"line":59,"column":4},"end":{"line":59,"column":4}}]},"5":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":5},"end":{"line":84,"column":5}},{"start":{"line":84,"column":5},"end":{"line":84,"column":5}}]},"6":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":2},"end":{"line":92,"column":2}},{"start":{"line":92,"column":2},"end":{"line":92,"column":2}}]},"7":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":3},"end":{"line":106,"column":3}},{"start":{"line":106,"column":3},"end":{"line":106,"column":3}}]},"8":{"line":113,"type":"cond-expr","locations":[{"start":{"line":114,"column":3},"end":{"line":118,"column":4}},{"start":{"line":119,"column":3},"end":{"line":119,"column":9}}]}},"code":["var sprintf = require(\"sprintf\").sprintf;","var _ = require(\"underscore\")._;","var multilabelutils = require('./multilabelutils');","","/**"," *  PartialClassification is a test classifier that learns and classifies the components"," * of the labels separately according to the splitLabel routine. One of the examples could be "," * classifying intent, attribute, value separately by three different classifiers."," * When performing test by trainAndTest module, there is a check for toFormat routine, if it exists"," * then pretest format converting occurs."," *"," * @author Vasily Konovalov"," * @since March 2014"," */","","var PartialClassification = function(opts) {","\t","\topts = opts || {};","\tif (!opts.multilabelClassifierType) {","\t\tconsole.dir(opts);","\t\tthrow new Error(\"opts.multilabelClassifierType is null\");","\t}","","\tif (!opts.numberofclassifiers) {","\t\tconsole.dir(opts);","\t\tthrow new Error(\"opts.numberofclassifiers is null\");","\t}","","\t// this.splitLabel = opts.splitLabel || function(label)      {return label.split(/@/);}","\tthis.classifier = this.intializeClassifiers(opts.numberofclassifiers, opts.multilabelClassifierType)","}","","PartialClassification.prototype = {","","\tintializeClassifiers: function(numberofclassifiers, multilabelClassifierType) {","\t\tclassifier = []","\t_(numberofclassifiers).times(function(n){ ","\t\tclassif = new multilabelClassifierType;","\t\tclassifier.push(classif);"," \t});"," \treturn classifier","\t},","","\ttrainOnline: function(sample, labels) {","\t\tthrow new Error(\"PartialClassification does not support online training\");","\t},","","\ttrainBatch : function(dataset) {","\t\tnum_of_classifiers = 0","","\t\t_.each(dataset, function(value, key, list){","\t\t\tnum_of_classifiers =  Math.max(num_of_classifiers, (value['output']).length)","\t\t}, this);","","\t\t\t","\t\t_(num_of_classifiers).times(function(n){","\t\t\tdata = []","\t\t\t_.each(dataset, function(value, key, list){","\t\t\t\tif (value.output.length - 1 >= n)","\t\t\t\t\t{","\t\t\t\t\t\tvalue1 = _.clone(value)","\t\t\t\t\t\tvalue1['output'] = value.output[n]","\t\t\t\t\t\tdata.push(value1)","\t\t\t\t\t}","","\t\t\t },this)","","\t\t\t// classifier = new this.multilabelClassifierType();","\t\t\tthis.classifier[n].trainBatch(data)","\t\t\t// classifier.trainBatch(data)","\t\t\t// this.classifier.push(classifier)","\t\t\t}, this)","\t","\t},","","\tclassify: function(sample, explain, continuous_output) {","\t\t\t\t","\t\tvar labels = []","\t\tvar explanation = []","\t\tvar scores = {}","\t\t","\t \t_.each(this.classifier, function(classif, key, list){","\t \t\tvar value = classif.classify(sample, explain, continuous_output)","\t \t \tif (explain>0)","\t \t \t\tlabels.push(value.classes)","\t \t \telse"," \t\t\t\tlabels.push(value)","\t \t \texplanation.push(value.explanation)","\t \t \tscores = _.extend(scores, value.scores)","\t \t})","","\t\tif (explain>0)","\t\t\t{","\t\t\t\tvar positive = {}","\t\t\t\tvar negative = {}","","\t\t\t\t_.each(_.pluck(explanation, 'positive'), function(value, key, list){ ","\t\t\t\t\tpositive = _.extend(positive, value)","\t\t\t\t\t}, this)","","\t\t\t\t_.each(_.pluck(explanation, 'negative'), function(value, key, list){ ","\t\t\t\t\tnegative = _.extend(negative, value)","\t\t\t\t\t}, this)","\t\t\t","","\t\t\tif (_.keys(negative)!=0)","\t\t\t\texplanation = {","\t\t\t\t\tpositive: positive, ","\t\t\t\t\tnegative: negative,","\t\t\t\t}","\t\t\t}","","\t\treturn (explain>0?","\t\t\t{","\t\t\t\tclasses: labels, ","\t\t\t\tscores: scores,","\t\t\t\texplanation: explanation","\t\t\t}:","\t\t\tlabels);","","\t\t","\t\t// console.log(JSON.stringify(explanation, null, 4))","\t\t// return (explain>0?","\t\t// \t{","\t\t// \t\tclasses: labels, ","\t\t// \t\tscores: scores,","\t\t// \t\texplanation: explanation","\t\t// \t}:","\t\t// \tlabels);",""," \t},","",""," \tsetFeatureLookupTable: function(featureLookupTable) {"," \t\t_.each(this.classifier, function(classif, key, list){","\t \t\tclassif.setFeatureLookupTable(featureLookupTable)","\t \t})"," \t},","\t","\tgetAllClasses: function() {","\t\tthrow new Error(\"No implementation in PartialClassification\");","\t},","","\ttoJSON : function() {","\t\tthrow new Error(\"No implementation in PartialClassification\");","\t},","","\tfromJSON : function(json) {","\t\tthrow new Error(\"No implementation in PartialClassification\");","\t},","\t","}","","module.exports = PartialClassification;","",""],"l":{"1":1,"2":1,"3":1,"16":1,"18":0,"19":0,"20":0,"21":0,"24":0,"25":0,"26":0,"30":0,"33":1,"36":0,"37":0,"38":0,"39":0,"41":0,"45":0,"49":0,"51":0,"52":0,"56":0,"57":0,"58":0,"59":0,"61":0,"62":0,"63":0,"69":0,"78":0,"79":0,"80":0,"82":0,"83":0,"84":0,"85":0,"87":0,"88":0,"89":0,"92":0,"94":0,"95":0,"97":0,"98":0,"101":0,"102":0,"106":0,"107":0,"113":0,"135":0,"136":0,"141":0,"145":0,"149":0,"154":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/EnhancedClassifier.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/EnhancedClassifier.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":1,"225":0,"226":1,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0},"fnMap":{"1":{"name":"(anonymous_1)","line":37,"loc":{"start":{"line":37,"column":25},"end":{"line":37,"column":40}}},"2":{"name":"(anonymous_2)","line":81,"loc":{"start":{"line":81,"column":22},"end":{"line":81,"column":50}}},"3":{"name":"(anonymous_3)","line":86,"loc":{"start":{"line":86,"column":16},"end":{"line":86,"column":38}}},"4":{"name":"(anonymous_4)","line":92,"loc":{"start":{"line":92,"column":39},"end":{"line":92,"column":84}}},"5":{"name":"(anonymous_5)","line":103,"loc":{"start":{"line":103,"column":24},"end":{"line":103,"column":53}}},"6":{"name":"(anonymous_6)","line":111,"loc":{"start":{"line":111,"column":22},"end":{"line":111,"column":49}}},"7":{"name":"(anonymous_7)","line":120,"loc":{"start":{"line":120,"column":19},"end":{"line":120,"column":36}}},"8":{"name":"(anonymous_8)","line":138,"loc":{"start":{"line":138,"column":19},"end":{"line":138,"column":54}}},"9":{"name":"(anonymous_9)","line":152,"loc":{"start":{"line":152,"column":17},"end":{"line":152,"column":32}}},"10":{"name":"(anonymous_10)","line":157,"loc":{"start":{"line":157,"column":20},"end":{"line":157,"column":39}}},"11":{"name":"(anonymous_11)","line":160,"loc":{"start":{"line":160,"column":18},"end":{"line":160,"column":43}}},"12":{"name":"(anonymous_12)","line":167,"loc":{"start":{"line":167,"column":25},"end":{"line":167,"column":42}}},"13":{"name":"(anonymous_13)","line":201,"loc":{"start":{"line":201,"column":18},"end":{"line":201,"column":37}}},"14":{"name":"(anonymous_14)","line":209,"loc":{"start":{"line":209,"column":16},"end":{"line":209,"column":35}}},"15":{"name":"(anonymous_15)","line":218,"loc":{"start":{"line":218,"column":20},"end":{"line":218,"column":64}}},"16":{"name":"(anonymous_16)","line":247,"loc":{"start":{"line":247,"column":14},"end":{"line":247,"column":40}}},"17":{"name":"(anonymous_17)","line":265,"loc":{"start":{"line":265,"column":13},"end":{"line":265,"column":31}}},"18":{"name":"(anonymous_18)","line":277,"loc":{"start":{"line":277,"column":25},"end":{"line":277,"column":41}}},"19":{"name":"(anonymous_19)","line":313,"loc":{"start":{"line":313,"column":18},"end":{"line":313,"column":34}}},"20":{"name":"(anonymous_20)","line":328,"loc":{"start":{"line":328,"column":15},"end":{"line":328,"column":60}}},"21":{"name":"(anonymous_21)","line":345,"loc":{"start":{"line":345,"column":17},"end":{"line":345,"column":32}}},"22":{"name":"(anonymous_22)","line":347,"loc":{"start":{"line":347,"column":24},"end":{"line":347,"column":40}}},"23":{"name":"(anonymous_23)","line":363,"loc":{"start":{"line":363,"column":11},"end":{"line":363,"column":86}}},"24":{"name":"(anonymous_24)","line":389,"loc":{"start":{"line":389,"column":17},"end":{"line":389,"column":32}}},"25":{"name":"(anonymous_25)","line":405,"loc":{"start":{"line":405,"column":42},"end":{"line":405,"column":53}}},"26":{"name":"(anonymous_26)","line":417,"loc":{"start":{"line":417,"column":26},"end":{"line":417,"column":42}}},"27":{"name":"(anonymous_27)","line":438,"loc":{"start":{"line":438,"column":33},"end":{"line":438,"column":44}}},"28":{"name":"(anonymous_28)","line":466,"loc":{"start":{"line":466,"column":10},"end":{"line":466,"column":21}}},"29":{"name":"(anonymous_29)","line":477,"loc":{"start":{"line":477,"column":15},"end":{"line":477,"column":34}}},"30":{"name":"(anonymous_30)","line":484,"loc":{"start":{"line":484,"column":35},"end":{"line":484,"column":51}}},"31":{"name":"(anonymous_31)","line":491,"loc":{"start":{"line":491,"column":10},"end":{"line":491,"column":29}}},"32":{"name":"(anonymous_32)","line":504,"loc":{"start":{"line":504,"column":12},"end":{"line":504,"column":27}}},"33":{"name":"(anonymous_33)","line":521,"loc":{"start":{"line":521,"column":16},"end":{"line":521,"column":27}}},"34":{"name":"(anonymous_34)","line":527,"loc":{"start":{"line":527,"column":21},"end":{"line":527,"column":39}}},"35":{"name":"(anonymous_35)","line":531,"loc":{"start":{"line":531,"column":23},"end":{"line":531,"column":60}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":34}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":32}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":36}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":36}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":62}},"6":{"start":{"line":37,"column":0},"end":{"line":75,"column":1}},"7":{"start":{"line":38,"column":1},"end":{"line":41,"column":2}},"8":{"start":{"line":39,"column":2},"end":{"line":39,"column":20}},"9":{"start":{"line":40,"column":2},"end":{"line":40,"column":54}},"10":{"start":{"line":43,"column":1},"end":{"line":43,"column":45}},"11":{"start":{"line":45,"column":1},"end":{"line":45,"column":41}},"12":{"start":{"line":46,"column":1},"end":{"line":46,"column":37}},"13":{"start":{"line":47,"column":1},"end":{"line":47,"column":49}},"14":{"start":{"line":48,"column":1},"end":{"line":48,"column":83}},"15":{"start":{"line":49,"column":1},"end":{"line":49,"column":53}},"16":{"start":{"line":50,"column":1},"end":{"line":50,"column":49}},"17":{"start":{"line":52,"column":1},"end":{"line":52,"column":57}},"18":{"start":{"line":53,"column":1},"end":{"line":53,"column":74}},"19":{"start":{"line":54,"column":1},"end":{"line":58,"column":3}},"20":{"start":{"line":56,"column":5},"end":{"line":56,"column":36}},"21":{"start":{"line":57,"column":2},"end":{"line":57,"column":37}},"22":{"start":{"line":59,"column":1},"end":{"line":59,"column":23}},"23":{"start":{"line":61,"column":1},"end":{"line":61,"column":39}},"24":{"start":{"line":62,"column":1},"end":{"line":62,"column":33}},"25":{"start":{"line":63,"column":1},"end":{"line":63,"column":46}},"26":{"start":{"line":70,"column":1},"end":{"line":70,"column":30}},"27":{"start":{"line":72,"column":1},"end":{"line":72,"column":44}},"28":{"start":{"line":73,"column":1},"end":{"line":73,"column":46}},"29":{"start":{"line":74,"column":1},"end":{"line":74,"column":42}},"30":{"start":{"line":78,"column":0},"end":{"line":524,"column":1}},"31":{"start":{"line":82,"column":2},"end":{"line":82,"column":60}},"32":{"start":{"line":87,"column":2},"end":{"line":88,"column":76}},"33":{"start":{"line":88,"column":3},"end":{"line":88,"column":76}},"34":{"start":{"line":93,"column":2},"end":{"line":100,"column":3}},"35":{"start":{"line":94,"column":3},"end":{"line":98,"column":4}},"36":{"start":{"line":95,"column":4},"end":{"line":95,"column":70}},"37":{"start":{"line":97,"column":4},"end":{"line":97,"column":100}},"38":{"start":{"line":99,"column":3},"end":{"line":99,"column":112}},"39":{"start":{"line":104,"column":2},"end":{"line":108,"column":3}},"40":{"start":{"line":105,"column":3},"end":{"line":105,"column":48}},"41":{"start":{"line":106,"column":3},"end":{"line":107,"column":62}},"42":{"start":{"line":107,"column":4},"end":{"line":107,"column":62}},"43":{"start":{"line":112,"column":2},"end":{"line":116,"column":3}},"44":{"start":{"line":113,"column":3},"end":{"line":113,"column":44}},"45":{"start":{"line":114,"column":3},"end":{"line":115,"column":58}},"46":{"start":{"line":115,"column":4},"end":{"line":115,"column":58}},"47":{"start":{"line":121,"column":2},"end":{"line":133,"column":3}},"48":{"start":{"line":123,"column":3},"end":{"line":132,"column":4}},"49":{"start":{"line":124,"column":4},"end":{"line":131,"column":5}},"50":{"start":{"line":125,"column":5},"end":{"line":127,"column":6}},"51":{"start":{"line":126,"column":6},"end":{"line":126,"column":43}},"52":{"start":{"line":129,"column":5},"end":{"line":129,"column":21}},"53":{"start":{"line":130,"column":5},"end":{"line":130,"column":76}},"54":{"start":{"line":135,"column":2},"end":{"line":135,"column":16}},"55":{"start":{"line":139,"column":2},"end":{"line":139,"column":24}},"56":{"start":{"line":140,"column":2},"end":{"line":147,"column":3}},"57":{"start":{"line":141,"column":3},"end":{"line":146,"column":4}},"58":{"start":{"line":142,"column":4},"end":{"line":142,"column":18}},"59":{"start":{"line":143,"column":4},"end":{"line":143,"column":39}},"60":{"start":{"line":145,"column":4},"end":{"line":145,"column":87}},"61":{"start":{"line":149,"column":2},"end":{"line":149,"column":18}},"62":{"start":{"line":153,"column":2},"end":{"line":154,"column":39}},"63":{"start":{"line":154,"column":3},"end":{"line":154,"column":39}},"64":{"start":{"line":158,"column":2},"end":{"line":164,"column":3}},"65":{"start":{"line":159,"column":3},"end":{"line":159,"column":50}},"66":{"start":{"line":160,"column":3},"end":{"line":163,"column":11}},"67":{"start":{"line":161,"column":4},"end":{"line":161,"column":42}},"68":{"start":{"line":162,"column":4},"end":{"line":162,"column":37}},"69":{"start":{"line":168,"column":2},"end":{"line":197,"column":3}},"70":{"start":{"line":169,"column":3},"end":{"line":169,"column":50}},"71":{"start":{"line":170,"column":3},"end":{"line":195,"column":4}},"72":{"start":{"line":171,"column":4},"end":{"line":171,"column":33}},"73":{"start":{"line":172,"column":4},"end":{"line":175,"column":6}},"74":{"start":{"line":174,"column":5},"end":{"line":174,"column":13}},"75":{"start":{"line":177,"column":4},"end":{"line":194,"column":6}},"76":{"start":{"line":179,"column":6},"end":{"line":193,"column":8}},"77":{"start":{"line":181,"column":7},"end":{"line":181,"column":65}},"78":{"start":{"line":185,"column":8},"end":{"line":192,"column":10}},"79":{"start":{"line":187,"column":10},"end":{"line":191,"column":12}},"80":{"start":{"line":189,"column":11},"end":{"line":189,"column":69}},"81":{"start":{"line":196,"column":2},"end":{"line":196,"column":29}},"82":{"start":{"line":198,"column":2},"end":{"line":198,"column":15}},"83":{"start":{"line":202,"column":2},"end":{"line":202,"column":23}},"84":{"start":{"line":203,"column":2},"end":{"line":205,"column":3}},"85":{"start":{"line":204,"column":3},"end":{"line":204,"column":57}},"86":{"start":{"line":206,"column":2},"end":{"line":206,"column":15}},"87":{"start":{"line":210,"column":2},"end":{"line":215,"column":3}},"88":{"start":{"line":212,"column":3},"end":{"line":213,"column":93}},"89":{"start":{"line":213,"column":4},"end":{"line":213,"column":93}},"90":{"start":{"line":214,"column":3},"end":{"line":214,"column":50}},"91":{"start":{"line":220,"column":2},"end":{"line":232,"column":3}},"92":{"start":{"line":221,"column":3},"end":{"line":227,"column":4}},"93":{"start":{"line":222,"column":4},"end":{"line":222,"column":37}},"94":{"start":{"line":223,"column":4},"end":{"line":226,"column":29}},"95":{"start":{"line":224,"column":5},"end":{"line":224,"column":29}},"96":{"start":{"line":226,"column":5},"end":{"line":226,"column":29}},"97":{"start":{"line":229,"column":3},"end":{"line":230,"column":29}},"98":{"start":{"line":230,"column":3},"end":{"line":230,"column":29}},"99":{"start":{"line":248,"column":2},"end":{"line":248,"column":61}},"100":{"start":{"line":249,"column":2},"end":{"line":249,"column":41}},"101":{"start":{"line":250,"column":2},"end":{"line":250,"column":71}},"102":{"start":{"line":251,"column":2},"end":{"line":251,"column":31}},"103":{"start":{"line":252,"column":2},"end":{"line":252,"column":35}},"104":{"start":{"line":253,"column":2},"end":{"line":253,"column":70}},"105":{"start":{"line":254,"column":2},"end":{"line":254,"column":45}},"106":{"start":{"line":255,"column":2},"end":{"line":255,"column":46}},"107":{"start":{"line":256,"column":2},"end":{"line":257,"column":67}},"108":{"start":{"line":257,"column":3},"end":{"line":257,"column":67}},"109":{"start":{"line":266,"column":2},"end":{"line":266,"column":51}},"110":{"start":{"line":267,"column":2},"end":{"line":267,"column":53}},"111":{"start":{"line":269,"column":3},"end":{"line":275,"column":5}},"112":{"start":{"line":272,"column":4},"end":{"line":272,"column":18}},"113":{"start":{"line":273,"column":4},"end":{"line":273,"column":22}},"114":{"start":{"line":274,"column":4},"end":{"line":274,"column":107}},"115":{"start":{"line":277,"column":3},"end":{"line":309,"column":12}},"116":{"start":{"line":279,"column":4},"end":{"line":285,"column":5}},"117":{"start":{"line":280,"column":5},"end":{"line":280,"column":95}},"118":{"start":{"line":284,"column":5},"end":{"line":284,"column":74}},"119":{"start":{"line":287,"column":4},"end":{"line":288,"column":37}},"120":{"start":{"line":288,"column":5},"end":{"line":288,"column":37}},"121":{"start":{"line":289,"column":4},"end":{"line":289,"column":29}},"122":{"start":{"line":291,"column":4},"end":{"line":291,"column":53}},"123":{"start":{"line":294,"column":4},"end":{"line":295,"column":16}},"124":{"start":{"line":295,"column":5},"end":{"line":295,"column":16}},"125":{"start":{"line":297,"column":4},"end":{"line":297,"column":40}},"126":{"start":{"line":299,"column":4},"end":{"line":299,"column":78}},"127":{"start":{"line":301,"column":4},"end":{"line":302,"column":38}},"128":{"start":{"line":302,"column":5},"end":{"line":302,"column":38}},"129":{"start":{"line":304,"column":4},"end":{"line":305,"column":46}},"130":{"start":{"line":305,"column":5},"end":{"line":305,"column":46}},"131":{"start":{"line":307,"column":4},"end":{"line":307,"column":27}},"132":{"start":{"line":308,"column":4},"end":{"line":308,"column":17}},"133":{"start":{"line":311,"column":3},"end":{"line":311,"column":31}},"134":{"start":{"line":313,"column":2},"end":{"line":318,"column":11}},"135":{"start":{"line":315,"column":3},"end":{"line":315,"column":74}},"136":{"start":{"line":316,"column":3},"end":{"line":317,"column":62}},"137":{"start":{"line":317,"column":4},"end":{"line":317,"column":62}},"138":{"start":{"line":320,"column":2},"end":{"line":320,"column":38}},"139":{"start":{"line":330,"column":2},"end":{"line":330,"column":60}},"140":{"start":{"line":331,"column":2},"end":{"line":331,"column":80}},"141":{"start":{"line":332,"column":2},"end":{"line":332,"column":69}},"142":{"start":{"line":333,"column":2},"end":{"line":333,"column":45}},"143":{"start":{"line":334,"column":2},"end":{"line":334,"column":83}},"144":{"start":{"line":342,"column":2},"end":{"line":342,"column":24}},"145":{"start":{"line":346,"column":2},"end":{"line":346,"column":35}},"146":{"start":{"line":347,"column":2},"end":{"line":353,"column":11}},"147":{"start":{"line":348,"column":2},"end":{"line":348,"column":77}},"148":{"start":{"line":349,"column":2},"end":{"line":352,"column":3}},"149":{"start":{"line":354,"column":2},"end":{"line":354,"column":16}},"150":{"start":{"line":364,"column":2},"end":{"line":364,"column":22}},"151":{"start":{"line":365,"column":2},"end":{"line":365,"column":40}},"152":{"start":{"line":367,"column":2},"end":{"line":377,"column":4}},"153":{"start":{"line":368,"column":5},"end":{"line":376,"column":13}},"154":{"start":{"line":369,"column":4},"end":{"line":374,"column":6}},"155":{"start":{"line":376,"column":4},"end":{"line":376,"column":13}},"156":{"start":{"line":379,"column":2},"end":{"line":413,"column":3}},"157":{"start":{"line":380,"column":3},"end":{"line":380,"column":86}},"158":{"start":{"line":381,"column":3},"end":{"line":381,"column":85}},"159":{"start":{"line":382,"column":3},"end":{"line":382,"column":73}},"160":{"start":{"line":383,"column":3},"end":{"line":383,"column":76}},"161":{"start":{"line":385,"column":3},"end":{"line":385,"column":42}},"162":{"start":{"line":387,"column":3},"end":{"line":387,"column":31}},"163":{"start":{"line":388,"column":3},"end":{"line":388,"column":25}},"164":{"start":{"line":389,"column":3},"end":{"line":400,"column":12}},"165":{"start":{"line":390,"column":4},"end":{"line":390,"column":31}},"166":{"start":{"line":390,"column":24},"end":{"line":390,"column":31}},"167":{"start":{"line":391,"column":4},"end":{"line":391,"column":85}},"168":{"start":{"line":392,"column":4},"end":{"line":392,"column":86}},"169":{"start":{"line":395,"column":4},"end":{"line":395,"column":36}},"170":{"start":{"line":396,"column":4},"end":{"line":399,"column":5}},"171":{"start":{"line":398,"column":5},"end":{"line":398,"column":59}},"172":{"start":{"line":401,"column":6},"end":{"line":401,"column":18}},"173":{"start":{"line":402,"column":6},"end":{"line":412,"column":4}},"174":{"start":{"line":404,"column":3},"end":{"line":411,"column":4}},"175":{"start":{"line":405,"column":4},"end":{"line":407,"column":8}},"176":{"start":{"line":406,"column":5},"end":{"line":406,"column":59}},"177":{"start":{"line":410,"column":4},"end":{"line":410,"column":43}},"178":{"start":{"line":415,"column":2},"end":{"line":427,"column":3}},"179":{"start":{"line":416,"column":3},"end":{"line":426,"column":4}},"180":{"start":{"line":417,"column":4},"end":{"line":423,"column":14}},"181":{"start":{"line":418,"column":6},"end":{"line":421,"column":60}},"182":{"start":{"line":419,"column":7},"end":{"line":419,"column":66}},"183":{"start":{"line":421,"column":7},"end":{"line":421,"column":60}},"184":{"start":{"line":422,"column":6},"end":{"line":422,"column":19}},"185":{"start":{"line":425,"column":4},"end":{"line":425,"column":61}},"186":{"start":{"line":429,"column":2},"end":{"line":448,"column":4}},"187":{"start":{"line":436,"column":3},"end":{"line":447,"column":5}},"188":{"start":{"line":437,"column":6},"end":{"line":437,"column":19}},"189":{"start":{"line":438,"column":4},"end":{"line":441,"column":12}},"190":{"start":{"line":439,"column":5},"end":{"line":439,"column":118}},"191":{"start":{"line":440,"column":5},"end":{"line":440,"column":37}},"192":{"start":{"line":442,"column":4},"end":{"line":442,"column":22}},"193":{"start":{"line":446,"column":4},"end":{"line":446,"column":115}},"194":{"start":{"line":450,"column":2},"end":{"line":458,"column":18}},"195":{"start":{"line":451,"column":3},"end":{"line":456,"column":5}},"196":{"start":{"line":458,"column":3},"end":{"line":458,"column":18}},"197":{"start":{"line":467,"column":2},"end":{"line":468,"column":67}},"198":{"start":{"line":468,"column":3},"end":{"line":468,"column":67}},"199":{"start":{"line":470,"column":2},"end":{"line":470,"column":44}},"200":{"start":{"line":478,"column":2},"end":{"line":479,"column":72}},"201":{"start":{"line":479,"column":3},"end":{"line":479,"column":72}},"202":{"start":{"line":481,"column":2},"end":{"line":482,"column":25}},"203":{"start":{"line":482,"column":3},"end":{"line":482,"column":25}},"204":{"start":{"line":483,"column":2},"end":{"line":483,"column":19}},"205":{"start":{"line":484,"column":2},"end":{"line":487,"column":5}},"206":{"start":{"line":485,"column":3},"end":{"line":486,"column":30}},"207":{"start":{"line":486,"column":4},"end":{"line":486,"column":30}},"208":{"start":{"line":488,"column":2},"end":{"line":488,"column":17}},"209":{"start":{"line":492,"column":2},"end":{"line":501,"column":4}},"210":{"start":{"line":505,"column":2},"end":{"line":505,"column":44}},"211":{"start":{"line":506,"column":2},"end":{"line":509,"column":3}},"212":{"start":{"line":507,"column":3},"end":{"line":507,"column":61}},"213":{"start":{"line":508,"column":3},"end":{"line":508,"column":55}},"214":{"start":{"line":510,"column":2},"end":{"line":513,"column":3}},"215":{"start":{"line":511,"column":3},"end":{"line":511,"column":57}},"216":{"start":{"line":512,"column":3},"end":{"line":512,"column":51}},"217":{"start":{"line":514,"column":2},"end":{"line":514,"column":63}},"218":{"start":{"line":514,"column":25},"end":{"line":514,"column":63}},"219":{"start":{"line":515,"column":2},"end":{"line":515,"column":84}},"220":{"start":{"line":515,"column":32},"end":{"line":515,"column":84}},"221":{"start":{"line":516,"column":2},"end":{"line":516,"column":64}},"222":{"start":{"line":517,"column":2},"end":{"line":517,"column":42}},"223":{"start":{"line":522,"column":2},"end":{"line":522,"column":41}},"224":{"start":{"line":527,"column":0},"end":{"line":529,"column":1}},"225":{"start":{"line":528,"column":1},"end":{"line":528,"column":63}},"226":{"start":{"line":531,"column":0},"end":{"line":539,"column":1}},"227":{"start":{"line":532,"column":1},"end":{"line":533,"column":22}},"228":{"start":{"line":533,"column":2},"end":{"line":533,"column":22}},"229":{"start":{"line":534,"column":1},"end":{"line":534,"column":39}},"230":{"start":{"line":535,"column":1},"end":{"line":536,"column":76}},"231":{"start":{"line":536,"column":2},"end":{"line":536,"column":76}},"232":{"start":{"line":537,"column":1},"end":{"line":537,"column":16}},"233":{"start":{"line":538,"column":1},"end":{"line":538,"column":16}},"234":{"start":{"line":541,"column":0},"end":{"line":541,"column":36}}},"branchMap":{"1":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},{"start":{"line":38,"column":1},"end":{"line":38,"column":1}}]},"2":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":36},"end":{"line":53,"column":68}},{"start":{"line":53,"column":72},"end":{"line":53,"column":73}}]},"3":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":1},"end":{"line":54,"column":1}},{"start":{"line":54,"column":1},"end":{"line":54,"column":1}}]},"4":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":5},"end":{"line":54,"column":31}},{"start":{"line":54,"column":33},"end":{"line":54,"column":65}}]},"5":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":2},"end":{"line":87,"column":2}},{"start":{"line":87,"column":2},"end":{"line":87,"column":2}}]},"6":{"line":88,"type":"cond-expr","locations":[{"start":{"line":88,"column":50},"end":{"line":88,"column":60}},{"start":{"line":88,"column":62},"end":{"line":88,"column":74}}]},"7":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":2},"end":{"line":93,"column":2}},{"start":{"line":93,"column":2},"end":{"line":93,"column":2}}]},"8":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":3},"end":{"line":94,"column":3}},{"start":{"line":94,"column":3},"end":{"line":94,"column":3}}]},"9":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":2},"end":{"line":104,"column":2}},{"start":{"line":104,"column":2},"end":{"line":104,"column":2}}]},"10":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":3},"end":{"line":106,"column":3}},{"start":{"line":106,"column":3},"end":{"line":106,"column":3}}]},"11":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":2},"end":{"line":112,"column":2}},{"start":{"line":112,"column":2},"end":{"line":112,"column":2}}]},"12":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":3},"end":{"line":114,"column":3}},{"start":{"line":114,"column":3},"end":{"line":114,"column":3}}]},"13":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":2},"end":{"line":121,"column":2}},{"start":{"line":121,"column":2},"end":{"line":121,"column":2}}]},"14":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":3},"end":{"line":123,"column":3}},{"start":{"line":123,"column":3},"end":{"line":123,"column":3}}]},"15":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":2},"end":{"line":140,"column":2}},{"start":{"line":140,"column":2},"end":{"line":140,"column":2}}]},"16":{"line":153,"type":"if","locations":[{"start":{"line":153,"column":2},"end":{"line":153,"column":2}},{"start":{"line":153,"column":2},"end":{"line":153,"column":2}}]},"17":{"line":158,"type":"if","locations":[{"start":{"line":158,"column":2},"end":{"line":158,"column":2}},{"start":{"line":158,"column":2},"end":{"line":158,"column":2}}]},"18":{"line":168,"type":"if","locations":[{"start":{"line":168,"column":2},"end":{"line":168,"column":2}},{"start":{"line":168,"column":2},"end":{"line":168,"column":2}}]},"19":{"line":172,"type":"if","locations":[{"start":{"line":172,"column":4},"end":{"line":172,"column":4}},{"start":{"line":172,"column":4},"end":{"line":172,"column":4}}]},"20":{"line":177,"type":"if","locations":[{"start":{"line":177,"column":4},"end":{"line":177,"column":4}},{"start":{"line":177,"column":4},"end":{"line":177,"column":4}}]},"21":{"line":179,"type":"if","locations":[{"start":{"line":179,"column":6},"end":{"line":179,"column":6}},{"start":{"line":179,"column":6},"end":{"line":179,"column":6}}]},"22":{"line":185,"type":"if","locations":[{"start":{"line":185,"column":8},"end":{"line":185,"column":8}},{"start":{"line":185,"column":8},"end":{"line":185,"column":8}}]},"23":{"line":187,"type":"if","locations":[{"start":{"line":187,"column":10},"end":{"line":187,"column":10}},{"start":{"line":187,"column":10},"end":{"line":187,"column":10}}]},"24":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":2},"end":{"line":203,"column":2}},{"start":{"line":203,"column":2},"end":{"line":203,"column":2}}]},"25":{"line":210,"type":"if","locations":[{"start":{"line":210,"column":2},"end":{"line":210,"column":2}},{"start":{"line":210,"column":2},"end":{"line":210,"column":2}}]},"26":{"line":213,"type":"binary-expr","locations":[{"start":{"line":213,"column":46},"end":{"line":213,"column":84}},{"start":{"line":213,"column":88},"end":{"line":213,"column":89}}]},"27":{"line":214,"type":"binary-expr","locations":[{"start":{"line":214,"column":25},"end":{"line":214,"column":43}},{"start":{"line":214,"column":45},"end":{"line":214,"column":46}}]},"28":{"line":220,"type":"if","locations":[{"start":{"line":220,"column":2},"end":{"line":220,"column":2}},{"start":{"line":220,"column":2},"end":{"line":220,"column":2}}]},"29":{"line":223,"type":"if","locations":[{"start":{"line":223,"column":4},"end":{"line":223,"column":4}},{"start":{"line":223,"column":4},"end":{"line":223,"column":4}}]},"30":{"line":229,"type":"if","locations":[{"start":{"line":229,"column":3},"end":{"line":229,"column":3}},{"start":{"line":229,"column":3},"end":{"line":229,"column":3}}]},"31":{"line":229,"type":"binary-expr","locations":[{"start":{"line":229,"column":7},"end":{"line":229,"column":16}},{"start":{"line":229,"column":20},"end":{"line":229,"column":34}}]},"32":{"line":256,"type":"if","locations":[{"start":{"line":256,"column":2},"end":{"line":256,"column":2}},{"start":{"line":256,"column":2},"end":{"line":256,"column":2}}]},"33":{"line":269,"type":"if","locations":[{"start":{"line":269,"column":3},"end":{"line":269,"column":3}},{"start":{"line":269,"column":3},"end":{"line":269,"column":3}}]},"34":{"line":279,"type":"if","locations":[{"start":{"line":279,"column":4},"end":{"line":279,"column":4}},{"start":{"line":279,"column":4},"end":{"line":279,"column":4}}]},"35":{"line":287,"type":"if","locations":[{"start":{"line":287,"column":4},"end":{"line":287,"column":4}},{"start":{"line":287,"column":4},"end":{"line":287,"column":4}}]},"36":{"line":287,"type":"binary-expr","locations":[{"start":{"line":287,"column":8},"end":{"line":287,"column":27}},{"start":{"line":287,"column":31},"end":{"line":287,"column":59}}]},"37":{"line":294,"type":"if","locations":[{"start":{"line":294,"column":4},"end":{"line":294,"column":4}},{"start":{"line":294,"column":4},"end":{"line":294,"column":4}}]},"38":{"line":301,"type":"if","locations":[{"start":{"line":301,"column":4},"end":{"line":301,"column":4}},{"start":{"line":301,"column":4},"end":{"line":301,"column":4}}]},"39":{"line":304,"type":"if","locations":[{"start":{"line":304,"column":4},"end":{"line":304,"column":4}},{"start":{"line":304,"column":4},"end":{"line":304,"column":4}}]},"40":{"line":316,"type":"if","locations":[{"start":{"line":316,"column":3},"end":{"line":316,"column":3}},{"start":{"line":316,"column":3},"end":{"line":316,"column":3}}]},"41":{"line":367,"type":"if","locations":[{"start":{"line":367,"column":2},"end":{"line":367,"column":2}},{"start":{"line":367,"column":2},"end":{"line":367,"column":2}}]},"42":{"line":368,"type":"if","locations":[{"start":{"line":368,"column":5},"end":{"line":368,"column":5}},{"start":{"line":368,"column":5},"end":{"line":368,"column":5}}]},"43":{"line":379,"type":"if","locations":[{"start":{"line":379,"column":2},"end":{"line":379,"column":2}},{"start":{"line":379,"column":2},"end":{"line":379,"column":2}}]},"44":{"line":381,"type":"cond-expr","locations":[{"start":{"line":381,"column":29},"end":{"line":381,"column":59}},{"start":{"line":381,"column":61},"end":{"line":381,"column":83}}]},"45":{"line":382,"type":"cond-expr","locations":[{"start":{"line":382,"column":37},"end":{"line":382,"column":66}},{"start":{"line":382,"column":68},"end":{"line":382,"column":72}}]},"46":{"line":383,"type":"cond-expr","locations":[{"start":{"line":383,"column":34},"end":{"line":383,"column":68}},{"start":{"line":383,"column":70},"end":{"line":383,"column":74}}]},"47":{"line":390,"type":"if","locations":[{"start":{"line":390,"column":4},"end":{"line":390,"column":4}},{"start":{"line":390,"column":4},"end":{"line":390,"column":4}}]},"48":{"line":392,"type":"cond-expr","locations":[{"start":{"line":392,"column":30},"end":{"line":392,"column":60}},{"start":{"line":392,"column":62},"end":{"line":392,"column":84}}]},"49":{"line":396,"type":"if","locations":[{"start":{"line":396,"column":4},"end":{"line":396,"column":4}},{"start":{"line":396,"column":4},"end":{"line":396,"column":4}}]},"50":{"line":402,"type":"if","locations":[{"start":{"line":402,"column":6},"end":{"line":402,"column":6}},{"start":{"line":402,"column":6},"end":{"line":402,"column":6}}]},"51":{"line":404,"type":"if","locations":[{"start":{"line":404,"column":3},"end":{"line":404,"column":3}},{"start":{"line":404,"column":3},"end":{"line":404,"column":3}}]},"52":{"line":415,"type":"if","locations":[{"start":{"line":415,"column":2},"end":{"line":415,"column":2}},{"start":{"line":415,"column":2},"end":{"line":415,"column":2}}]},"53":{"line":416,"type":"if","locations":[{"start":{"line":416,"column":3},"end":{"line":416,"column":3}},{"start":{"line":416,"column":3},"end":{"line":416,"column":3}}]},"54":{"line":418,"type":"if","locations":[{"start":{"line":418,"column":6},"end":{"line":418,"column":6}},{"start":{"line":418,"column":6},"end":{"line":418,"column":6}}]},"55":{"line":429,"type":"if","locations":[{"start":{"line":429,"column":2},"end":{"line":429,"column":2}},{"start":{"line":429,"column":2},"end":{"line":429,"column":2}}]},"56":{"line":436,"type":"if","locations":[{"start":{"line":436,"column":3},"end":{"line":436,"column":3}},{"start":{"line":436,"column":3},"end":{"line":436,"column":3}}]},"57":{"line":436,"type":"binary-expr","locations":[{"start":{"line":436,"column":8},"end":{"line":436,"column":17}},{"start":{"line":436,"column":23},"end":{"line":436,"column":41}}]},"58":{"line":450,"type":"if","locations":[{"start":{"line":450,"column":2},"end":{"line":450,"column":2}},{"start":{"line":450,"column":2},"end":{"line":450,"column":2}}]},"59":{"line":467,"type":"if","locations":[{"start":{"line":467,"column":2},"end":{"line":467,"column":2}},{"start":{"line":467,"column":2},"end":{"line":467,"column":2}}]},"60":{"line":478,"type":"if","locations":[{"start":{"line":478,"column":2},"end":{"line":478,"column":2}},{"start":{"line":478,"column":2},"end":{"line":478,"column":2}}]},"61":{"line":481,"type":"if","locations":[{"start":{"line":481,"column":2},"end":{"line":481,"column":2}},{"start":{"line":481,"column":2},"end":{"line":481,"column":2}}]},"62":{"line":485,"type":"if","locations":[{"start":{"line":485,"column":3},"end":{"line":485,"column":3}},{"start":{"line":485,"column":3},"end":{"line":485,"column":3}}]},"63":{"line":494,"type":"cond-expr","locations":[{"start":{"line":494,"column":49},"end":{"line":494,"column":81}},{"start":{"line":494,"column":83},"end":{"line":494,"column":92}}]},"64":{"line":495,"type":"cond-expr","locations":[{"start":{"line":495,"column":45},"end":{"line":495,"column":75}},{"start":{"line":495,"column":77},"end":{"line":495,"column":86}}]},"65":{"line":496,"type":"cond-expr","locations":[{"start":{"line":496,"column":38},"end":{"line":496,"column":55}},{"start":{"line":496,"column":70},"end":{"line":496,"column":79}}]},"66":{"line":497,"type":"cond-expr","locations":[{"start":{"line":497,"column":51},"end":{"line":497,"column":75}},{"start":{"line":497,"column":77},"end":{"line":497,"column":86}}]},"67":{"line":506,"type":"if","locations":[{"start":{"line":506,"column":2},"end":{"line":506,"column":2}},{"start":{"line":506,"column":2},"end":{"line":506,"column":2}}]},"68":{"line":510,"type":"if","locations":[{"start":{"line":510,"column":2},"end":{"line":510,"column":2}},{"start":{"line":510,"column":2},"end":{"line":510,"column":2}}]},"69":{"line":514,"type":"if","locations":[{"start":{"line":514,"column":2},"end":{"line":514,"column":2}},{"start":{"line":514,"column":2},"end":{"line":514,"column":2}}]},"70":{"line":515,"type":"if","locations":[{"start":{"line":515,"column":2},"end":{"line":515,"column":2}},{"start":{"line":515,"column":2},"end":{"line":515,"column":2}}]},"71":{"line":528,"type":"cond-expr","locations":[{"start":{"line":528,"column":31},"end":{"line":528,"column":37}},{"start":{"line":528,"column":39},"end":{"line":528,"column":61}}]},"72":{"line":532,"type":"if","locations":[{"start":{"line":532,"column":1},"end":{"line":532,"column":1}},{"start":{"line":532,"column":1},"end":{"line":532,"column":1}}]},"73":{"line":535,"type":"if","locations":[{"start":{"line":535,"column":1},"end":{"line":535,"column":1}},{"start":{"line":535,"column":1},"end":{"line":535,"column":1}}]}},"code":["/*","TODO: SpellChecker should be reorganized","*/","","var ftrs = require('../features');","var _ = require('underscore')._;","var hash = require('../utils/hash');","var util = require('../utils/list');","var multilabelutils = require('./multilabel/multilabelutils');","","/**"," * EnhancedClassifier - wraps any classifier with feature-extractors and feature-lookup-tables."," * "," * @param opts"," * Obligatory option: 'classifierType', which is the base type of the classifier."," * Optional:"," * * 'inputSplitter' - a function that splits the input samples into sub-samples, for multi-label classification (useful mainly for sentences). "," * * 'normalizer' - a function that normalizes the input samples, before they are sent to feature extraction."," * * 'featureExtractor' - a single feature-extractor (see the \"features\" folder), or an array of extractors, for extracting features from training and classification samples."," * * 'featureExtractorForClassification' - additional feature extractor[s], for extracting features from samples during classification. Used for domain adaptation."," * * 'featureLookupTable' - an instance of FeatureLookupTable for converting features (in the input) to numeric indices and back."," * * 'labelLookupTable' - an instance of FeatureLookupTable for converting labels (classes, in the output) to numeric indices and back."," * * 'multiplyFeaturesByIDF' - boolean - if true, multiply each feature value by log(documentCount / (1+featureDocumentFrequency))"," * * 'minFeatureDocumentFrequency' - int - if positive, ignore features that appeared less than this number in the training set."," * * 'pastTrainingSamples' - an array that keeps all past training samples, to enable retraining."," * * 'spellChecker' - an initialized spell checker from the 'wordsworth' package, to spell-check features during classification."," * * 'bias' - a 'bias' feature with a constant value (usually 1)."," * * 'InputSplitLabel' - a method for special separation of input labels before training"," * * 'OutputSplitLabel' - a method for special separation of output labesl after classification."," * * 'TestSplitLabel' - a method for special separation before a testing"," * * 'TfIdfImpl' - implementation of tf-idf algorithm"," * * 'tokenizer' - implementation of tokenizer"," * * 'instanceFilter' - filter of instance of training data and test data, if training instance is filtered is not used for training, if triaging instance is filtered by classify,"," it's classified empty class.","*/","","var EnhancedClassifier = function(opts) {","\tif (!opts.classifierType) {","\t\tconsole.dir(opts);","\t\tthrow new Error(\"opts must contain classifierType\");","\t}","","\tthis.classifier = new opts.classifierType();","","\tthis.inputSplitter = opts.inputSplitter;","\tthis.setNormalizer(opts.normalizer);","\tthis.setFeatureExtractor(opts.featureExtractor);","\tthis.setFeatureExtractorForClassification(opts.featureExtractorForClassification);","\tthis.setFeatureLookupTable(opts.featureLookupTable);","\tthis.setLabelLookupTable(opts.labelLookupTable);","","\tthis.multiplyFeaturesByIDF = opts.multiplyFeaturesByIDF;","\tthis.minFeatureDocumentFrequency = opts.minFeatureDocumentFrequency || 0;","\tif (opts.multiplyFeaturesByIDF||opts.minFeatureDocumentFrequency) ","\t\t{","    \tthis.tfidf = new opts.TfIdfImpl","\t\tthis.featureDocumentFrequency = {};","\t\t}","\tthis.bias = opts.bias;","","\tthis.spellChecker = opts.spellChecker;","\tthis.tokenizer = opts.tokenizer;","\tthis.instanceFilterRule = opts.instanceFilter","","\t// this.spellChecker =  [require('wordsworth').getInstance(), require('wordsworth').getInstance()],","\t// this.pastTrainingSamples = opts.pastTrainingSamples;","\t// TODO: it looks like the method with creating an array at the definition ","\t// create an array with the same pointer for every classifier of the given class","\t","\tthis.pastTrainingSamples = []","","\tthis.InputSplitLabel = opts.InputSplitLabel","\tthis.OutputSplitLabel = opts.OutputSplitLabel","\tthis.TestSplitLabel = opts.TestSplitLabel","}","","","EnhancedClassifier.prototype = {","","\t/** Set the main feature extractor, used for both training and classification. */","\tsetFeatureExtractor: function (featureExtractor) {","\t\tthis.featureExtractors = ftrs.normalize(featureExtractor);","\t},","\t","\t/** Set the main feature extractor, used for both training and classification. */","\tsetNormalizer: function (normalizer) {","\t\tif (normalizer)","\t\t\tthis.normalizers = (Array.isArray(normalizer)? normalizer: [normalizer]);","\t},","","\t/** Set an additional feature extractor, for classification only. */","\tsetFeatureExtractorForClassification: function (featureExtractorForClassification) {","\t\tif (featureExtractorForClassification) {","\t\t\tif (Array.isArray(featureExtractorForClassification)) {","\t\t\t\tfeatureExtractorForClassification.unshift(this.featureExtractors);","\t\t\t} else {","\t\t\t\tfeatureExtractorForClassification = [this.featureExtractors, featureExtractorForClassification];","\t\t\t}","\t\t\tthis.featureExtractorsForClassification = new ftrs.CollectionOfExtractors(featureExtractorForClassification);","\t\t}","\t},","\t","\tsetFeatureLookupTable: function(featureLookupTable) {","\t\tif (featureLookupTable) {","\t\t\tthis.featureLookupTable = featureLookupTable;","\t\t\tif (this.classifier.setFeatureLookupTable)","\t\t\t\tthis.classifier.setFeatureLookupTable(featureLookupTable);  // for generating clearer explanations only","\t\t}","\t},","\t","\tsetLabelLookupTable: function(labelLookupTable) {","\t\tif (labelLookupTable) {","\t\t\tthis.labelLookupTable = labelLookupTable;","\t\t\tif (this.classifier.setLabelLookupTable)","\t\t\t\tthis.classifier.setLabelLookupTable(labelLookupTable);  // for generating clearer explanations only","\t\t}","\t},","","\t// private function: use this.normalizers to normalize the given sample:","\tnormalizedSample: function(sample) {","\t\tif (!(_.isArray(sample)))","\t\t{","\t\t\tif (this.normalizers) {","\t\t\t\ttry {","\t\t\t\t\tfor (var i in this.normalizers) {\t\t\t\t\t","\t\t\t\t\t\tsample = this.normalizers[i](sample);","\t\t\t\t\t}","\t\t\t\t} catch (err) {","\t\t\t\t\tconsole.log(err)","\t\t\t\t\tthrow new Error(\"Cannot normalize '\"+sample+\"': \"+JSON.stringify(err));","\t\t\t\t}","\t\t\t}","\t\t}","","\t\treturn sample;","\t},","","\tsampleToFeatures: function(sample, featureExtractor) {","\t\tvar features = sample;","\t\tif (featureExtractor) {","\t\t\ttry {","\t\t\t\tfeatures = {};","\t\t\t\tfeatureExtractor(sample, features);","\t\t\t} catch (err) {","\t\t\t\tthrow new Error(\"Cannot extract features from '\"+sample+\"': \"+JSON.stringify(err));","\t\t\t}","\t\t}","","\t\treturn features;","\t},","","\tinstanceFilter: function(data) {","\t\tif (this.instanceFilterRule) ","\t\t\treturn this.instanceFilterRule(data)","\t},","\t","\ttrainSpellChecker: function(features) {","\t\tif (this.spellChecker) {","\t\t\tvar tokens = this.tokenizer.tokenize(features);","\t\t\t_.each(tokens, function(word, key, list){ ","\t\t\t\tthis.spellChecker[1].understand(word); // Adds the given word to the index of the spell-checker.","\t\t\t\tthis.spellChecker[1].train(word);","\t\t\t}, this)","\t\t}","\t},","\t","\tcorrectFeatureSpelling: function(sample) {","\t\tif (this.spellChecker) {","\t\t\tvar features = this.tokenizer.tokenize(sample);","\t\t\tfor (var index in features) {","\t\t\t\tvar feature = features[index]","\t\t\t\tif (!isNaN(parseInt(feature)))  // don't spell-correct numeric features","\t\t\t\t\t{","\t\t\t\t\tcontinue","\t\t\t\t\t}","\t\t\t\t","\t\t\t\tif (!(this.spellChecker[1].exists(feature)))","\t\t\t\t\t{","\t\t\t\t\t\tif (this.spellChecker[1].suggest(feature).length != 0)","\t\t\t\t\t\t\t{","\t\t\t\t\t\t\tfeatures[index] = this.spellChecker[1].suggest(feature)[0]","\t\t\t\t\t\t\t}","\t\t\t\t\t\telse","\t\t\t\t\t\t\t{","\t\t\t\t\t\t\t\tif (!(this.spellChecker[0].exists(feature)))","\t\t\t\t\t\t\t\t\t{","\t\t\t\t\t\t\t\t\t\tif (this.spellChecker[0].suggest(feature).length != 0)","\t\t\t\t\t\t\t\t\t\t\t{","\t\t\t\t\t\t\t\t\t\t\tfeatures[index] = this.spellChecker[0].suggest(feature)[0]","\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t}","\t\tsample = features.join(\" \")","\t\t}","\t\treturn sample","\t},","\t","\tfeaturesToArray: function(features) {","\t\tvar array = features;","\t\tif (this.featureLookupTable) {","\t\t\tarray = this.featureLookupTable.hashToArray(features);","\t\t}","\t\treturn array;","\t},","\t","\tcountFeatures: function(features) {","\t\tif (this.featureDocumentFrequency) {","\t\t\t// this.tfidf.addDocument(datum.input);","\t\t\tfor (var feature in features)","\t\t\t\tthis.featureDocumentFrequency[feature] = (this.featureDocumentFrequency[feature] || 0)+1;","\t\t\tthis.documentCount = (this.documentCount||0)+1;","\t\t}","\t},","\t","\teditFeatureValues: function(features, remove_unknown_features) {","","\t\tif (this.multiplyFeaturesByIDF) { ","\t\t\tfor (var feature in features) { ","\t\t\t\tvar IDF = this.tfidf.idf(feature)","\t\t\t\tif (IDF != Infinity)","\t\t\t\t\tfeatures[feature] *= IDF","\t\t\t\telse","\t\t\t\t\tdelete features[feature]","\t\t\t}","","\t\t\tif (this.bias && !features.bias)","\t\t\tfeatures.bias = this.bias;","","\t\t}","\t\t// if (remove_unknown_features && this.minFeatureDocumentFrequency>0)","\t\t\t// for (var feature in features)","\t\t\t\t// if ((this.featureDocumentFrequency[feature]||0)<this.minFeatureDocumentFrequency)","\t\t\t\t\t// delete features[feature];","\t\t","\t},","\t","","\t/**","\t * Online training: ","\t * Tell the classifier that the given sample belongs to the given classes.","\t * @param sample a document.","\t * @param classes an array whose VALUES are classes.","\t */","\ttrainOnline: function(sample, classes) {","\t\tclasses = normalizeClasses(classes, this.labelLookupTable);","\t\tsample = this.normalizedSample(sample);","\t\tvar features = this.sampleToFeatures(sample, this.featureExtractors);","\t\tthis.countFeatures(features);","\t\tthis.trainSpellChecker(features);","\t\tthis.editFeatureValues(features, /*remove_unknown_features=*/false);","\t\tvar array = this.featuresToArray(features);","\t\tthis.classifier.trainOnline(array, classes);","\t\tif (this.pastTrainingSamples)","\t\t\tthis.pastTrainingSamples.push({input: sample, output: classes});","\t},","","\t/**","\t * Batch training: ","\t * Train the classifier with all the given documents.","\t * @param dataset an array with objects of the format: {input: sample1, output: [class11, class12...]}","\t */","\ttrainBatch: function(dataset) {","\t\tvar featureLookupTable = this.featureLookupTable;","\t\tvar pastTrainingSamples = this.pastTrainingSamples;","","\t\t\tif (this.spellChecker) {","\t\t\t\t// var seeds = fs.readFileSync('./node_modules/wordsworth/data/seed.txt')","\t\t\t\t// var trainings = fs.readFileSync('./node_modules/wordsworth/data/training.txt')","\t\t\t\tvar seeds = []","\t\t\t\tvar trainings = []","\t\t\t\tthis.spellChecker[0].initializeSync(seeds.toString().split(\"\\r\\n\"), trainings.toString().split(\"\\r\\n\"))","\t\t\t\t}","","\t\t\tdataset = dataset.map(function(datum) {","","\t\t\t\tif (typeof this.InputSplitLabel === 'function') {","\t\t\t\t\tdatum.output = (this.InputSplitLabel(multilabelutils.normalizeOutputLabels(datum.output)))\t","\t\t\t\t}","\t\t\t\telse","\t\t\t\t{","\t\t\t\t\tdatum.output = normalizeClasses(datum.output, this.labelLookupTable);","\t\t\t\t}","","\t\t\t\tif (pastTrainingSamples && dataset!=pastTrainingSamples)","\t\t\t\t\tpastTrainingSamples.push(datum);","\t\t\t\tdatum = _(datum).clone();","","\t\t\t\tdatum.input = this.normalizedSample(datum.input);","","\t\t\t\t/*true - this instance is filtered as not useful*/","\t\t\t\tif (this.instanceFilter(datum) == true)","\t\t\t\t\treturn null","","\t\t\t\tthis.trainSpellChecker(datum.input);","","\t\t\t\tvar features = this.sampleToFeatures(datum.input, this.featureExtractors);","\t\t\t\t","\t\t\t\tif (this.tfidf)","\t\t\t\t\tthis.tfidf.addDocument(features);","\t\t\t\t// this.trainSpellChecker(features);","\t\t\t\tif (featureLookupTable)","\t\t\t\t\tfeatureLookupTable.addFeatures(features);","","\t\t\t\tdatum.input = features;","\t\t\t\treturn datum;","\t\t\t}, this);","","\t\t\tdataset = _.compact(dataset)","","\t\tdataset.forEach(function(datum) {","\t\t\t// run on single sentence","\t\t\tthis.editFeatureValues(datum.input, /*remove_unknown_features=*/false);","\t\t\tif (featureLookupTable)","\t\t\t\tdatum.input = featureLookupTable.hashToArray(datum.input);","\t\t}, this);","","\t\tthis.classifier.trainBatch(dataset);","\t},","","\t/**","\t * internal function - classify a single segment of the input (used mainly when there is an inputSplitter) ","\t * @param sample a document.","\t * @return an array whose VALUES are classes.","\t */","\tclassifyPart: function(sample, explain, continuous_output) {","\t\t","\t\tvar samplecorrected = this.correctFeatureSpelling(sample);","\t\tvar features = this.sampleToFeatures(samplecorrected, this.featureExtractors);","\t\tthis.editFeatureValues(features, /*remove_unknown_features=*/true);","\t\tvar array = this.featuresToArray(features);","\t\tvar classification = this.classifier.classify(array, explain, continuous_output);","\t\t","\t\t// if (this.spellChecker && classification.explanation) {","\t\t\t// if (Array.isArray(classification.explanation))","\t\t\t\t// classification.explanation.unshift({SpellCorrectedFeatures: JSON.stringify(features)});","\t\t\t// else","\t\t\t\t// classification.explanation['SpellCorrectedFeatures']=JSON.stringify(features);","\t\t// }","\t\treturn classification;","\t},","","\toutputToFormat: function(data) {","\t\tdataset = util.clonedataset(data)","\t\tdataset = dataset.map(function(datum) {","\t\tvar normalizedLabels = multilabelutils.normalizeOutputLabels(datum.output);","\t\treturn {","\t\t\tinput: datum.input,","\t\t\toutput: this.TestSplitLabel(normalizedLabels)","\t\t}","\t\t}, this);","\t\treturn dataset","\t},","","\t/**","\t * Use the model trained so far to classify a new sample.","\t * @param sample a document.","\t * @return an array whose VALUES are classes.","\t * @original is the original gold standard labels is used only for statistics.","\t */","\tclassify: function(sample, explain, continuous_output, original, classifier_compare) {","\t\tvar initial = sample","\t\tsample = this.normalizedSample(sample)","","\t\tif (this.instanceFilter(sample))","\t\t\t{\tif (explain>0) ","\t\t\t\treturn {","\t\t\t\t\tclasses: [],","\t\t\t\t\tscores: {},","\t\t\t\t\texplanation: {} ","\t\t\t\t\t// bonus: bonus","\t\t\t\t};","\t\t\telse","\t\t\t\treturn []","\t\t\t}\t\t","\t\t","\t\tif (!this.inputSplitter) {","\t\t\tvar classesWithExplanation = this.classifyPart(sample, explain, continuous_output);","\t\t\tvar classes = (explain>0? classesWithExplanation.classes: classesWithExplanation);","\t\t\tvar scores =  (continuous_output? classesWithExplanation.scores: null)","\t\t\tvar explanations = (explain>0? classesWithExplanation.explanation: null);","\t\t} else {","\t\t\tvar parts = this.inputSplitter(sample);","\t\t\t// var accumulatedClasses = {};","\t\t\tvar accumulatedClasses = [];","\t\t\tvar explanations = [];","\t\t\tparts.forEach(function(part) {","\t\t\t\tif (part.length==0) return;","\t\t\t\tvar classesWithExplanation = this.classifyPart(part, explain, continuous_output);","\t\t\t\tvar classes = (explain>0? classesWithExplanation.classes: classesWithExplanation);","\t\t\t\t// for (var i in classes)","\t\t\t\t// \taccumulatedClasses[classes[i]]=true;","\t\t\t\taccumulatedClasses.push(classes)","\t\t\t\tif (explain>0) {","\t\t\t\t\t// explanations.push(part);","\t\t\t\t\texplanations.push(classesWithExplanation.explanation);","\t\t\t\t}","\t\t\t}, this);","    \t\tclasses = []","    \t\tif (accumulatedClasses[0])","    \t\t{","\t\t\tif (accumulatedClasses[0][0] instanceof Array)","\t\t\t\t_(accumulatedClasses[0].length).times(function(n){","\t\t\t\t\tclasses.push(_.flatten(_.pluck(accumulatedClasses,n)))","\t\t\t\t });","\t\t\telse","\t\t\t{","\t\t\t\tclasses = _.flatten(accumulatedClasses)","\t\t\t}","\t\t\t}","\t\t}","","\t\tif (this.labelLookupTable) {","\t\t\tif (Array.isArray(classes)) {","\t\t\t\tclasses = classes.map(function(label) {","\t\t\t\t\t\tif (_.isArray(label))","\t\t\t\t\t\t\tlabel[0] = this.labelLookupTable.numberToFeature(label[0]);","\t\t\t\t\t\telse","\t\t\t\t\t\t\tlabel = this.labelLookupTable.numberToFeature(label);","\t\t\t\t\t\treturn label;","\t\t\t\t\t}, this);","\t\t\t} else {","\t\t\t\tclasses = this.labelLookupTable.numberToFeature(classes);","\t\t\t}","\t\t}","","\t\tif ((typeof this.OutputSplitLabel === 'function')) {","","\t\t\t// classes = this.OutputSplitLabel(classes, this.Observable, sample, explanations)","\t\t\t// var classes = []","\t\t\t// if (_.isArray(explanations))","\t\t\t// var bonus = []","\t\t","\t\t\tif ((explain>0) && (this.inputSplitter))","\t\t\t\t{ nclasses = []","\t\t\t\t_(explanations.length).times(function(n){","\t\t\t\t\tvar clas = this.OutputSplitLabel(classes, this, parts[n], explanations[n], original, classifier_compare, initial)","\t\t\t\t\tnclasses = nclasses.concat(clas)","\t\t\t\t}, this)","\t\t\t\tclasses = nclasses","\t\t\t\t}","\t\t\telse","\t\t\t\t{","\t\t\t\tvar classes = this.OutputSplitLabel(classes, this, sample, explanations, original, classifier_compare, initial)","\t\t\t\t}","\t\t\t}","","\t\tif (explain>0) ","\t\t\treturn {","\t\t\t\tclasses: classes,","\t\t\t\tscores: scores,","\t\t\t\texplanation: explanations","\t\t\t\t// bonus: bonus","\t\t\t};","\t\telse","\t\t\treturn classes;","\t},","","\t","\t/**","\t * Train on past training samples","\t * currently doesn't work","\t */","\tretrain: function() {","\t\tif (!this.pastTrainingSamples)","\t\t\tthrow new Error(\"No pastTrainingSamples array - can't retrain\");","\t\t","\t\tthis.trainBatch(this.pastTrainingSamples);","\t},","\t","\t/**","\t * @return an array with all samples whose class is the given class.","\t * Available only if the pastTrainingSamples are saved.","\t */","\tbackClassify: function(theClass) {","\t\tif (!this.pastTrainingSamples)","\t\t\tthrow new Error(\"No pastTrainingSamples array - can't backClassify\");","","\t\tif (!(theClass instanceof Array))","\t\t\ttheClass = [theClass];","\t\tvar samples = [];","\t\tthis.pastTrainingSamples.forEach(function(datum) {","\t\t\tif (_(datum.output).isEqual(theClass))","\t\t\t\tsamples.push(datum.input);","\t\t});","\t\treturn samples;","\t},","","\ttoJSON : function(callback) {","\t\treturn {","\t\t\tclassifier: this.classifier.toJSON(callback),","\t\t\tfeatureLookupTable: (this.featureLookupTable? this.featureLookupTable.toJSON(): undefined),","\t\t\tlabelLookupTable: (this.labelLookupTable? this.labelLookupTable.toJSON(): undefined),","\t\t\tspellChecker:  (this.spellChecker? this.spellChecker/*.toJSON()*/: undefined),","\t\t\tpastTrainingSamples: (this.pastTrainingSamples? this.pastTrainingSamples: undefined),","\t\t\tfeatureDocumentFrequency: this.featureDocumentFrequency,","\t\t\tdocumentCount: this.documentCount,","\t\t\t/* Note: the feature extractors are functions - they should be created at initialization - they are not serializable! */ ","\t\t};","\t},","","\tfromJSON : function(json) {","\t\tthis.classifier.fromJSON(json.classifier);","\t\tif (this.featureLookupTable) {","\t\t\tthis.featureLookupTable.fromJSON(json.featureLookupTable);","\t\t\tthis.setFeatureLookupTable(this.featureLookupTable);","\t\t}","\t\tif (this.labelLookupTable) {","\t\t\tthis.labelLookupTable.fromJSON(json.labelLookupTable);","\t\t\tthis.setLabelLookupTable(this.labelLookupTable);","\t\t}","\t\tif (this.spellChecker) this.spellChecker = json.spellChecker; ","\t\tif (this.pastTrainingSamples) this.pastTrainingSamples = json.pastTrainingSamples;","\t\tthis.featureDocumentFrequency = json.featureDocumentFrequency;","\t\tthis.documentCount = json.documentCount;","\t\t/* Note: the feature extractors are functions - they should be created at initialization - they are not deserializable! */ ","\t},","","\tgetAllClasses: function() {  // relevant for multilabel classifiers","\t\treturn this.classifier.getAllClasses();","\t},","}  // end of EnhancedClassifier prototype","","","var stringifyClass = function (aClass) {","\treturn (_(aClass).isString()? aClass: JSON.stringify(aClass));","}","","var normalizeClasses = function (classes, labelLookupTable) {","\tif (!Array.isArray(classes))","\t\tclasses = [classes];","\tclasses = classes.map(stringifyClass);","\tif (labelLookupTable)","\t\tclasses = classes.map(labelLookupTable.featureToNumber, labelLookupTable);","\tclasses.sort();","\treturn classes;","}","","module.exports = EnhancedClassifier;",""],"l":{"5":1,"6":1,"7":1,"8":1,"9":1,"37":1,"38":0,"39":0,"40":0,"43":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"52":0,"53":0,"54":0,"56":0,"57":0,"59":0,"61":0,"62":0,"63":0,"70":0,"72":0,"73":0,"74":0,"78":1,"82":0,"87":0,"88":0,"93":0,"94":0,"95":0,"97":0,"99":0,"104":0,"105":0,"106":0,"107":0,"112":0,"113":0,"114":0,"115":0,"121":0,"123":0,"124":0,"125":0,"126":0,"129":0,"130":0,"135":0,"139":0,"140":0,"141":0,"142":0,"143":0,"145":0,"149":0,"153":0,"154":0,"158":0,"159":0,"160":0,"161":0,"162":0,"168":0,"169":0,"170":0,"171":0,"172":0,"174":0,"177":0,"179":0,"181":0,"185":0,"187":0,"189":0,"196":0,"198":0,"202":0,"203":0,"204":0,"206":0,"210":0,"212":0,"213":0,"214":0,"220":0,"221":0,"222":0,"223":0,"224":0,"226":0,"229":0,"230":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"266":0,"267":0,"269":0,"272":0,"273":0,"274":0,"277":0,"279":0,"280":0,"284":0,"287":0,"288":0,"289":0,"291":0,"294":0,"295":0,"297":0,"299":0,"301":0,"302":0,"304":0,"305":0,"307":0,"308":0,"311":0,"313":0,"315":0,"316":0,"317":0,"320":0,"330":0,"331":0,"332":0,"333":0,"334":0,"342":0,"346":0,"347":0,"348":0,"349":0,"354":0,"364":0,"365":0,"367":0,"368":0,"369":0,"376":0,"379":0,"380":0,"381":0,"382":0,"383":0,"385":0,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"395":0,"396":0,"398":0,"401":0,"402":0,"404":0,"405":0,"406":0,"410":0,"415":0,"416":0,"417":0,"418":0,"419":0,"421":0,"422":0,"425":0,"429":0,"436":0,"437":0,"438":0,"439":0,"440":0,"442":0,"446":0,"450":0,"451":0,"458":0,"467":0,"468":0,"470":0,"478":0,"479":0,"481":0,"482":0,"483":0,"484":0,"485":0,"486":0,"488":0,"492":0,"505":0,"506":0,"507":0,"508":0,"510":0,"511":0,"512":0,"514":0,"515":0,"516":0,"517":0,"522":0,"527":1,"528":0,"531":1,"532":0,"533":0,"534":0,"535":0,"536":0,"537":0,"538":0,"541":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/formats/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/formats/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":6,"column":1}}},"branchMap":{},"code":["module.exports = {","\tarff: require(\"./arff\"),","\tjson: require(\"./json\"),","\ttsv: require(\"./tsv\"),","\tsvmlight: require(\"./svmlight\"),","}",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/formats/arff.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/formats/arff.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"fnMap":{"1":{"name":"(anonymous_1)","line":21,"loc":{"start":{"line":21,"column":17},"end":{"line":21,"column":67}}},"2":{"name":"(anonymous_2)","line":27,"loc":{"start":{"line":27,"column":17},"end":{"line":27,"column":33}}},"3":{"name":"(anonymous_3)","line":35,"loc":{"start":{"line":35,"column":17},"end":{"line":35,"column":33}}},"4":{"name":"(anonymous_4)","line":38,"loc":{"start":{"line":38,"column":34},"end":{"line":38,"column":53}}},"5":{"name":"(anonymous_5)","line":53,"loc":{"start":{"line":53,"column":18},"end":{"line":53,"column":81}}},"6":{"name":"(anonymous_6)","line":59,"loc":{"start":{"line":59,"column":45},"end":{"line":59,"column":61}}},"7":{"name":"(anonymous_7)","line":70,"loc":{"start":{"line":70,"column":45},"end":{"line":70,"column":61}}},"8":{"name":"(anonymous_8)","line":73,"loc":{"start":{"line":73,"column":35},"end":{"line":73,"column":54}}},"9":{"name":"(anonymous_9)","line":98,"loc":{"start":{"line":98,"column":18},"end":{"line":98,"column":70}}},"10":{"name":"(anonymous_10)","line":102,"loc":{"start":{"line":102,"column":54},"end":{"line":102,"column":76}}},"11":{"name":"(anonymous_11)","line":112,"loc":{"start":{"line":112,"column":17},"end":{"line":112,"column":33}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":32}},"2":{"start":{"line":12,"column":0},"end":{"line":12,"column":42}},"3":{"start":{"line":21,"column":0},"end":{"line":46,"column":1}},"4":{"start":{"line":22,"column":1},"end":{"line":22,"column":52}},"5":{"start":{"line":22,"column":24},"end":{"line":22,"column":52}},"6":{"start":{"line":24,"column":1},"end":{"line":24,"column":64}},"7":{"start":{"line":27,"column":1},"end":{"line":32,"column":4}},"8":{"start":{"line":28,"column":2},"end":{"line":28,"column":50}},"9":{"start":{"line":29,"column":2},"end":{"line":30,"column":99}},"10":{"start":{"line":30,"column":3},"end":{"line":30,"column":99}},"11":{"start":{"line":31,"column":2},"end":{"line":31,"column":46}},"12":{"start":{"line":35,"column":1},"end":{"line":42,"column":4}},"13":{"start":{"line":36,"column":2},"end":{"line":37,"column":33}},"14":{"start":{"line":37,"column":3},"end":{"line":37,"column":33}},"15":{"start":{"line":38,"column":2},"end":{"line":40,"column":5}},"16":{"start":{"line":39,"column":3},"end":{"line":39,"column":67}},"17":{"start":{"line":41,"column":2},"end":{"line":41,"column":47}},"18":{"start":{"line":45,"column":1},"end":{"line":45,"column":63}},"19":{"start":{"line":53,"column":0},"end":{"line":88,"column":1}},"20":{"start":{"line":54,"column":1},"end":{"line":54,"column":52}},"21":{"start":{"line":54,"column":24},"end":{"line":54,"column":52}},"22":{"start":{"line":55,"column":1},"end":{"line":55,"column":64}},"23":{"start":{"line":58,"column":1},"end":{"line":65,"column":2}},"24":{"start":{"line":59,"column":2},"end":{"line":64,"column":5}},"25":{"start":{"line":60,"column":3},"end":{"line":60,"column":51}},"26":{"start":{"line":61,"column":3},"end":{"line":62,"column":100}},"27":{"start":{"line":62,"column":4},"end":{"line":62,"column":100}},"28":{"start":{"line":63,"column":3},"end":{"line":63,"column":47}},"29":{"start":{"line":69,"column":1},"end":{"line":78,"column":2}},"30":{"start":{"line":70,"column":2},"end":{"line":77,"column":5}},"31":{"start":{"line":71,"column":3},"end":{"line":72,"column":34}},"32":{"start":{"line":72,"column":4},"end":{"line":72,"column":34}},"33":{"start":{"line":73,"column":3},"end":{"line":75,"column":6}},"34":{"start":{"line":74,"column":4},"end":{"line":74,"column":68}},"35":{"start":{"line":76,"column":3},"end":{"line":76,"column":48}},"36":{"start":{"line":83,"column":1},"end":{"line":83,"column":24}},"37":{"start":{"line":84,"column":1},"end":{"line":87,"column":2}},"38":{"start":{"line":85,"column":2},"end":{"line":86,"column":86}},"39":{"start":{"line":98,"column":0},"end":{"line":122,"column":2}},"40":{"start":{"line":99,"column":1},"end":{"line":99,"column":53}},"41":{"start":{"line":100,"column":1},"end":{"line":100,"column":40}},"42":{"start":{"line":102,"column":1},"end":{"line":108,"column":4}},"43":{"start":{"line":103,"column":2},"end":{"line":107,"column":88}},"44":{"start":{"line":104,"column":3},"end":{"line":104,"column":45}},"45":{"start":{"line":105,"column":7},"end":{"line":107,"column":88}},"46":{"start":{"line":106,"column":3},"end":{"line":106,"column":98}},"47":{"start":{"line":107,"column":7},"end":{"line":107,"column":88}},"48":{"start":{"line":110,"column":1},"end":{"line":110,"column":21}},"49":{"start":{"line":112,"column":1},"end":{"line":119,"column":4}},"50":{"start":{"line":113,"column":2},"end":{"line":113,"column":43}},"51":{"start":{"line":114,"column":2},"end":{"line":115,"column":32}},"52":{"start":{"line":115,"column":3},"end":{"line":115,"column":32}},"53":{"start":{"line":117,"column":2},"end":{"line":117,"column":56}},"54":{"start":{"line":118,"column":2},"end":{"line":118,"column":23}},"55":{"start":{"line":121,"column":1},"end":{"line":121,"column":13}}},"branchMap":{"1":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},{"start":{"line":22,"column":1},"end":{"line":22,"column":1}}]},"2":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":2},"end":{"line":29,"column":2}},{"start":{"line":29,"column":2},"end":{"line":29,"column":2}}]},"3":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":2},"end":{"line":36,"column":2}},{"start":{"line":36,"column":2},"end":{"line":36,"column":2}}]},"4":{"line":39,"type":"cond-expr","locations":[{"start":{"line":39,"column":32},"end":{"line":39,"column":40}},{"start":{"line":39,"column":42},"end":{"line":39,"column":66}}]},"5":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":1},"end":{"line":54,"column":1}},{"start":{"line":54,"column":1},"end":{"line":54,"column":1}}]},"6":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":3},"end":{"line":61,"column":3}},{"start":{"line":61,"column":3},"end":{"line":61,"column":3}}]},"7":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":3},"end":{"line":71,"column":3}},{"start":{"line":71,"column":3},"end":{"line":71,"column":3}}]},"8":{"line":74,"type":"cond-expr","locations":[{"start":{"line":74,"column":33},"end":{"line":74,"column":41}},{"start":{"line":74,"column":43},"end":{"line":74,"column":67}}]},"9":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":2},"end":{"line":103,"column":2}},{"start":{"line":103,"column":2},"end":{"line":103,"column":2}}]},"10":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":7},"end":{"line":105,"column":7}},{"start":{"line":105,"column":7},"end":{"line":105,"column":7}}]}},"code":["/**"," * Static Utilities for writing files in ARFF format - the format used by WEKA."," *"," * @note for READING files in ARFF format, see https://github.com/chesles/node-arff"," * "," * @author Erel Segal-Halevi"," * @since 2013-08"," */","","","var _ = require('underscore')._;","var FeaturesUnit = require('../features');","","/**"," * convert a single dataset to Weka ARFF string."," * @param dataset an array of samples in the format {input: {feature1: xxx, feature2: yyy, ...}, output: [1,2,3]}"," * @param relationName string for the @relation on the top of the file."," * @param featureExtractor [optional]"," * @return an ARFF string. "," */","exports.toARFF = function(dataset, relationName, featureExtractor) {","\tif (!featureExtractor) featureExtractor=_.identity;","\t","\tvar featureLookupTable = new FeaturesUnit.FeatureLookupTable();","\t","\t// Extract the input attributes (- features):","\tdataset.forEach(function(datum) {","\t\tdatum.input = featureExtractor(datum.input, {});","\t\tif (!_.isObject(datum.input))","\t\t\tthrow new Error(\"Expected feature vector to be a hash, but found \"+JSON.stringify(datum.input));","\t\tfeatureLookupTable.addFeatures(datum.input);","\t});","\t","\t// Extract the target attributes (- classes):","\tdataset.forEach(function(datum) {","\t\tif (!_.isArray(datum.output))","\t\t\tdatum.output = [datum.output];","\t\tdatum.output = datum.output.map(function(anOutput) {","\t\t\treturn _.isString(anOutput)? anOutput: JSON.stringify(anOutput);","\t\t});","\t\tfeatureLookupTable.addFeatures(datum.output);","\t});","","\t//console.dir(featureLookupTable);","\treturn toARFFLocal(dataset, relationName, featureLookupTable);","}","","/**"," * convert many dataset to Weka ARFF files."," * @param mapFileNameToDataset an array of samples in the format {input: {feature1: xxx, feature2: yyy, ...}, output: [1,2,3]}"," * @return an ARFF file. "," */","exports.toARFFs = function(outputFolder, mapFileNameToDataset, featureExtractor) {","\tif (!featureExtractor) featureExtractor=_.identity;","\tvar featureLookupTable = new FeaturesUnit.FeatureLookupTable();","\t","\t// Extract the input attributes (- features):","\tfor (var relationName in mapFileNameToDataset) {","\t\tmapFileNameToDataset[relationName].forEach(function(datum) {","\t\t\tdatum.input = featureExtractor(datum.input, {});","\t\t\tif (!_.isObject(datum.input))","\t\t\t\tthrow new Error(\"Expected feature vector to be a hash, but found \"+JSON.stringify(datum.input));","\t\t\tfeatureLookupTable.addFeatures(datum.input);","\t\t});","\t}","\t","\t","\t// Extract the target attributes (- classes):","\tfor (var relationName in mapFileNameToDataset) {","\t\tmapFileNameToDataset[relationName].forEach(function(datum) {","\t\t\tif (!_.isArray(datum.output))","\t\t\t\tdatum.output = [datum.output];","\t\t\tdatum.output = datum.output.map(function(anOutput) {","\t\t\t\treturn _.isString(anOutput)? anOutput: JSON.stringify(anOutput);","\t\t\t});","\t\t\tfeatureLookupTable.addFeatures(datum.output);","\t\t});","\t}","\t","","\t//console.dir(featureLookupTable);","","\tvar fs = require('fs');","\tfor (var relationName in mapFileNameToDataset) {","\t\tfs.writeFileSync(outputFolder+\"/\"+relationName+\".arff\", ","\t\t\ttoARFFLocal(mapFileNameToDataset[relationName], relationName, featureLookupTable));","\t}","}","","","/**"," * convert a single dataset to Weka ARFF string."," * @param dataset an array of samples in the format {input: {feature1: xxx, feature2: yyy, ...}, output: [1,2,3]}"," * @param relationName string for the @relation on the top of the file."," * @param featureLookupTable maps features to indices"," * @return an ARFF string. "," */","var toARFFLocal = function(dataset, relationName, featureLookupTable) {","\tvar arff = \"% Automatically generated by Node.js\\n\";","\tarff += \"@relation \"+relationName+\"\\n\";","","\tfeatureLookupTable.featureIndexToFeatureName.forEach(function(featureName) {","\t\tif (_.isUndefined(featureName)) ","\t\t\tarff += \"@attribute undefined {0,1}\"+\"\\n\";","\t\telse if (!_.isString(featureName))","\t\t\tthrow new Error(\"Expected featureName to be a string, but found \"+JSON.stringify(featureName));","\t\telse arff += \"@attribute \"+featureName.replace(/[^a-zA-Z0-9]/g, \"_\")+\" \"+\"{0,1}\"+\"\\n\";","\t});","","\tarff += \"\\n@data\\n\";","\t","\tdataset.forEach(function(datum) {","\t\tvar datumArff = _.clone(datum.input, {});","\t\tfor (var i=0; i<datum.output.length; ++i)","\t\t\tdatumArff[datum.output[i]]=1;","\t\t//console.dir(datumArff);","\t\tvar array = featureLookupTable.hashToArray(datumArff);","\t\tarff += array + \"\\n\";","\t});","","\treturn arff;","};","",""],"l":{"11":1,"12":1,"21":1,"22":0,"24":0,"27":0,"28":0,"29":0,"30":0,"31":0,"35":0,"36":0,"37":0,"38":0,"39":0,"41":0,"45":0,"53":1,"54":0,"55":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"76":0,"83":0,"84":0,"85":0,"98":1,"99":0,"100":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"110":0,"112":0,"113":0,"114":0,"115":0,"117":0,"118":0,"121":0}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/formats/json.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/formats/json.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":13,"loc":{"start":{"line":13,"column":17},"end":{"line":13,"column":35}}}},"statementMap":{"1":{"start":{"line":13,"column":0},"end":{"line":22,"column":1}},"2":{"start":{"line":14,"column":1},"end":{"line":14,"column":12}},"3":{"start":{"line":15,"column":1},"end":{"line":19,"column":2}},"4":{"start":{"line":16,"column":2},"end":{"line":18,"column":31}},"5":{"start":{"line":20,"column":1},"end":{"line":20,"column":17}},"6":{"start":{"line":21,"column":1},"end":{"line":21,"column":13}}},"branchMap":{"1":{"line":17,"type":"cond-expr","locations":[{"start":{"line":17,"column":9},"end":{"line":17,"column":15}},{"start":{"line":17,"column":17},"end":{"line":17,"column":23}}]}},"code":["/**"," * Small utility for writing a dataset in JSON format."," *"," * @author Erel Segal-Halevi"," * @since 2013-08"," */","","","/**"," * convert a single dataset to compact JSON format."," * @param dataset an array of samples in the format {input: {feature1: xxx, feature2: yyy, ...}, output: [1,2,3]}"," */","exports.toJSON = function(dataset) {","\tjson = \"[\";","\tfor (var i=0; i<dataset.length; ++i) {","\t\tjson += (","\t\t\t(i>0? \"\\n, \": \"\\n  \")+","\t\t\tJSON.stringify(dataset[i]));","\t}\t","\tjson += \"\\n]\\n\";","\treturn json;","}","",""],"l":{"13":1,"14":0,"15":0,"16":0,"20":0,"21":0}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/formats/tsv.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/formats/tsv.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":16},"end":{"line":12,"column":45}}},"2":{"name":"(anonymous_2)","line":14,"loc":{"start":{"line":14,"column":17},"end":{"line":14,"column":34}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":17,"column":1}},"2":{"start":{"line":13,"column":1},"end":{"line":13,"column":32}},"3":{"start":{"line":13,"column":17},"end":{"line":13,"column":32}},"4":{"start":{"line":14,"column":1},"end":{"line":16,"column":4}},"5":{"start":{"line":15,"column":2},"end":{"line":15,"column":76}}},"branchMap":{"1":{"line":13,"type":"if","locations":[{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},{"start":{"line":13,"column":1},"end":{"line":13,"column":1}}]}},"code":["/**"," * Small utility for writing a dataset in tab-separated-values format."," *"," * @author Erel Segal-Halevi"," * @since 2013-08"," */","","","/**"," * Write the dataset, one sample per line, with the given separator between sample and output. "," */","exports.toTSV = function(dataset, separator) {","\tif (!separator) separator=\"\\t\"; ","\tdataset.forEach(function(sample) {","\t\tconsole.log(JSON.stringify(sample.input)+separator+\"[\"+sample.output+\"]\");","\t});","}",""],"l":{"12":1,"13":0,"14":0,"15":0}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/utils/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/utils/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":18,"column":1}}},"branchMap":{},"code":["//var trainAndTest = require(\"./trainAndTest\"); ","module.exports = {","\thash: require(\"./hash\"),","\tpartitions: require(\"./partitions\"),","\tPrecisionRecall: require(\"./PrecisionRecall\"),","//\tbars: require(\"./bars.js\"),","//\ttestLite: trainAndTest.testLite,","//\ttest: trainAndTest.test,","//\tcompare: trainAndTest.compare,","//\ttrainAndTestLite: trainAndTest.trainAndTestLite,","//\ttrainAndTest: trainAndTest.trainAndTest,","//\ttrainAndCompare: trainAndTest.trainAndCompare,","//\tlearningCurve: trainAndTest.learningCurve,","//\tsplitToEasyAndHard: trainAndTest.splitToEasyAndHard,","\t","//\twriteDataset: require(\"./trainAndTest\").writeDataset,","\thammingDistance: require(\"./hamming\").hammingDistance,","}",""],"l":{"2":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/utils/hamming.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/utils/hamming.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":22},"end":{"line":12,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":23,"column":2}},"2":{"start":{"line":13,"column":1},"end":{"line":13,"column":11}},"3":{"start":{"line":14,"column":1},"end":{"line":17,"column":2}},"4":{"start":{"line":15,"column":2},"end":{"line":16,"column":7}},"5":{"start":{"line":16,"column":3},"end":{"line":16,"column":7}},"6":{"start":{"line":18,"column":1},"end":{"line":21,"column":2}},"7":{"start":{"line":19,"column":2},"end":{"line":20,"column":7}},"8":{"start":{"line":20,"column":3},"end":{"line":20,"column":7}},"9":{"start":{"line":22,"column":1},"end":{"line":22,"column":10}},"10":{"start":{"line":25,"column":0},"end":{"line":25,"column":53}}},"branchMap":{"1":{"line":15,"type":"if","locations":[{"start":{"line":15,"column":2},"end":{"line":15,"column":2}},{"start":{"line":15,"column":2},"end":{"line":15,"column":2}}]},"2":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":2},"end":{"line":19,"column":2}},{"start":{"line":19,"column":2},"end":{"line":19,"column":2}}]}},"code":["/** "," *"," * Calculate Hamming distance between two sets "," *"," */","","","/**"," * @param a, b - arrays"," * @return number of elements in a-b plus number of elements in b-a"," */","var hammingDistance = function(a,b) {","\tvar d = 0;","\tfor (var i=0; i<a.length; ++i) {","\t\tif (b.indexOf(a[i])<0)","\t\t\td++;","\t}","\tfor (var i=0; i<b.length; ++i) {","\t\tif (a.indexOf(b[i])<0)","\t\t\td++;","\t}","\treturn d;","};","","module.exports = {hammingDistance:  hammingDistance};",""],"l":{"12":1,"13":0,"14":0,"15":0,"16":0,"18":0,"19":0,"20":0,"22":0,"25":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/EnhancedClassifier.2014.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/EnhancedClassifier.2014.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":1,"225":0,"226":1,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0},"fnMap":{"1":{"name":"(anonymous_1)","line":37,"loc":{"start":{"line":37,"column":25},"end":{"line":37,"column":40}}},"2":{"name":"(anonymous_2)","line":81,"loc":{"start":{"line":81,"column":22},"end":{"line":81,"column":50}}},"3":{"name":"(anonymous_3)","line":86,"loc":{"start":{"line":86,"column":16},"end":{"line":86,"column":38}}},"4":{"name":"(anonymous_4)","line":92,"loc":{"start":{"line":92,"column":39},"end":{"line":92,"column":84}}},"5":{"name":"(anonymous_5)","line":103,"loc":{"start":{"line":103,"column":24},"end":{"line":103,"column":53}}},"6":{"name":"(anonymous_6)","line":111,"loc":{"start":{"line":111,"column":22},"end":{"line":111,"column":49}}},"7":{"name":"(anonymous_7)","line":120,"loc":{"start":{"line":120,"column":19},"end":{"line":120,"column":36}}},"8":{"name":"(anonymous_8)","line":138,"loc":{"start":{"line":138,"column":19},"end":{"line":138,"column":54}}},"9":{"name":"(anonymous_9)","line":152,"loc":{"start":{"line":152,"column":17},"end":{"line":152,"column":32}}},"10":{"name":"(anonymous_10)","line":157,"loc":{"start":{"line":157,"column":20},"end":{"line":157,"column":39}}},"11":{"name":"(anonymous_11)","line":160,"loc":{"start":{"line":160,"column":18},"end":{"line":160,"column":43}}},"12":{"name":"(anonymous_12)","line":167,"loc":{"start":{"line":167,"column":25},"end":{"line":167,"column":42}}},"13":{"name":"(anonymous_13)","line":201,"loc":{"start":{"line":201,"column":18},"end":{"line":201,"column":37}}},"14":{"name":"(anonymous_14)","line":209,"loc":{"start":{"line":209,"column":16},"end":{"line":209,"column":35}}},"15":{"name":"(anonymous_15)","line":218,"loc":{"start":{"line":218,"column":20},"end":{"line":218,"column":64}}},"16":{"name":"(anonymous_16)","line":247,"loc":{"start":{"line":247,"column":14},"end":{"line":247,"column":40}}},"17":{"name":"(anonymous_17)","line":265,"loc":{"start":{"line":265,"column":13},"end":{"line":265,"column":31}}},"18":{"name":"(anonymous_18)","line":277,"loc":{"start":{"line":277,"column":25},"end":{"line":277,"column":41}}},"19":{"name":"(anonymous_19)","line":313,"loc":{"start":{"line":313,"column":18},"end":{"line":313,"column":34}}},"20":{"name":"(anonymous_20)","line":328,"loc":{"start":{"line":328,"column":15},"end":{"line":328,"column":60}}},"21":{"name":"(anonymous_21)","line":345,"loc":{"start":{"line":345,"column":17},"end":{"line":345,"column":32}}},"22":{"name":"(anonymous_22)","line":347,"loc":{"start":{"line":347,"column":24},"end":{"line":347,"column":40}}},"23":{"name":"(anonymous_23)","line":363,"loc":{"start":{"line":363,"column":11},"end":{"line":363,"column":86}}},"24":{"name":"(anonymous_24)","line":389,"loc":{"start":{"line":389,"column":17},"end":{"line":389,"column":32}}},"25":{"name":"(anonymous_25)","line":405,"loc":{"start":{"line":405,"column":42},"end":{"line":405,"column":53}}},"26":{"name":"(anonymous_26)","line":417,"loc":{"start":{"line":417,"column":26},"end":{"line":417,"column":42}}},"27":{"name":"(anonymous_27)","line":438,"loc":{"start":{"line":438,"column":33},"end":{"line":438,"column":44}}},"28":{"name":"(anonymous_28)","line":466,"loc":{"start":{"line":466,"column":10},"end":{"line":466,"column":21}}},"29":{"name":"(anonymous_29)","line":477,"loc":{"start":{"line":477,"column":15},"end":{"line":477,"column":34}}},"30":{"name":"(anonymous_30)","line":484,"loc":{"start":{"line":484,"column":35},"end":{"line":484,"column":51}}},"31":{"name":"(anonymous_31)","line":491,"loc":{"start":{"line":491,"column":10},"end":{"line":491,"column":29}}},"32":{"name":"(anonymous_32)","line":504,"loc":{"start":{"line":504,"column":12},"end":{"line":504,"column":27}}},"33":{"name":"(anonymous_33)","line":521,"loc":{"start":{"line":521,"column":16},"end":{"line":521,"column":27}}},"34":{"name":"(anonymous_34)","line":527,"loc":{"start":{"line":527,"column":21},"end":{"line":527,"column":39}}},"35":{"name":"(anonymous_35)","line":531,"loc":{"start":{"line":531,"column":23},"end":{"line":531,"column":60}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":34}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":32}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":36}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":36}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":62}},"6":{"start":{"line":37,"column":0},"end":{"line":75,"column":1}},"7":{"start":{"line":38,"column":1},"end":{"line":41,"column":2}},"8":{"start":{"line":39,"column":2},"end":{"line":39,"column":20}},"9":{"start":{"line":40,"column":2},"end":{"line":40,"column":54}},"10":{"start":{"line":43,"column":1},"end":{"line":43,"column":45}},"11":{"start":{"line":45,"column":1},"end":{"line":45,"column":41}},"12":{"start":{"line":46,"column":1},"end":{"line":46,"column":37}},"13":{"start":{"line":47,"column":1},"end":{"line":47,"column":49}},"14":{"start":{"line":48,"column":1},"end":{"line":48,"column":83}},"15":{"start":{"line":49,"column":1},"end":{"line":49,"column":53}},"16":{"start":{"line":50,"column":1},"end":{"line":50,"column":49}},"17":{"start":{"line":52,"column":1},"end":{"line":52,"column":57}},"18":{"start":{"line":53,"column":1},"end":{"line":53,"column":74}},"19":{"start":{"line":54,"column":1},"end":{"line":58,"column":3}},"20":{"start":{"line":56,"column":5},"end":{"line":56,"column":36}},"21":{"start":{"line":57,"column":2},"end":{"line":57,"column":37}},"22":{"start":{"line":59,"column":1},"end":{"line":59,"column":23}},"23":{"start":{"line":61,"column":1},"end":{"line":61,"column":39}},"24":{"start":{"line":62,"column":1},"end":{"line":62,"column":33}},"25":{"start":{"line":63,"column":1},"end":{"line":63,"column":46}},"26":{"start":{"line":70,"column":1},"end":{"line":70,"column":30}},"27":{"start":{"line":72,"column":1},"end":{"line":72,"column":44}},"28":{"start":{"line":73,"column":1},"end":{"line":73,"column":46}},"29":{"start":{"line":74,"column":1},"end":{"line":74,"column":42}},"30":{"start":{"line":78,"column":0},"end":{"line":524,"column":1}},"31":{"start":{"line":82,"column":2},"end":{"line":82,"column":60}},"32":{"start":{"line":87,"column":2},"end":{"line":88,"column":76}},"33":{"start":{"line":88,"column":3},"end":{"line":88,"column":76}},"34":{"start":{"line":93,"column":2},"end":{"line":100,"column":3}},"35":{"start":{"line":94,"column":3},"end":{"line":98,"column":4}},"36":{"start":{"line":95,"column":4},"end":{"line":95,"column":70}},"37":{"start":{"line":97,"column":4},"end":{"line":97,"column":100}},"38":{"start":{"line":99,"column":3},"end":{"line":99,"column":112}},"39":{"start":{"line":104,"column":2},"end":{"line":108,"column":3}},"40":{"start":{"line":105,"column":3},"end":{"line":105,"column":48}},"41":{"start":{"line":106,"column":3},"end":{"line":107,"column":62}},"42":{"start":{"line":107,"column":4},"end":{"line":107,"column":62}},"43":{"start":{"line":112,"column":2},"end":{"line":116,"column":3}},"44":{"start":{"line":113,"column":3},"end":{"line":113,"column":44}},"45":{"start":{"line":114,"column":3},"end":{"line":115,"column":58}},"46":{"start":{"line":115,"column":4},"end":{"line":115,"column":58}},"47":{"start":{"line":121,"column":2},"end":{"line":133,"column":3}},"48":{"start":{"line":123,"column":3},"end":{"line":132,"column":4}},"49":{"start":{"line":124,"column":4},"end":{"line":131,"column":5}},"50":{"start":{"line":125,"column":5},"end":{"line":127,"column":6}},"51":{"start":{"line":126,"column":6},"end":{"line":126,"column":43}},"52":{"start":{"line":129,"column":5},"end":{"line":129,"column":21}},"53":{"start":{"line":130,"column":5},"end":{"line":130,"column":76}},"54":{"start":{"line":135,"column":2},"end":{"line":135,"column":16}},"55":{"start":{"line":139,"column":2},"end":{"line":139,"column":24}},"56":{"start":{"line":140,"column":2},"end":{"line":147,"column":3}},"57":{"start":{"line":141,"column":3},"end":{"line":146,"column":4}},"58":{"start":{"line":142,"column":4},"end":{"line":142,"column":18}},"59":{"start":{"line":143,"column":4},"end":{"line":143,"column":39}},"60":{"start":{"line":145,"column":4},"end":{"line":145,"column":87}},"61":{"start":{"line":149,"column":2},"end":{"line":149,"column":18}},"62":{"start":{"line":153,"column":2},"end":{"line":154,"column":39}},"63":{"start":{"line":154,"column":3},"end":{"line":154,"column":39}},"64":{"start":{"line":158,"column":2},"end":{"line":164,"column":3}},"65":{"start":{"line":159,"column":3},"end":{"line":159,"column":50}},"66":{"start":{"line":160,"column":3},"end":{"line":163,"column":11}},"67":{"start":{"line":161,"column":4},"end":{"line":161,"column":42}},"68":{"start":{"line":162,"column":4},"end":{"line":162,"column":37}},"69":{"start":{"line":168,"column":2},"end":{"line":197,"column":3}},"70":{"start":{"line":169,"column":3},"end":{"line":169,"column":50}},"71":{"start":{"line":170,"column":3},"end":{"line":195,"column":4}},"72":{"start":{"line":171,"column":4},"end":{"line":171,"column":33}},"73":{"start":{"line":172,"column":4},"end":{"line":175,"column":6}},"74":{"start":{"line":174,"column":5},"end":{"line":174,"column":13}},"75":{"start":{"line":177,"column":4},"end":{"line":194,"column":6}},"76":{"start":{"line":179,"column":6},"end":{"line":193,"column":8}},"77":{"start":{"line":181,"column":7},"end":{"line":181,"column":65}},"78":{"start":{"line":185,"column":8},"end":{"line":192,"column":10}},"79":{"start":{"line":187,"column":10},"end":{"line":191,"column":12}},"80":{"start":{"line":189,"column":11},"end":{"line":189,"column":69}},"81":{"start":{"line":196,"column":2},"end":{"line":196,"column":29}},"82":{"start":{"line":198,"column":2},"end":{"line":198,"column":15}},"83":{"start":{"line":202,"column":2},"end":{"line":202,"column":23}},"84":{"start":{"line":203,"column":2},"end":{"line":205,"column":3}},"85":{"start":{"line":204,"column":3},"end":{"line":204,"column":57}},"86":{"start":{"line":206,"column":2},"end":{"line":206,"column":15}},"87":{"start":{"line":210,"column":2},"end":{"line":215,"column":3}},"88":{"start":{"line":212,"column":3},"end":{"line":213,"column":93}},"89":{"start":{"line":213,"column":4},"end":{"line":213,"column":93}},"90":{"start":{"line":214,"column":3},"end":{"line":214,"column":50}},"91":{"start":{"line":220,"column":2},"end":{"line":232,"column":3}},"92":{"start":{"line":221,"column":3},"end":{"line":227,"column":4}},"93":{"start":{"line":222,"column":4},"end":{"line":222,"column":37}},"94":{"start":{"line":223,"column":4},"end":{"line":226,"column":29}},"95":{"start":{"line":224,"column":5},"end":{"line":224,"column":29}},"96":{"start":{"line":226,"column":5},"end":{"line":226,"column":29}},"97":{"start":{"line":229,"column":3},"end":{"line":230,"column":29}},"98":{"start":{"line":230,"column":3},"end":{"line":230,"column":29}},"99":{"start":{"line":248,"column":2},"end":{"line":248,"column":61}},"100":{"start":{"line":249,"column":2},"end":{"line":249,"column":41}},"101":{"start":{"line":250,"column":2},"end":{"line":250,"column":71}},"102":{"start":{"line":251,"column":2},"end":{"line":251,"column":31}},"103":{"start":{"line":252,"column":2},"end":{"line":252,"column":35}},"104":{"start":{"line":253,"column":2},"end":{"line":253,"column":70}},"105":{"start":{"line":254,"column":2},"end":{"line":254,"column":45}},"106":{"start":{"line":255,"column":2},"end":{"line":255,"column":46}},"107":{"start":{"line":256,"column":2},"end":{"line":257,"column":67}},"108":{"start":{"line":257,"column":3},"end":{"line":257,"column":67}},"109":{"start":{"line":266,"column":2},"end":{"line":266,"column":51}},"110":{"start":{"line":267,"column":2},"end":{"line":267,"column":53}},"111":{"start":{"line":269,"column":3},"end":{"line":275,"column":5}},"112":{"start":{"line":272,"column":4},"end":{"line":272,"column":18}},"113":{"start":{"line":273,"column":4},"end":{"line":273,"column":22}},"114":{"start":{"line":274,"column":4},"end":{"line":274,"column":107}},"115":{"start":{"line":277,"column":3},"end":{"line":309,"column":12}},"116":{"start":{"line":279,"column":4},"end":{"line":285,"column":5}},"117":{"start":{"line":280,"column":5},"end":{"line":280,"column":95}},"118":{"start":{"line":284,"column":5},"end":{"line":284,"column":74}},"119":{"start":{"line":287,"column":4},"end":{"line":288,"column":37}},"120":{"start":{"line":288,"column":5},"end":{"line":288,"column":37}},"121":{"start":{"line":289,"column":4},"end":{"line":289,"column":29}},"122":{"start":{"line":291,"column":4},"end":{"line":291,"column":53}},"123":{"start":{"line":294,"column":4},"end":{"line":295,"column":16}},"124":{"start":{"line":295,"column":5},"end":{"line":295,"column":16}},"125":{"start":{"line":297,"column":4},"end":{"line":297,"column":40}},"126":{"start":{"line":299,"column":4},"end":{"line":299,"column":78}},"127":{"start":{"line":301,"column":4},"end":{"line":302,"column":38}},"128":{"start":{"line":302,"column":5},"end":{"line":302,"column":38}},"129":{"start":{"line":304,"column":4},"end":{"line":305,"column":46}},"130":{"start":{"line":305,"column":5},"end":{"line":305,"column":46}},"131":{"start":{"line":307,"column":4},"end":{"line":307,"column":27}},"132":{"start":{"line":308,"column":4},"end":{"line":308,"column":17}},"133":{"start":{"line":311,"column":3},"end":{"line":311,"column":31}},"134":{"start":{"line":313,"column":2},"end":{"line":318,"column":11}},"135":{"start":{"line":315,"column":3},"end":{"line":315,"column":74}},"136":{"start":{"line":316,"column":3},"end":{"line":317,"column":62}},"137":{"start":{"line":317,"column":4},"end":{"line":317,"column":62}},"138":{"start":{"line":320,"column":2},"end":{"line":320,"column":38}},"139":{"start":{"line":330,"column":2},"end":{"line":330,"column":60}},"140":{"start":{"line":331,"column":2},"end":{"line":331,"column":80}},"141":{"start":{"line":332,"column":2},"end":{"line":332,"column":69}},"142":{"start":{"line":333,"column":2},"end":{"line":333,"column":45}},"143":{"start":{"line":334,"column":2},"end":{"line":334,"column":83}},"144":{"start":{"line":342,"column":2},"end":{"line":342,"column":24}},"145":{"start":{"line":346,"column":2},"end":{"line":346,"column":35}},"146":{"start":{"line":347,"column":2},"end":{"line":353,"column":11}},"147":{"start":{"line":348,"column":2},"end":{"line":348,"column":77}},"148":{"start":{"line":349,"column":2},"end":{"line":352,"column":3}},"149":{"start":{"line":354,"column":2},"end":{"line":354,"column":16}},"150":{"start":{"line":364,"column":2},"end":{"line":364,"column":22}},"151":{"start":{"line":365,"column":2},"end":{"line":365,"column":40}},"152":{"start":{"line":367,"column":2},"end":{"line":377,"column":4}},"153":{"start":{"line":368,"column":5},"end":{"line":376,"column":13}},"154":{"start":{"line":369,"column":4},"end":{"line":374,"column":6}},"155":{"start":{"line":376,"column":4},"end":{"line":376,"column":13}},"156":{"start":{"line":379,"column":2},"end":{"line":413,"column":3}},"157":{"start":{"line":380,"column":3},"end":{"line":380,"column":86}},"158":{"start":{"line":381,"column":3},"end":{"line":381,"column":85}},"159":{"start":{"line":382,"column":3},"end":{"line":382,"column":73}},"160":{"start":{"line":383,"column":3},"end":{"line":383,"column":76}},"161":{"start":{"line":385,"column":3},"end":{"line":385,"column":42}},"162":{"start":{"line":387,"column":3},"end":{"line":387,"column":31}},"163":{"start":{"line":388,"column":3},"end":{"line":388,"column":25}},"164":{"start":{"line":389,"column":3},"end":{"line":400,"column":12}},"165":{"start":{"line":390,"column":4},"end":{"line":390,"column":31}},"166":{"start":{"line":390,"column":24},"end":{"line":390,"column":31}},"167":{"start":{"line":391,"column":4},"end":{"line":391,"column":85}},"168":{"start":{"line":392,"column":4},"end":{"line":392,"column":86}},"169":{"start":{"line":395,"column":4},"end":{"line":395,"column":36}},"170":{"start":{"line":396,"column":4},"end":{"line":399,"column":5}},"171":{"start":{"line":398,"column":5},"end":{"line":398,"column":59}},"172":{"start":{"line":401,"column":6},"end":{"line":401,"column":18}},"173":{"start":{"line":402,"column":6},"end":{"line":412,"column":4}},"174":{"start":{"line":404,"column":3},"end":{"line":411,"column":4}},"175":{"start":{"line":405,"column":4},"end":{"line":407,"column":8}},"176":{"start":{"line":406,"column":5},"end":{"line":406,"column":59}},"177":{"start":{"line":410,"column":4},"end":{"line":410,"column":43}},"178":{"start":{"line":415,"column":2},"end":{"line":427,"column":3}},"179":{"start":{"line":416,"column":3},"end":{"line":426,"column":4}},"180":{"start":{"line":417,"column":4},"end":{"line":423,"column":14}},"181":{"start":{"line":418,"column":6},"end":{"line":421,"column":60}},"182":{"start":{"line":419,"column":7},"end":{"line":419,"column":66}},"183":{"start":{"line":421,"column":7},"end":{"line":421,"column":60}},"184":{"start":{"line":422,"column":6},"end":{"line":422,"column":19}},"185":{"start":{"line":425,"column":4},"end":{"line":425,"column":61}},"186":{"start":{"line":429,"column":2},"end":{"line":448,"column":4}},"187":{"start":{"line":436,"column":3},"end":{"line":447,"column":5}},"188":{"start":{"line":437,"column":6},"end":{"line":437,"column":19}},"189":{"start":{"line":438,"column":4},"end":{"line":441,"column":12}},"190":{"start":{"line":439,"column":5},"end":{"line":439,"column":118}},"191":{"start":{"line":440,"column":5},"end":{"line":440,"column":37}},"192":{"start":{"line":442,"column":4},"end":{"line":442,"column":22}},"193":{"start":{"line":446,"column":4},"end":{"line":446,"column":115}},"194":{"start":{"line":450,"column":2},"end":{"line":458,"column":18}},"195":{"start":{"line":451,"column":3},"end":{"line":456,"column":5}},"196":{"start":{"line":458,"column":3},"end":{"line":458,"column":18}},"197":{"start":{"line":467,"column":2},"end":{"line":468,"column":67}},"198":{"start":{"line":468,"column":3},"end":{"line":468,"column":67}},"199":{"start":{"line":470,"column":2},"end":{"line":470,"column":44}},"200":{"start":{"line":478,"column":2},"end":{"line":479,"column":72}},"201":{"start":{"line":479,"column":3},"end":{"line":479,"column":72}},"202":{"start":{"line":481,"column":2},"end":{"line":482,"column":25}},"203":{"start":{"line":482,"column":3},"end":{"line":482,"column":25}},"204":{"start":{"line":483,"column":2},"end":{"line":483,"column":19}},"205":{"start":{"line":484,"column":2},"end":{"line":487,"column":5}},"206":{"start":{"line":485,"column":3},"end":{"line":486,"column":30}},"207":{"start":{"line":486,"column":4},"end":{"line":486,"column":30}},"208":{"start":{"line":488,"column":2},"end":{"line":488,"column":17}},"209":{"start":{"line":492,"column":2},"end":{"line":501,"column":4}},"210":{"start":{"line":505,"column":2},"end":{"line":505,"column":44}},"211":{"start":{"line":506,"column":2},"end":{"line":509,"column":3}},"212":{"start":{"line":507,"column":3},"end":{"line":507,"column":61}},"213":{"start":{"line":508,"column":3},"end":{"line":508,"column":55}},"214":{"start":{"line":510,"column":2},"end":{"line":513,"column":3}},"215":{"start":{"line":511,"column":3},"end":{"line":511,"column":57}},"216":{"start":{"line":512,"column":3},"end":{"line":512,"column":51}},"217":{"start":{"line":514,"column":2},"end":{"line":514,"column":63}},"218":{"start":{"line":514,"column":25},"end":{"line":514,"column":63}},"219":{"start":{"line":515,"column":2},"end":{"line":515,"column":84}},"220":{"start":{"line":515,"column":32},"end":{"line":515,"column":84}},"221":{"start":{"line":516,"column":2},"end":{"line":516,"column":64}},"222":{"start":{"line":517,"column":2},"end":{"line":517,"column":42}},"223":{"start":{"line":522,"column":2},"end":{"line":522,"column":41}},"224":{"start":{"line":527,"column":0},"end":{"line":529,"column":1}},"225":{"start":{"line":528,"column":1},"end":{"line":528,"column":63}},"226":{"start":{"line":531,"column":0},"end":{"line":539,"column":1}},"227":{"start":{"line":532,"column":1},"end":{"line":533,"column":22}},"228":{"start":{"line":533,"column":2},"end":{"line":533,"column":22}},"229":{"start":{"line":534,"column":1},"end":{"line":534,"column":39}},"230":{"start":{"line":535,"column":1},"end":{"line":536,"column":76}},"231":{"start":{"line":536,"column":2},"end":{"line":536,"column":76}},"232":{"start":{"line":537,"column":1},"end":{"line":537,"column":16}},"233":{"start":{"line":538,"column":1},"end":{"line":538,"column":16}},"234":{"start":{"line":541,"column":0},"end":{"line":541,"column":36}}},"branchMap":{"1":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},{"start":{"line":38,"column":1},"end":{"line":38,"column":1}}]},"2":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":36},"end":{"line":53,"column":68}},{"start":{"line":53,"column":72},"end":{"line":53,"column":73}}]},"3":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":1},"end":{"line":54,"column":1}},{"start":{"line":54,"column":1},"end":{"line":54,"column":1}}]},"4":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":5},"end":{"line":54,"column":31}},{"start":{"line":54,"column":33},"end":{"line":54,"column":65}}]},"5":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":2},"end":{"line":87,"column":2}},{"start":{"line":87,"column":2},"end":{"line":87,"column":2}}]},"6":{"line":88,"type":"cond-expr","locations":[{"start":{"line":88,"column":50},"end":{"line":88,"column":60}},{"start":{"line":88,"column":62},"end":{"line":88,"column":74}}]},"7":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":2},"end":{"line":93,"column":2}},{"start":{"line":93,"column":2},"end":{"line":93,"column":2}}]},"8":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":3},"end":{"line":94,"column":3}},{"start":{"line":94,"column":3},"end":{"line":94,"column":3}}]},"9":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":2},"end":{"line":104,"column":2}},{"start":{"line":104,"column":2},"end":{"line":104,"column":2}}]},"10":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":3},"end":{"line":106,"column":3}},{"start":{"line":106,"column":3},"end":{"line":106,"column":3}}]},"11":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":2},"end":{"line":112,"column":2}},{"start":{"line":112,"column":2},"end":{"line":112,"column":2}}]},"12":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":3},"end":{"line":114,"column":3}},{"start":{"line":114,"column":3},"end":{"line":114,"column":3}}]},"13":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":2},"end":{"line":121,"column":2}},{"start":{"line":121,"column":2},"end":{"line":121,"column":2}}]},"14":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":3},"end":{"line":123,"column":3}},{"start":{"line":123,"column":3},"end":{"line":123,"column":3}}]},"15":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":2},"end":{"line":140,"column":2}},{"start":{"line":140,"column":2},"end":{"line":140,"column":2}}]},"16":{"line":153,"type":"if","locations":[{"start":{"line":153,"column":2},"end":{"line":153,"column":2}},{"start":{"line":153,"column":2},"end":{"line":153,"column":2}}]},"17":{"line":158,"type":"if","locations":[{"start":{"line":158,"column":2},"end":{"line":158,"column":2}},{"start":{"line":158,"column":2},"end":{"line":158,"column":2}}]},"18":{"line":168,"type":"if","locations":[{"start":{"line":168,"column":2},"end":{"line":168,"column":2}},{"start":{"line":168,"column":2},"end":{"line":168,"column":2}}]},"19":{"line":172,"type":"if","locations":[{"start":{"line":172,"column":4},"end":{"line":172,"column":4}},{"start":{"line":172,"column":4},"end":{"line":172,"column":4}}]},"20":{"line":177,"type":"if","locations":[{"start":{"line":177,"column":4},"end":{"line":177,"column":4}},{"start":{"line":177,"column":4},"end":{"line":177,"column":4}}]},"21":{"line":179,"type":"if","locations":[{"start":{"line":179,"column":6},"end":{"line":179,"column":6}},{"start":{"line":179,"column":6},"end":{"line":179,"column":6}}]},"22":{"line":185,"type":"if","locations":[{"start":{"line":185,"column":8},"end":{"line":185,"column":8}},{"start":{"line":185,"column":8},"end":{"line":185,"column":8}}]},"23":{"line":187,"type":"if","locations":[{"start":{"line":187,"column":10},"end":{"line":187,"column":10}},{"start":{"line":187,"column":10},"end":{"line":187,"column":10}}]},"24":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":2},"end":{"line":203,"column":2}},{"start":{"line":203,"column":2},"end":{"line":203,"column":2}}]},"25":{"line":210,"type":"if","locations":[{"start":{"line":210,"column":2},"end":{"line":210,"column":2}},{"start":{"line":210,"column":2},"end":{"line":210,"column":2}}]},"26":{"line":213,"type":"binary-expr","locations":[{"start":{"line":213,"column":46},"end":{"line":213,"column":84}},{"start":{"line":213,"column":88},"end":{"line":213,"column":89}}]},"27":{"line":214,"type":"binary-expr","locations":[{"start":{"line":214,"column":25},"end":{"line":214,"column":43}},{"start":{"line":214,"column":45},"end":{"line":214,"column":46}}]},"28":{"line":220,"type":"if","locations":[{"start":{"line":220,"column":2},"end":{"line":220,"column":2}},{"start":{"line":220,"column":2},"end":{"line":220,"column":2}}]},"29":{"line":223,"type":"if","locations":[{"start":{"line":223,"column":4},"end":{"line":223,"column":4}},{"start":{"line":223,"column":4},"end":{"line":223,"column":4}}]},"30":{"line":229,"type":"if","locations":[{"start":{"line":229,"column":3},"end":{"line":229,"column":3}},{"start":{"line":229,"column":3},"end":{"line":229,"column":3}}]},"31":{"line":229,"type":"binary-expr","locations":[{"start":{"line":229,"column":7},"end":{"line":229,"column":16}},{"start":{"line":229,"column":20},"end":{"line":229,"column":34}}]},"32":{"line":256,"type":"if","locations":[{"start":{"line":256,"column":2},"end":{"line":256,"column":2}},{"start":{"line":256,"column":2},"end":{"line":256,"column":2}}]},"33":{"line":269,"type":"if","locations":[{"start":{"line":269,"column":3},"end":{"line":269,"column":3}},{"start":{"line":269,"column":3},"end":{"line":269,"column":3}}]},"34":{"line":279,"type":"if","locations":[{"start":{"line":279,"column":4},"end":{"line":279,"column":4}},{"start":{"line":279,"column":4},"end":{"line":279,"column":4}}]},"35":{"line":287,"type":"if","locations":[{"start":{"line":287,"column":4},"end":{"line":287,"column":4}},{"start":{"line":287,"column":4},"end":{"line":287,"column":4}}]},"36":{"line":287,"type":"binary-expr","locations":[{"start":{"line":287,"column":8},"end":{"line":287,"column":27}},{"start":{"line":287,"column":31},"end":{"line":287,"column":59}}]},"37":{"line":294,"type":"if","locations":[{"start":{"line":294,"column":4},"end":{"line":294,"column":4}},{"start":{"line":294,"column":4},"end":{"line":294,"column":4}}]},"38":{"line":301,"type":"if","locations":[{"start":{"line":301,"column":4},"end":{"line":301,"column":4}},{"start":{"line":301,"column":4},"end":{"line":301,"column":4}}]},"39":{"line":304,"type":"if","locations":[{"start":{"line":304,"column":4},"end":{"line":304,"column":4}},{"start":{"line":304,"column":4},"end":{"line":304,"column":4}}]},"40":{"line":316,"type":"if","locations":[{"start":{"line":316,"column":3},"end":{"line":316,"column":3}},{"start":{"line":316,"column":3},"end":{"line":316,"column":3}}]},"41":{"line":367,"type":"if","locations":[{"start":{"line":367,"column":2},"end":{"line":367,"column":2}},{"start":{"line":367,"column":2},"end":{"line":367,"column":2}}]},"42":{"line":368,"type":"if","locations":[{"start":{"line":368,"column":5},"end":{"line":368,"column":5}},{"start":{"line":368,"column":5},"end":{"line":368,"column":5}}]},"43":{"line":379,"type":"if","locations":[{"start":{"line":379,"column":2},"end":{"line":379,"column":2}},{"start":{"line":379,"column":2},"end":{"line":379,"column":2}}]},"44":{"line":381,"type":"cond-expr","locations":[{"start":{"line":381,"column":29},"end":{"line":381,"column":59}},{"start":{"line":381,"column":61},"end":{"line":381,"column":83}}]},"45":{"line":382,"type":"cond-expr","locations":[{"start":{"line":382,"column":37},"end":{"line":382,"column":66}},{"start":{"line":382,"column":68},"end":{"line":382,"column":72}}]},"46":{"line":383,"type":"cond-expr","locations":[{"start":{"line":383,"column":34},"end":{"line":383,"column":68}},{"start":{"line":383,"column":70},"end":{"line":383,"column":74}}]},"47":{"line":390,"type":"if","locations":[{"start":{"line":390,"column":4},"end":{"line":390,"column":4}},{"start":{"line":390,"column":4},"end":{"line":390,"column":4}}]},"48":{"line":392,"type":"cond-expr","locations":[{"start":{"line":392,"column":30},"end":{"line":392,"column":60}},{"start":{"line":392,"column":62},"end":{"line":392,"column":84}}]},"49":{"line":396,"type":"if","locations":[{"start":{"line":396,"column":4},"end":{"line":396,"column":4}},{"start":{"line":396,"column":4},"end":{"line":396,"column":4}}]},"50":{"line":402,"type":"if","locations":[{"start":{"line":402,"column":6},"end":{"line":402,"column":6}},{"start":{"line":402,"column":6},"end":{"line":402,"column":6}}]},"51":{"line":404,"type":"if","locations":[{"start":{"line":404,"column":3},"end":{"line":404,"column":3}},{"start":{"line":404,"column":3},"end":{"line":404,"column":3}}]},"52":{"line":415,"type":"if","locations":[{"start":{"line":415,"column":2},"end":{"line":415,"column":2}},{"start":{"line":415,"column":2},"end":{"line":415,"column":2}}]},"53":{"line":416,"type":"if","locations":[{"start":{"line":416,"column":3},"end":{"line":416,"column":3}},{"start":{"line":416,"column":3},"end":{"line":416,"column":3}}]},"54":{"line":418,"type":"if","locations":[{"start":{"line":418,"column":6},"end":{"line":418,"column":6}},{"start":{"line":418,"column":6},"end":{"line":418,"column":6}}]},"55":{"line":429,"type":"if","locations":[{"start":{"line":429,"column":2},"end":{"line":429,"column":2}},{"start":{"line":429,"column":2},"end":{"line":429,"column":2}}]},"56":{"line":436,"type":"if","locations":[{"start":{"line":436,"column":3},"end":{"line":436,"column":3}},{"start":{"line":436,"column":3},"end":{"line":436,"column":3}}]},"57":{"line":436,"type":"binary-expr","locations":[{"start":{"line":436,"column":8},"end":{"line":436,"column":17}},{"start":{"line":436,"column":23},"end":{"line":436,"column":41}}]},"58":{"line":450,"type":"if","locations":[{"start":{"line":450,"column":2},"end":{"line":450,"column":2}},{"start":{"line":450,"column":2},"end":{"line":450,"column":2}}]},"59":{"line":467,"type":"if","locations":[{"start":{"line":467,"column":2},"end":{"line":467,"column":2}},{"start":{"line":467,"column":2},"end":{"line":467,"column":2}}]},"60":{"line":478,"type":"if","locations":[{"start":{"line":478,"column":2},"end":{"line":478,"column":2}},{"start":{"line":478,"column":2},"end":{"line":478,"column":2}}]},"61":{"line":481,"type":"if","locations":[{"start":{"line":481,"column":2},"end":{"line":481,"column":2}},{"start":{"line":481,"column":2},"end":{"line":481,"column":2}}]},"62":{"line":485,"type":"if","locations":[{"start":{"line":485,"column":3},"end":{"line":485,"column":3}},{"start":{"line":485,"column":3},"end":{"line":485,"column":3}}]},"63":{"line":494,"type":"cond-expr","locations":[{"start":{"line":494,"column":49},"end":{"line":494,"column":81}},{"start":{"line":494,"column":83},"end":{"line":494,"column":92}}]},"64":{"line":495,"type":"cond-expr","locations":[{"start":{"line":495,"column":45},"end":{"line":495,"column":75}},{"start":{"line":495,"column":77},"end":{"line":495,"column":86}}]},"65":{"line":496,"type":"cond-expr","locations":[{"start":{"line":496,"column":38},"end":{"line":496,"column":55}},{"start":{"line":496,"column":70},"end":{"line":496,"column":79}}]},"66":{"line":497,"type":"cond-expr","locations":[{"start":{"line":497,"column":51},"end":{"line":497,"column":75}},{"start":{"line":497,"column":77},"end":{"line":497,"column":86}}]},"67":{"line":506,"type":"if","locations":[{"start":{"line":506,"column":2},"end":{"line":506,"column":2}},{"start":{"line":506,"column":2},"end":{"line":506,"column":2}}]},"68":{"line":510,"type":"if","locations":[{"start":{"line":510,"column":2},"end":{"line":510,"column":2}},{"start":{"line":510,"column":2},"end":{"line":510,"column":2}}]},"69":{"line":514,"type":"if","locations":[{"start":{"line":514,"column":2},"end":{"line":514,"column":2}},{"start":{"line":514,"column":2},"end":{"line":514,"column":2}}]},"70":{"line":515,"type":"if","locations":[{"start":{"line":515,"column":2},"end":{"line":515,"column":2}},{"start":{"line":515,"column":2},"end":{"line":515,"column":2}}]},"71":{"line":528,"type":"cond-expr","locations":[{"start":{"line":528,"column":31},"end":{"line":528,"column":37}},{"start":{"line":528,"column":39},"end":{"line":528,"column":61}}]},"72":{"line":532,"type":"if","locations":[{"start":{"line":532,"column":1},"end":{"line":532,"column":1}},{"start":{"line":532,"column":1},"end":{"line":532,"column":1}}]},"73":{"line":535,"type":"if","locations":[{"start":{"line":535,"column":1},"end":{"line":535,"column":1}},{"start":{"line":535,"column":1},"end":{"line":535,"column":1}}]}},"code":["/*","TODO: SpellChecker should be reorganized","*/","","var ftrs = require('../features');","var _ = require('underscore')._;","var hash = require('../utils/hash');","var util = require('../utils/list');","var multilabelutils = require('./multilabel/multilabelutils');","","/**"," * EnhancedClassifier - wraps any classifier with feature-extractors and feature-lookup-tables."," * "," * @param opts"," * Obligatory option: 'classifierType', which is the base type of the classifier."," * Optional:"," * * 'inputSplitter' - a function that splits the input samples into sub-samples, for multi-label classification (useful mainly for sentences). "," * * 'normalizer' - a function that normalizes the input samples, before they are sent to feature extraction."," * * 'featureExtractor' - a single feature-extractor (see the \"features\" folder), or an array of extractors, for extracting features from training and classification samples."," * * 'featureExtractorForClassification' - additional feature extractor[s], for extracting features from samples during classification. Used for domain adaptation."," * * 'featureLookupTable' - an instance of FeatureLookupTable for converting features (in the input) to numeric indices and back."," * * 'labelLookupTable' - an instance of FeatureLookupTable for converting labels (classes, in the output) to numeric indices and back."," * * 'multiplyFeaturesByIDF' - boolean - if true, multiply each feature value by log(documentCount / (1+featureDocumentFrequency))"," * * 'minFeatureDocumentFrequency' - int - if positive, ignore features that appeared less than this number in the training set."," * * 'pastTrainingSamples' - an array that keeps all past training samples, to enable retraining."," * * 'spellChecker' - an initialized spell checker from the 'wordsworth' package, to spell-check features during classification."," * * 'bias' - a 'bias' feature with a constant value (usually 1)."," * * 'InputSplitLabel' - a method for special separation of input labels before training"," * * 'OutputSplitLabel' - a method for special separation of output labesl after classification."," * * 'TestSplitLabel' - a method for special separation before a testing"," * * 'TfIdfImpl' - implementation of tf-idf algorithm"," * * 'tokenizer' - implementation of tokenizer"," * * 'instanceFilter' - filter of instance of training data and test data, if training instance is filtered is not used for training, if triaging instance is filtered by classify,"," it's classified empty class.","*/","","var EnhancedClassifier = function(opts) {","\tif (!opts.classifierType) {","\t\tconsole.dir(opts);","\t\tthrow new Error(\"opts must contain classifierType\");","\t}","","\tthis.classifier = new opts.classifierType();","","\tthis.inputSplitter = opts.inputSplitter;","\tthis.setNormalizer(opts.normalizer);","\tthis.setFeatureExtractor(opts.featureExtractor);","\tthis.setFeatureExtractorForClassification(opts.featureExtractorForClassification);","\tthis.setFeatureLookupTable(opts.featureLookupTable);","\tthis.setLabelLookupTable(opts.labelLookupTable);","","\tthis.multiplyFeaturesByIDF = opts.multiplyFeaturesByIDF;","\tthis.minFeatureDocumentFrequency = opts.minFeatureDocumentFrequency || 0;","\tif (opts.multiplyFeaturesByIDF||opts.minFeatureDocumentFrequency) ","\t\t{","    \tthis.tfidf = new opts.TfIdfImpl","\t\tthis.featureDocumentFrequency = {};","\t\t}","\tthis.bias = opts.bias;","","\tthis.spellChecker = opts.spellChecker;","\tthis.tokenizer = opts.tokenizer;","\tthis.instanceFilterRule = opts.instanceFilter","","\t// this.spellChecker =  [require('wordsworth').getInstance(), require('wordsworth').getInstance()],","\t// this.pastTrainingSamples = opts.pastTrainingSamples;","\t// TODO: it looks like the method with creating an array at the definition ","\t// create an array with the same pointer for every classifier of the given class","\t","\tthis.pastTrainingSamples = []","","\tthis.InputSplitLabel = opts.InputSplitLabel","\tthis.OutputSplitLabel = opts.OutputSplitLabel","\tthis.TestSplitLabel = opts.TestSplitLabel","}","","","EnhancedClassifier.prototype = {","","\t/** Set the main feature extractor, used for both training and classification. */","\tsetFeatureExtractor: function (featureExtractor) {","\t\tthis.featureExtractors = ftrs.normalize(featureExtractor);","\t},","\t","\t/** Set the main feature extractor, used for both training and classification. */","\tsetNormalizer: function (normalizer) {","\t\tif (normalizer)","\t\t\tthis.normalizers = (Array.isArray(normalizer)? normalizer: [normalizer]);","\t},","","\t/** Set an additional feature extractor, for classification only. */","\tsetFeatureExtractorForClassification: function (featureExtractorForClassification) {","\t\tif (featureExtractorForClassification) {","\t\t\tif (Array.isArray(featureExtractorForClassification)) {","\t\t\t\tfeatureExtractorForClassification.unshift(this.featureExtractors);","\t\t\t} else {","\t\t\t\tfeatureExtractorForClassification = [this.featureExtractors, featureExtractorForClassification];","\t\t\t}","\t\t\tthis.featureExtractorsForClassification = new ftrs.CollectionOfExtractors(featureExtractorForClassification);","\t\t}","\t},","\t","\tsetFeatureLookupTable: function(featureLookupTable) {","\t\tif (featureLookupTable) {","\t\t\tthis.featureLookupTable = featureLookupTable;","\t\t\tif (this.classifier.setFeatureLookupTable)","\t\t\t\tthis.classifier.setFeatureLookupTable(featureLookupTable);  // for generating clearer explanations only","\t\t}","\t},","\t","\tsetLabelLookupTable: function(labelLookupTable) {","\t\tif (labelLookupTable) {","\t\t\tthis.labelLookupTable = labelLookupTable;","\t\t\tif (this.classifier.setLabelLookupTable)","\t\t\t\tthis.classifier.setLabelLookupTable(labelLookupTable);  // for generating clearer explanations only","\t\t}","\t},","","\t// private function: use this.normalizers to normalize the given sample:","\tnormalizedSample: function(sample) {","\t\tif (!(_.isArray(sample)))","\t\t{","\t\t\tif (this.normalizers) {","\t\t\t\ttry {","\t\t\t\t\tfor (var i in this.normalizers) {\t\t\t\t\t","\t\t\t\t\t\tsample = this.normalizers[i](sample);","\t\t\t\t\t}","\t\t\t\t} catch (err) {","\t\t\t\t\tconsole.log(err)","\t\t\t\t\tthrow new Error(\"Cannot normalize '\"+sample+\"': \"+JSON.stringify(err));","\t\t\t\t}","\t\t\t}","\t\t}","","\t\treturn sample;","\t},","","\tsampleToFeatures: function(sample, featureExtractor) {","\t\tvar features = sample;","\t\tif (featureExtractor) {","\t\t\ttry {","\t\t\t\tfeatures = {};","\t\t\t\tfeatureExtractor(sample, features);","\t\t\t} catch (err) {","\t\t\t\tthrow new Error(\"Cannot extract features from '\"+sample+\"': \"+JSON.stringify(err));","\t\t\t}","\t\t}","","\t\treturn features;","\t},","","\tinstanceFilter: function(data) {","\t\tif (this.instanceFilterRule) ","\t\t\treturn this.instanceFilterRule(data)","\t},","\t","\ttrainSpellChecker: function(features) {","\t\tif (this.spellChecker) {","\t\t\tvar tokens = this.tokenizer.tokenize(features);","\t\t\t_.each(tokens, function(word, key, list){ ","\t\t\t\tthis.spellChecker[1].understand(word); // Adds the given word to the index of the spell-checker.","\t\t\t\tthis.spellChecker[1].train(word);","\t\t\t}, this)","\t\t}","\t},","\t","\tcorrectFeatureSpelling: function(sample) {","\t\tif (this.spellChecker) {","\t\t\tvar features = this.tokenizer.tokenize(sample);","\t\t\tfor (var index in features) {","\t\t\t\tvar feature = features[index]","\t\t\t\tif (!isNaN(parseInt(feature)))  // don't spell-correct numeric features","\t\t\t\t\t{","\t\t\t\t\tcontinue","\t\t\t\t\t}","\t\t\t\t","\t\t\t\tif (!(this.spellChecker[1].exists(feature)))","\t\t\t\t\t{","\t\t\t\t\t\tif (this.spellChecker[1].suggest(feature).length != 0)","\t\t\t\t\t\t\t{","\t\t\t\t\t\t\tfeatures[index] = this.spellChecker[1].suggest(feature)[0]","\t\t\t\t\t\t\t}","\t\t\t\t\t\telse","\t\t\t\t\t\t\t{","\t\t\t\t\t\t\t\tif (!(this.spellChecker[0].exists(feature)))","\t\t\t\t\t\t\t\t\t{","\t\t\t\t\t\t\t\t\t\tif (this.spellChecker[0].suggest(feature).length != 0)","\t\t\t\t\t\t\t\t\t\t\t{","\t\t\t\t\t\t\t\t\t\t\tfeatures[index] = this.spellChecker[0].suggest(feature)[0]","\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t}","\t\tsample = features.join(\" \")","\t\t}","\t\treturn sample","\t},","\t","\tfeaturesToArray: function(features) {","\t\tvar array = features;","\t\tif (this.featureLookupTable) {","\t\t\tarray = this.featureLookupTable.hashToArray(features);","\t\t}","\t\treturn array;","\t},","\t","\tcountFeatures: function(features) {","\t\tif (this.featureDocumentFrequency) {","\t\t\t// this.tfidf.addDocument(datum.input);","\t\t\tfor (var feature in features)","\t\t\t\tthis.featureDocumentFrequency[feature] = (this.featureDocumentFrequency[feature] || 0)+1;","\t\t\tthis.documentCount = (this.documentCount||0)+1;","\t\t}","\t},","\t","\teditFeatureValues: function(features, remove_unknown_features) {","","\t\tif (this.multiplyFeaturesByIDF) { ","\t\t\tfor (var feature in features) { ","\t\t\t\tvar IDF = this.tfidf.idf(feature)","\t\t\t\tif (IDF != Infinity)","\t\t\t\t\tfeatures[feature] *= IDF","\t\t\t\telse","\t\t\t\t\tdelete features[feature]","\t\t\t}","","\t\t\tif (this.bias && !features.bias)","\t\t\tfeatures.bias = this.bias;","","\t\t}","\t\t// if (remove_unknown_features && this.minFeatureDocumentFrequency>0)","\t\t\t// for (var feature in features)","\t\t\t\t// if ((this.featureDocumentFrequency[feature]||0)<this.minFeatureDocumentFrequency)","\t\t\t\t\t// delete features[feature];","\t\t","\t},","\t","","\t/**","\t * Online training: ","\t * Tell the classifier that the given sample belongs to the given classes.","\t * @param sample a document.","\t * @param classes an array whose VALUES are classes.","\t */","\ttrainOnline: function(sample, classes) {","\t\tclasses = normalizeClasses(classes, this.labelLookupTable);","\t\tsample = this.normalizedSample(sample);","\t\tvar features = this.sampleToFeatures(sample, this.featureExtractors);","\t\tthis.countFeatures(features);","\t\tthis.trainSpellChecker(features);","\t\tthis.editFeatureValues(features, /*remove_unknown_features=*/false);","\t\tvar array = this.featuresToArray(features);","\t\tthis.classifier.trainOnline(array, classes);","\t\tif (this.pastTrainingSamples)","\t\t\tthis.pastTrainingSamples.push({input: sample, output: classes});","\t},","","\t/**","\t * Batch training: ","\t * Train the classifier with all the given documents.","\t * @param dataset an array with objects of the format: {input: sample1, output: [class11, class12...]}","\t */","\ttrainBatch: function(dataset) {","\t\tvar featureLookupTable = this.featureLookupTable;","\t\tvar pastTrainingSamples = this.pastTrainingSamples;","","\t\t\tif (this.spellChecker) {","\t\t\t\t// var seeds = fs.readFileSync('./node_modules/wordsworth/data/seed.txt')","\t\t\t\t// var trainings = fs.readFileSync('./node_modules/wordsworth/data/training.txt')","\t\t\t\tvar seeds = []","\t\t\t\tvar trainings = []","\t\t\t\tthis.spellChecker[0].initializeSync(seeds.toString().split(\"\\r\\n\"), trainings.toString().split(\"\\r\\n\"))","\t\t\t\t}","","\t\t\tdataset = dataset.map(function(datum) {","","\t\t\t\tif (typeof this.InputSplitLabel === 'function') {","\t\t\t\t\tdatum.output = (this.InputSplitLabel(multilabelutils.normalizeOutputLabels(datum.output)))\t","\t\t\t\t}","\t\t\t\telse","\t\t\t\t{","\t\t\t\t\tdatum.output = normalizeClasses(datum.output, this.labelLookupTable);","\t\t\t\t}","","\t\t\t\tif (pastTrainingSamples && dataset!=pastTrainingSamples)","\t\t\t\t\tpastTrainingSamples.push(datum);","\t\t\t\tdatum = _(datum).clone();","","\t\t\t\tdatum.input = this.normalizedSample(datum.input);","","\t\t\t\t/*true - this instance is filtered as not useful*/","\t\t\t\tif (this.instanceFilter(datum) == true)","\t\t\t\t\treturn null","","\t\t\t\tthis.trainSpellChecker(datum.input);","","\t\t\t\tvar features = this.sampleToFeatures(datum.input, this.featureExtractors);","\t\t\t\t","\t\t\t\tif (this.tfidf)","\t\t\t\t\tthis.tfidf.addDocument(features);","\t\t\t\t// this.trainSpellChecker(features);","\t\t\t\tif (featureLookupTable)","\t\t\t\t\tfeatureLookupTable.addFeatures(features);","","\t\t\t\tdatum.input = features;","\t\t\t\treturn datum;","\t\t\t}, this);","","\t\t\tdataset = _.compact(dataset)","","\t\tdataset.forEach(function(datum) {","\t\t\t// run on single sentence","\t\t\tthis.editFeatureValues(datum.input, /*remove_unknown_features=*/false);","\t\t\tif (featureLookupTable)","\t\t\t\tdatum.input = featureLookupTable.hashToArray(datum.input);","\t\t}, this);","","\t\tthis.classifier.trainBatch(dataset);","\t},","","\t/**","\t * internal function - classify a single segment of the input (used mainly when there is an inputSplitter) ","\t * @param sample a document.","\t * @return an array whose VALUES are classes.","\t */","\tclassifyPart: function(sample, explain, continuous_output) {","\t\t","\t\tvar samplecorrected = this.correctFeatureSpelling(sample);","\t\tvar features = this.sampleToFeatures(samplecorrected, this.featureExtractors);","\t\tthis.editFeatureValues(features, /*remove_unknown_features=*/true);","\t\tvar array = this.featuresToArray(features);","\t\tvar classification = this.classifier.classify(array, explain, continuous_output);","\t\t","\t\t// if (this.spellChecker && classification.explanation) {","\t\t\t// if (Array.isArray(classification.explanation))","\t\t\t\t// classification.explanation.unshift({SpellCorrectedFeatures: JSON.stringify(features)});","\t\t\t// else","\t\t\t\t// classification.explanation['SpellCorrectedFeatures']=JSON.stringify(features);","\t\t// }","\t\treturn classification;","\t},","","\toutputToFormat: function(data) {","\t\tdataset = util.clonedataset(data)","\t\tdataset = dataset.map(function(datum) {","\t\tvar normalizedLabels = multilabelutils.normalizeOutputLabels(datum.output);","\t\treturn {","\t\t\tinput: datum.input,","\t\t\toutput: this.TestSplitLabel(normalizedLabels)","\t\t}","\t\t}, this);","\t\treturn dataset","\t},","","\t/**","\t * Use the model trained so far to classify a new sample.","\t * @param sample a document.","\t * @return an array whose VALUES are classes.","\t * @original is the original gold standard labels is used only for statistics.","\t */","\tclassify: function(sample, explain, continuous_output, original, classifier_compare) {","\t\tvar initial = sample","\t\tsample = this.normalizedSample(sample)","","\t\tif (this.instanceFilter(sample))","\t\t\t{\tif (explain>0) ","\t\t\t\treturn {","\t\t\t\t\tclasses: [],","\t\t\t\t\tscores: {},","\t\t\t\t\texplanation: {} ","\t\t\t\t\t// bonus: bonus","\t\t\t\t};","\t\t\telse","\t\t\t\treturn []","\t\t\t}\t\t","\t\t","\t\tif (!this.inputSplitter) {","\t\t\tvar classesWithExplanation = this.classifyPart(sample, explain, continuous_output);","\t\t\tvar classes = (explain>0? classesWithExplanation.classes: classesWithExplanation);","\t\t\tvar scores =  (continuous_output? classesWithExplanation.scores: null)","\t\t\tvar explanations = (explain>0? classesWithExplanation.explanation: null);","\t\t} else {","\t\t\tvar parts = this.inputSplitter(sample);","\t\t\t// var accumulatedClasses = {};","\t\t\tvar accumulatedClasses = [];","\t\t\tvar explanations = [];","\t\t\tparts.forEach(function(part) {","\t\t\t\tif (part.length==0) return;","\t\t\t\tvar classesWithExplanation = this.classifyPart(part, explain, continuous_output);","\t\t\t\tvar classes = (explain>0? classesWithExplanation.classes: classesWithExplanation);","\t\t\t\t// for (var i in classes)","\t\t\t\t// \taccumulatedClasses[classes[i]]=true;","\t\t\t\taccumulatedClasses.push(classes)","\t\t\t\tif (explain>0) {","\t\t\t\t\t// explanations.push(part);","\t\t\t\t\texplanations.push(classesWithExplanation.explanation);","\t\t\t\t}","\t\t\t}, this);","    \t\tclasses = []","    \t\tif (accumulatedClasses[0])","    \t\t{","\t\t\tif (accumulatedClasses[0][0] instanceof Array)","\t\t\t\t_(accumulatedClasses[0].length).times(function(n){","\t\t\t\t\tclasses.push(_.flatten(_.pluck(accumulatedClasses,n)))","\t\t\t\t });","\t\t\telse","\t\t\t{","\t\t\t\tclasses = _.flatten(accumulatedClasses)","\t\t\t}","\t\t\t}","\t\t}","","\t\tif (this.labelLookupTable) {","\t\t\tif (Array.isArray(classes)) {","\t\t\t\tclasses = classes.map(function(label) {","\t\t\t\t\t\tif (_.isArray(label))","\t\t\t\t\t\t\tlabel[0] = this.labelLookupTable.numberToFeature(label[0]);","\t\t\t\t\t\telse","\t\t\t\t\t\t\tlabel = this.labelLookupTable.numberToFeature(label);","\t\t\t\t\t\treturn label;","\t\t\t\t\t}, this);","\t\t\t} else {","\t\t\t\tclasses = this.labelLookupTable.numberToFeature(classes);","\t\t\t}","\t\t}","","\t\tif ((typeof this.OutputSplitLabel === 'function')) {","","\t\t\t// classes = this.OutputSplitLabel(classes, this.Observable, sample, explanations)","\t\t\t// var classes = []","\t\t\t// if (_.isArray(explanations))","\t\t\t// var bonus = []","\t\t","\t\t\tif ((explain>0) && (this.inputSplitter))","\t\t\t\t{ nclasses = []","\t\t\t\t_(explanations.length).times(function(n){","\t\t\t\t\tvar clas = this.OutputSplitLabel(classes, this, parts[n], explanations[n], original, classifier_compare, initial)","\t\t\t\t\tnclasses = nclasses.concat(clas)","\t\t\t\t}, this)","\t\t\t\tclasses = nclasses","\t\t\t\t}","\t\t\telse","\t\t\t\t{","\t\t\t\tvar classes = this.OutputSplitLabel(classes, this, sample, explanations, original, classifier_compare, initial)","\t\t\t\t}","\t\t\t}","","\t\tif (explain>0) ","\t\t\treturn {","\t\t\t\tclasses: classes,","\t\t\t\tscores: scores,","\t\t\t\texplanation: explanations","\t\t\t\t// bonus: bonus","\t\t\t};","\t\telse","\t\t\treturn classes;","\t},","","\t","\t/**","\t * Train on past training samples","\t * currently doesn't work","\t */","\tretrain: function() {","\t\tif (!this.pastTrainingSamples)","\t\t\tthrow new Error(\"No pastTrainingSamples array - can't retrain\");","\t\t","\t\tthis.trainBatch(this.pastTrainingSamples);","\t},","\t","\t/**","\t * @return an array with all samples whose class is the given class.","\t * Available only if the pastTrainingSamples are saved.","\t */","\tbackClassify: function(theClass) {","\t\tif (!this.pastTrainingSamples)","\t\t\tthrow new Error(\"No pastTrainingSamples array - can't backClassify\");","","\t\tif (!(theClass instanceof Array))","\t\t\ttheClass = [theClass];","\t\tvar samples = [];","\t\tthis.pastTrainingSamples.forEach(function(datum) {","\t\t\tif (_(datum.output).isEqual(theClass))","\t\t\t\tsamples.push(datum.input);","\t\t});","\t\treturn samples;","\t},","","\ttoJSON : function(callback) {","\t\treturn {","\t\t\tclassifier: this.classifier.toJSON(callback),","\t\t\tfeatureLookupTable: (this.featureLookupTable? this.featureLookupTable.toJSON(): undefined),","\t\t\tlabelLookupTable: (this.labelLookupTable? this.labelLookupTable.toJSON(): undefined),","\t\t\tspellChecker:  (this.spellChecker? this.spellChecker/*.toJSON()*/: undefined),","\t\t\tpastTrainingSamples: (this.pastTrainingSamples? this.pastTrainingSamples: undefined),","\t\t\tfeatureDocumentFrequency: this.featureDocumentFrequency,","\t\t\tdocumentCount: this.documentCount,","\t\t\t/* Note: the feature extractors are functions - they should be created at initialization - they are not serializable! */ ","\t\t};","\t},","","\tfromJSON : function(json) {","\t\tthis.classifier.fromJSON(json.classifier);","\t\tif (this.featureLookupTable) {","\t\t\tthis.featureLookupTable.fromJSON(json.featureLookupTable);","\t\t\tthis.setFeatureLookupTable(this.featureLookupTable);","\t\t}","\t\tif (this.labelLookupTable) {","\t\t\tthis.labelLookupTable.fromJSON(json.labelLookupTable);","\t\t\tthis.setLabelLookupTable(this.labelLookupTable);","\t\t}","\t\tif (this.spellChecker) this.spellChecker = json.spellChecker; ","\t\tif (this.pastTrainingSamples) this.pastTrainingSamples = json.pastTrainingSamples;","\t\tthis.featureDocumentFrequency = json.featureDocumentFrequency;","\t\tthis.documentCount = json.documentCount;","\t\t/* Note: the feature extractors are functions - they should be created at initialization - they are not deserializable! */ ","\t},","","\tgetAllClasses: function() {  // relevant for multilabel classifiers","\t\treturn this.classifier.getAllClasses();","\t},","}  // end of EnhancedClassifier prototype","","","var stringifyClass = function (aClass) {","\treturn (_(aClass).isString()? aClass: JSON.stringify(aClass));","}","","var normalizeClasses = function (classes, labelLookupTable) {","\tif (!Array.isArray(classes))","\t\tclasses = [classes];","\tclasses = classes.map(stringifyClass);","\tif (labelLookupTable)","\t\tclasses = classes.map(labelLookupTable.featureToNumber, labelLookupTable);","\tclasses.sort();","\treturn classes;","}","","module.exports = EnhancedClassifier;",""],"l":{"5":1,"6":1,"7":1,"8":1,"9":1,"37":1,"38":0,"39":0,"40":0,"43":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"52":0,"53":0,"54":0,"56":0,"57":0,"59":0,"61":0,"62":0,"63":0,"70":0,"72":0,"73":0,"74":0,"78":1,"82":0,"87":0,"88":0,"93":0,"94":0,"95":0,"97":0,"99":0,"104":0,"105":0,"106":0,"107":0,"112":0,"113":0,"114":0,"115":0,"121":0,"123":0,"124":0,"125":0,"126":0,"129":0,"130":0,"135":0,"139":0,"140":0,"141":0,"142":0,"143":0,"145":0,"149":0,"153":0,"154":0,"158":0,"159":0,"160":0,"161":0,"162":0,"168":0,"169":0,"170":0,"171":0,"172":0,"174":0,"177":0,"179":0,"181":0,"185":0,"187":0,"189":0,"196":0,"198":0,"202":0,"203":0,"204":0,"206":0,"210":0,"212":0,"213":0,"214":0,"220":0,"221":0,"222":0,"223":0,"224":0,"226":0,"229":0,"230":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"266":0,"267":0,"269":0,"272":0,"273":0,"274":0,"277":0,"279":0,"280":0,"284":0,"287":0,"288":0,"289":0,"291":0,"294":0,"295":0,"297":0,"299":0,"301":0,"302":0,"304":0,"305":0,"307":0,"308":0,"311":0,"313":0,"315":0,"316":0,"317":0,"320":0,"330":0,"331":0,"332":0,"333":0,"334":0,"342":0,"346":0,"347":0,"348":0,"349":0,"354":0,"364":0,"365":0,"367":0,"368":0,"369":0,"376":0,"379":0,"380":0,"381":0,"382":0,"383":0,"385":0,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"395":0,"396":0,"398":0,"401":0,"402":0,"404":0,"405":0,"406":0,"410":0,"415":0,"416":0,"417":0,"418":0,"419":0,"421":0,"422":0,"425":0,"429":0,"436":0,"437":0,"438":0,"439":0,"440":0,"442":0,"446":0,"450":0,"451":0,"458":0,"467":0,"468":0,"470":0,"478":0,"479":0,"481":0,"482":0,"483":0,"484":0,"485":0,"486":0,"488":0,"492":0,"505":0,"506":0,"507":0,"508":0,"510":0,"511":0,"512":0,"514":0,"515":0,"516":0,"517":0,"522":0,"527":1,"528":0,"531":1,"532":0,"533":0,"534":0,"535":0,"536":0,"537":0,"538":0,"541":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/EnhancedClassifier.2015.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/EnhancedClassifier.2015.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":1,"303":0,"304":1,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0},"fnMap":{"1":{"name":"(anonymous_1)","line":43,"loc":{"start":{"line":43,"column":25},"end":{"line":43,"column":40}}},"2":{"name":"(anonymous_2)","line":93,"loc":{"start":{"line":93,"column":20},"end":{"line":93,"column":46}}},"3":{"name":"(anonymous_3)","line":98,"loc":{"start":{"line":98,"column":22},"end":{"line":98,"column":50}}},"4":{"name":"(anonymous_4)","line":102,"loc":{"start":{"line":102,"column":22},"end":{"line":102,"column":50}}},"5":{"name":"(anonymous_5)","line":107,"loc":{"start":{"line":107,"column":16},"end":{"line":107,"column":38}}},"6":{"name":"(anonymous_6)","line":113,"loc":{"start":{"line":113,"column":39},"end":{"line":113,"column":84}}},"7":{"name":"(anonymous_7)","line":124,"loc":{"start":{"line":124,"column":24},"end":{"line":124,"column":53}}},"8":{"name":"(anonymous_8)","line":132,"loc":{"start":{"line":132,"column":22},"end":{"line":132,"column":49}}},"9":{"name":"(anonymous_9)","line":141,"loc":{"start":{"line":141,"column":24},"end":{"line":141,"column":34}}},"10":{"name":"(anonymous_10)","line":145,"loc":{"start":{"line":145,"column":19},"end":{"line":145,"column":36}}},"11":{"name":"(anonymous_11)","line":163,"loc":{"start":{"line":163,"column":24},"end":{"line":163,"column":69}}},"12":{"name":"(anonymous_12)","line":174,"loc":{"start":{"line":174,"column":37},"end":{"line":174,"column":59}}},"13":{"name":"(anonymous_13)","line":179,"loc":{"start":{"line":179,"column":19},"end":{"line":179,"column":54}}},"14":{"name":"(anonymous_14)","line":194,"loc":{"start":{"line":194,"column":20},"end":{"line":194,"column":35}}},"15":{"name":"(anonymous_15)","line":199,"loc":{"start":{"line":199,"column":20},"end":{"line":199,"column":39}}},"16":{"name":"(anonymous_16)","line":202,"loc":{"start":{"line":202,"column":18},"end":{"line":202,"column":43}}},"17":{"name":"(anonymous_17)","line":209,"loc":{"start":{"line":209,"column":25},"end":{"line":209,"column":42}}},"18":{"name":"(anonymous_18)","line":243,"loc":{"start":{"line":243,"column":18},"end":{"line":243,"column":37}}},"19":{"name":"(anonymous_19)","line":251,"loc":{"start":{"line":251,"column":16},"end":{"line":251,"column":35}}},"20":{"name":"(anonymous_20)","line":260,"loc":{"start":{"line":260,"column":20},"end":{"line":260,"column":64}}},"21":{"name":"(anonymous_21)","line":298,"loc":{"start":{"line":298,"column":14},"end":{"line":298,"column":40}}},"22":{"name":"(anonymous_22)","line":311,"loc":{"start":{"line":311,"column":18},"end":{"line":311,"column":47}}},"23":{"name":"(anonymous_23)","line":317,"loc":{"start":{"line":317,"column":34},"end":{"line":317,"column":66}}},"24":{"name":"(anonymous_24)","line":329,"loc":{"start":{"line":329,"column":69},"end":{"line":329,"column":92}}},"25":{"name":"(anonymous_25)","line":348,"loc":{"start":{"line":348,"column":18},"end":{"line":348,"column":31}}},"26":{"name":"(anonymous_26)","line":352,"loc":{"start":{"line":352,"column":29},"end":{"line":352,"column":45}}},"27":{"name":"(anonymous_27)","line":370,"loc":{"start":{"line":370,"column":13},"end":{"line":370,"column":31}}},"28":{"name":"(anonymous_28)","line":380,"loc":{"start":{"line":380,"column":28},"end":{"line":380,"column":43}}},"29":{"name":"(anonymous_29)","line":389,"loc":{"start":{"line":389,"column":29},"end":{"line":389,"column":44}}},"30":{"name":"(anonymous_30)","line":394,"loc":{"start":{"line":394,"column":25},"end":{"line":394,"column":41}}},"31":{"name":"(anonymous_31)","line":409,"loc":{"start":{"line":409,"column":18},"end":{"line":409,"column":34}}},"32":{"name":"(anonymous_32)","line":420,"loc":{"start":{"line":420,"column":16},"end":{"line":421,"column":8}}},"33":{"name":"(anonymous_33)","line":422,"loc":{"start":{"line":422,"column":28},"end":{"line":422,"column":54}}},"34":{"name":"(anonymous_34)","line":432,"loc":{"start":{"line":432,"column":20},"end":{"line":432,"column":56}}},"35":{"name":"(anonymous_35)","line":433,"loc":{"start":{"line":433,"column":62},"end":{"line":433,"column":84}}},"36":{"name":"(anonymous_36)","line":442,"loc":{"start":{"line":442,"column":15},"end":{"line":442,"column":60}}},"37":{"name":"(anonymous_37)","line":455,"loc":{"start":{"line":455,"column":16},"end":{"line":455,"column":59}}},"38":{"name":"(anonymous_38)","line":459,"loc":{"start":{"line":459,"column":7},"end":{"line":459,"column":25}}},"39":{"name":"(anonymous_39)","line":465,"loc":{"start":{"line":465,"column":45},"end":{"line":465,"column":84}}},"40":{"name":"(anonymous_40)","line":477,"loc":{"start":{"line":477,"column":7},"end":{"line":477,"column":25}}},"41":{"name":"(anonymous_41)","line":486,"loc":{"start":{"line":486,"column":30},"end":{"line":486,"column":55}}},"42":{"name":"(anonymous_42)","line":494,"loc":{"start":{"line":494,"column":54},"end":{"line":494,"column":93}}},"43":{"name":"(anonymous_43)","line":508,"loc":{"start":{"line":508,"column":23},"end":{"line":508,"column":36}}},"44":{"name":"(anonymous_44)","line":516,"loc":{"start":{"line":516,"column":5},"end":{"line":516,"column":17}}},"45":{"name":"(anonymous_45)","line":520,"loc":{"start":{"line":520,"column":27},"end":{"line":520,"column":43}}},"46":{"name":"(anonymous_46)","line":542,"loc":{"start":{"line":542,"column":11},"end":{"line":542,"column":37}}},"47":{"name":"(anonymous_47)","line":567,"loc":{"start":{"line":567,"column":17},"end":{"line":567,"column":32}}},"48":{"name":"(anonymous_48)","line":586,"loc":{"start":{"line":586,"column":26},"end":{"line":586,"column":42}}},"49":{"name":"(anonymous_49)","line":615,"loc":{"start":{"line":615,"column":10},"end":{"line":615,"column":21}}},"50":{"name":"(anonymous_50)","line":626,"loc":{"start":{"line":626,"column":15},"end":{"line":626,"column":34}}},"51":{"name":"(anonymous_51)","line":633,"loc":{"start":{"line":633,"column":35},"end":{"line":633,"column":51}}},"52":{"name":"(anonymous_52)","line":640,"loc":{"start":{"line":640,"column":10},"end":{"line":640,"column":29}}},"53":{"name":"(anonymous_53)","line":653,"loc":{"start":{"line":653,"column":12},"end":{"line":653,"column":27}}},"54":{"name":"(anonymous_54)","line":670,"loc":{"start":{"line":670,"column":16},"end":{"line":670,"column":27}}},"55":{"name":"(anonymous_55)","line":676,"loc":{"start":{"line":676,"column":21},"end":{"line":676,"column":39}}},"56":{"name":"(anonymous_56)","line":680,"loc":{"start":{"line":680,"column":23},"end":{"line":680,"column":60}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":29}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":34}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":32}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":36}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":36}},"6":{"start":{"line":10,"column":0},"end":{"line":10,"column":62}},"7":{"start":{"line":43,"column":0},"end":{"line":88,"column":1}},"8":{"start":{"line":44,"column":1},"end":{"line":47,"column":2}},"9":{"start":{"line":45,"column":2},"end":{"line":45,"column":20}},"10":{"start":{"line":46,"column":2},"end":{"line":46,"column":54}},"11":{"start":{"line":49,"column":1},"end":{"line":49,"column":45}},"12":{"start":{"line":51,"column":1},"end":{"line":51,"column":41}},"13":{"start":{"line":52,"column":1},"end":{"line":52,"column":37}},"14":{"start":{"line":53,"column":1},"end":{"line":53,"column":49}},"15":{"start":{"line":54,"column":1},"end":{"line":54,"column":83}},"16":{"start":{"line":56,"column":1},"end":{"line":56,"column":59}},"17":{"start":{"line":58,"column":1},"end":{"line":58,"column":49}},"18":{"start":{"line":59,"column":1},"end":{"line":59,"column":45}},"19":{"start":{"line":61,"column":1},"end":{"line":61,"column":49}},"20":{"start":{"line":62,"column":1},"end":{"line":62,"column":57}},"21":{"start":{"line":63,"column":1},"end":{"line":63,"column":59}},"22":{"start":{"line":64,"column":1},"end":{"line":64,"column":37}},"23":{"start":{"line":66,"column":1},"end":{"line":66,"column":57}},"24":{"start":{"line":67,"column":1},"end":{"line":67,"column":74}},"25":{"start":{"line":68,"column":1},"end":{"line":72,"column":3}},"26":{"start":{"line":70,"column":5},"end":{"line":70,"column":36}},"27":{"start":{"line":71,"column":2},"end":{"line":71,"column":37}},"28":{"start":{"line":73,"column":1},"end":{"line":73,"column":23}},"29":{"start":{"line":75,"column":1},"end":{"line":75,"column":39}},"30":{"start":{"line":76,"column":1},"end":{"line":76,"column":33}},"31":{"start":{"line":83,"column":1},"end":{"line":83,"column":30}},"32":{"start":{"line":85,"column":1},"end":{"line":85,"column":38}},"33":{"start":{"line":86,"column":1},"end":{"line":86,"column":40}},"34":{"start":{"line":91,"column":0},"end":{"line":673,"column":1}},"35":{"start":{"line":94,"column":2},"end":{"line":94,"column":39}},"36":{"start":{"line":99,"column":2},"end":{"line":99,"column":60}},"37":{"start":{"line":103,"column":2},"end":{"line":103,"column":42}},"38":{"start":{"line":108,"column":2},"end":{"line":109,"column":76}},"39":{"start":{"line":109,"column":3},"end":{"line":109,"column":76}},"40":{"start":{"line":114,"column":2},"end":{"line":121,"column":3}},"41":{"start":{"line":115,"column":3},"end":{"line":119,"column":4}},"42":{"start":{"line":116,"column":4},"end":{"line":116,"column":70}},"43":{"start":{"line":118,"column":4},"end":{"line":118,"column":100}},"44":{"start":{"line":120,"column":3},"end":{"line":120,"column":112}},"45":{"start":{"line":125,"column":2},"end":{"line":129,"column":3}},"46":{"start":{"line":126,"column":3},"end":{"line":126,"column":48}},"47":{"start":{"line":127,"column":3},"end":{"line":128,"column":62}},"48":{"start":{"line":128,"column":4},"end":{"line":128,"column":62}},"49":{"start":{"line":133,"column":2},"end":{"line":138,"column":3}},"50":{"start":{"line":134,"column":3},"end":{"line":134,"column":44}},"51":{"start":{"line":135,"column":3},"end":{"line":136,"column":58}},"52":{"start":{"line":136,"column":4},"end":{"line":136,"column":58}},"53":{"start":{"line":137,"column":3},"end":{"line":137,"column":32}},"54":{"start":{"line":142,"column":3},"end":{"line":142,"column":161}},"55":{"start":{"line":146,"column":2},"end":{"line":158,"column":3}},"56":{"start":{"line":148,"column":3},"end":{"line":157,"column":4}},"57":{"start":{"line":149,"column":4},"end":{"line":156,"column":5}},"58":{"start":{"line":150,"column":5},"end":{"line":152,"column":6}},"59":{"start":{"line":151,"column":6},"end":{"line":151,"column":43}},"60":{"start":{"line":154,"column":5},"end":{"line":154,"column":21}},"61":{"start":{"line":155,"column":5},"end":{"line":155,"column":76}},"62":{"start":{"line":160,"column":2},"end":{"line":160,"column":16}},"63":{"start":{"line":173,"column":2},"end":{"line":173,"column":15}},"64":{"start":{"line":174,"column":2},"end":{"line":176,"column":6}},"65":{"start":{"line":175,"column":5},"end":{"line":175,"column":29}},"66":{"start":{"line":180,"column":2},"end":{"line":180,"column":24}},"67":{"start":{"line":181,"column":2},"end":{"line":189,"column":3}},"68":{"start":{"line":182,"column":3},"end":{"line":188,"column":4}},"69":{"start":{"line":183,"column":4},"end":{"line":183,"column":18}},"70":{"start":{"line":184,"column":4},"end":{"line":184,"column":39}},"71":{"start":{"line":186,"column":4},"end":{"line":186,"column":20}},"72":{"start":{"line":187,"column":4},"end":{"line":187,"column":87}},"73":{"start":{"line":191,"column":2},"end":{"line":191,"column":18}},"74":{"start":{"line":195,"column":2},"end":{"line":196,"column":35}},"75":{"start":{"line":196,"column":3},"end":{"line":196,"column":35}},"76":{"start":{"line":200,"column":2},"end":{"line":206,"column":3}},"77":{"start":{"line":201,"column":3},"end":{"line":201,"column":50}},"78":{"start":{"line":202,"column":3},"end":{"line":205,"column":11}},"79":{"start":{"line":203,"column":4},"end":{"line":203,"column":42}},"80":{"start":{"line":204,"column":4},"end":{"line":204,"column":37}},"81":{"start":{"line":210,"column":2},"end":{"line":239,"column":3}},"82":{"start":{"line":211,"column":3},"end":{"line":211,"column":50}},"83":{"start":{"line":212,"column":3},"end":{"line":237,"column":4}},"84":{"start":{"line":213,"column":4},"end":{"line":213,"column":33}},"85":{"start":{"line":214,"column":4},"end":{"line":217,"column":6}},"86":{"start":{"line":216,"column":5},"end":{"line":216,"column":13}},"87":{"start":{"line":219,"column":4},"end":{"line":236,"column":6}},"88":{"start":{"line":221,"column":6},"end":{"line":235,"column":8}},"89":{"start":{"line":223,"column":7},"end":{"line":223,"column":65}},"90":{"start":{"line":227,"column":8},"end":{"line":234,"column":10}},"91":{"start":{"line":229,"column":10},"end":{"line":233,"column":12}},"92":{"start":{"line":231,"column":11},"end":{"line":231,"column":69}},"93":{"start":{"line":238,"column":2},"end":{"line":238,"column":29}},"94":{"start":{"line":240,"column":2},"end":{"line":240,"column":15}},"95":{"start":{"line":244,"column":2},"end":{"line":244,"column":23}},"96":{"start":{"line":245,"column":2},"end":{"line":247,"column":3}},"97":{"start":{"line":246,"column":3},"end":{"line":246,"column":57}},"98":{"start":{"line":248,"column":2},"end":{"line":248,"column":15}},"99":{"start":{"line":252,"column":2},"end":{"line":257,"column":3}},"100":{"start":{"line":254,"column":3},"end":{"line":255,"column":93}},"101":{"start":{"line":255,"column":4},"end":{"line":255,"column":93}},"102":{"start":{"line":256,"column":3},"end":{"line":256,"column":50}},"103":{"start":{"line":262,"column":2},"end":{"line":283,"column":3}},"104":{"start":{"line":263,"column":3},"end":{"line":278,"column":4}},"105":{"start":{"line":266,"column":4},"end":{"line":267,"column":13}},"106":{"start":{"line":267,"column":5},"end":{"line":267,"column":13}},"107":{"start":{"line":269,"column":4},"end":{"line":269,"column":37}},"108":{"start":{"line":271,"column":4},"end":{"line":277,"column":6}},"109":{"start":{"line":272,"column":5},"end":{"line":272,"column":29}},"110":{"start":{"line":275,"column":5},"end":{"line":275,"column":39}},"111":{"start":{"line":276,"column":5},"end":{"line":276,"column":29}},"112":{"start":{"line":280,"column":3},"end":{"line":281,"column":29}},"113":{"start":{"line":281,"column":3},"end":{"line":281,"column":29}},"114":{"start":{"line":299,"column":2},"end":{"line":299,"column":61}},"115":{"start":{"line":300,"column":2},"end":{"line":300,"column":41}},"116":{"start":{"line":301,"column":2},"end":{"line":301,"column":71}},"117":{"start":{"line":302,"column":2},"end":{"line":302,"column":31}},"118":{"start":{"line":303,"column":2},"end":{"line":303,"column":35}},"119":{"start":{"line":304,"column":2},"end":{"line":304,"column":70}},"120":{"start":{"line":305,"column":2},"end":{"line":305,"column":45}},"121":{"start":{"line":306,"column":2},"end":{"line":306,"column":46}},"122":{"start":{"line":307,"column":2},"end":{"line":308,"column":67}},"123":{"start":{"line":308,"column":3},"end":{"line":308,"column":67}},"124":{"start":{"line":312,"column":2},"end":{"line":312,"column":51}},"125":{"start":{"line":313,"column":2},"end":{"line":313,"column":53}},"126":{"start":{"line":315,"column":2},"end":{"line":315,"column":24}},"127":{"start":{"line":317,"column":2},"end":{"line":362,"column":16}},"128":{"start":{"line":319,"column":3},"end":{"line":322,"column":53}},"129":{"start":{"line":320,"column":4},"end":{"line":320,"column":63}},"130":{"start":{"line":322,"column":4},"end":{"line":322,"column":53}},"131":{"start":{"line":324,"column":3},"end":{"line":325,"column":36}},"132":{"start":{"line":325,"column":4},"end":{"line":325,"column":36}},"133":{"start":{"line":327,"column":3},"end":{"line":346,"column":14}},"134":{"start":{"line":329,"column":4},"end":{"line":343,"column":18}},"135":{"start":{"line":333,"column":5},"end":{"line":334,"column":38}},"136":{"start":{"line":334,"column":6},"end":{"line":334,"column":38}},"137":{"start":{"line":336,"column":5},"end":{"line":337,"column":46}},"138":{"start":{"line":337,"column":6},"end":{"line":337,"column":46}},"139":{"start":{"line":339,"column":5},"end":{"line":339,"column":27}},"140":{"start":{"line":340,"column":5},"end":{"line":340,"column":34}},"141":{"start":{"line":342,"column":5},"end":{"line":342,"column":16}},"142":{"start":{"line":346,"column":3},"end":{"line":346,"column":14}},"143":{"start":{"line":350,"column":3},"end":{"line":350,"column":51}},"144":{"start":{"line":352,"column":3},"end":{"line":357,"column":11}},"145":{"start":{"line":354,"column":4},"end":{"line":354,"column":75}},"146":{"start":{"line":355,"column":4},"end":{"line":356,"column":63}},"147":{"start":{"line":356,"column":5},"end":{"line":356,"column":63}},"148":{"start":{"line":359,"column":3},"end":{"line":359,"column":48}},"149":{"start":{"line":360,"column":3},"end":{"line":360,"column":21}},"150":{"start":{"line":371,"column":2},"end":{"line":371,"column":51}},"151":{"start":{"line":372,"column":2},"end":{"line":372,"column":53}},"152":{"start":{"line":380,"column":3},"end":{"line":386,"column":14}},"153":{"start":{"line":381,"column":6},"end":{"line":384,"column":56}},"154":{"start":{"line":382,"column":7},"end":{"line":382,"column":66}},"155":{"start":{"line":384,"column":7},"end":{"line":384,"column":56}},"156":{"start":{"line":385,"column":6},"end":{"line":385,"column":18}},"157":{"start":{"line":388,"column":3},"end":{"line":390,"column":4}},"158":{"start":{"line":389,"column":4},"end":{"line":389,"column":87}},"159":{"start":{"line":389,"column":46},"end":{"line":389,"column":78}},"160":{"start":{"line":392,"column":3},"end":{"line":392,"column":31}},"161":{"start":{"line":394,"column":3},"end":{"line":405,"column":12}},"162":{"start":{"line":395,"column":4},"end":{"line":395,"column":29}},"163":{"start":{"line":397,"column":4},"end":{"line":397,"column":78}},"164":{"start":{"line":398,"column":4},"end":{"line":399,"column":38}},"165":{"start":{"line":399,"column":5},"end":{"line":399,"column":38}},"166":{"start":{"line":400,"column":4},"end":{"line":401,"column":46}},"167":{"start":{"line":401,"column":5},"end":{"line":401,"column":46}},"168":{"start":{"line":403,"column":4},"end":{"line":403,"column":27}},"169":{"start":{"line":404,"column":4},"end":{"line":404,"column":17}},"170":{"start":{"line":407,"column":3},"end":{"line":407,"column":31}},"171":{"start":{"line":409,"column":2},"end":{"line":414,"column":11}},"172":{"start":{"line":411,"column":3},"end":{"line":411,"column":74}},"173":{"start":{"line":412,"column":3},"end":{"line":413,"column":62}},"174":{"start":{"line":413,"column":4},"end":{"line":413,"column":62}},"175":{"start":{"line":416,"column":2},"end":{"line":416,"column":38}},"176":{"start":{"line":422,"column":12},"end":{"line":428,"column":20}},"177":{"start":{"line":423,"column":16},"end":{"line":423,"column":84}},"178":{"start":{"line":424,"column":16},"end":{"line":424,"column":116}},"179":{"start":{"line":425,"column":16},"end":{"line":425,"column":84}},"180":{"start":{"line":426,"column":16},"end":{"line":426,"column":59}},"181":{"start":{"line":427,"column":16},"end":{"line":427,"column":45}},"182":{"start":{"line":429,"column":12},"end":{"line":429,"column":58}},"183":{"start":{"line":433,"column":2},"end":{"line":439,"column":16}},"184":{"start":{"line":434,"column":3},"end":{"line":434,"column":71}},"185":{"start":{"line":435,"column":3},"end":{"line":435,"column":46}},"186":{"start":{"line":436,"column":3},"end":{"line":436,"column":65}},"187":{"start":{"line":437,"column":3},"end":{"line":437,"column":40}},"188":{"start":{"line":438,"column":3},"end":{"line":438,"column":33}},"189":{"start":{"line":443,"column":2},"end":{"line":443,"column":71}},"190":{"start":{"line":445,"column":2},"end":{"line":445,"column":70}},"191":{"start":{"line":447,"column":2},"end":{"line":447,"column":45}},"192":{"start":{"line":449,"column":2},"end":{"line":449,"column":83}},"193":{"start":{"line":451,"column":2},"end":{"line":451,"column":39}},"194":{"start":{"line":452,"column":2},"end":{"line":452,"column":24}},"195":{"start":{"line":456,"column":2},"end":{"line":456,"column":18}},"196":{"start":{"line":458,"column":2},"end":{"line":533,"column":4}},"197":{"start":{"line":461,"column":10},"end":{"line":475,"column":11}},"198":{"start":{"line":462,"column":11},"end":{"line":463,"column":40}},"199":{"start":{"line":463,"column":6},"end":{"line":463,"column":40}},"200":{"start":{"line":465,"column":5},"end":{"line":471,"column":8}},"201":{"start":{"line":466,"column":6},"end":{"line":466,"column":84}},"202":{"start":{"line":467,"column":6},"end":{"line":467,"column":49}},"203":{"start":{"line":469,"column":6},"end":{"line":469,"column":79}},"204":{"start":{"line":470,"column":6},"end":{"line":470,"column":27}},"205":{"start":{"line":474,"column":13},"end":{"line":474,"column":34}},"206":{"start":{"line":479,"column":7},"end":{"line":514,"column":11}},"207":{"start":{"line":482,"column":13},"end":{"line":482,"column":52}},"208":{"start":{"line":483,"column":5},"end":{"line":483,"column":33}},"209":{"start":{"line":484,"column":5},"end":{"line":484,"column":27}},"210":{"start":{"line":486,"column":5},"end":{"line":511,"column":19}},"211":{"start":{"line":487,"column":6},"end":{"line":487,"column":33}},"212":{"start":{"line":487,"column":26},"end":{"line":487,"column":33}},"213":{"start":{"line":489,"column":6},"end":{"line":489,"column":30}},"214":{"start":{"line":491,"column":6},"end":{"line":492,"column":46}},"215":{"start":{"line":492,"column":7},"end":{"line":492,"column":46}},"216":{"start":{"line":494,"column":6},"end":{"line":506,"column":20}},"217":{"start":{"line":496,"column":7},"end":{"line":496,"column":85}},"218":{"start":{"line":498,"column":7},"end":{"line":499,"column":51}},"219":{"start":{"line":499,"column":8},"end":{"line":499,"column":51}},"220":{"start":{"line":501,"column":7},"end":{"line":501,"column":39}},"221":{"start":{"line":502,"column":7},"end":{"line":503,"column":62}},"222":{"start":{"line":503,"column":8},"end":{"line":503,"column":62}},"223":{"start":{"line":505,"column":7},"end":{"line":505,"column":18}},"224":{"start":{"line":509,"column":9},"end":{"line":509,"column":48}},"225":{"start":{"line":510,"column":19},"end":{"line":510,"column":39}},"226":{"start":{"line":513,"column":13},"end":{"line":513,"column":34}},"227":{"start":{"line":518,"column":3},"end":{"line":530,"column":4}},"228":{"start":{"line":519,"column":4},"end":{"line":529,"column":5}},"229":{"start":{"line":520,"column":5},"end":{"line":526,"column":14}},"230":{"start":{"line":521,"column":6},"end":{"line":524,"column":60}},"231":{"start":{"line":522,"column":7},"end":{"line":522,"column":66}},"232":{"start":{"line":524,"column":7},"end":{"line":524,"column":60}},"233":{"start":{"line":525,"column":6},"end":{"line":525,"column":19}},"234":{"start":{"line":528,"column":5},"end":{"line":528,"column":62}},"235":{"start":{"line":532,"column":6},"end":{"line":532,"column":36}},"236":{"start":{"line":543,"column":2},"end":{"line":543,"column":22}},"237":{"start":{"line":545,"column":2},"end":{"line":548,"column":41}},"238":{"start":{"line":546,"column":3},"end":{"line":546,"column":51}},"239":{"start":{"line":548,"column":3},"end":{"line":548,"column":41}},"240":{"start":{"line":550,"column":2},"end":{"line":582,"column":3}},"241":{"start":{"line":552,"column":3},"end":{"line":553,"column":38}},"242":{"start":{"line":553,"column":4},"end":{"line":553,"column":38}},"243":{"start":{"line":555,"column":3},"end":{"line":555,"column":67}},"244":{"start":{"line":557,"column":3},"end":{"line":557,"column":85}},"245":{"start":{"line":559,"column":3},"end":{"line":559,"column":46}},"246":{"start":{"line":561,"column":3},"end":{"line":561,"column":76}},"247":{"start":{"line":564,"column":3},"end":{"line":564,"column":42}},"248":{"start":{"line":565,"column":3},"end":{"line":565,"column":31}},"249":{"start":{"line":566,"column":3},"end":{"line":566,"column":25}},"250":{"start":{"line":567,"column":3},"end":{"line":580,"column":12}},"251":{"start":{"line":568,"column":4},"end":{"line":568,"column":31}},"252":{"start":{"line":568,"column":24},"end":{"line":568,"column":31}},"253":{"start":{"line":569,"column":4},"end":{"line":569,"column":28}},"254":{"start":{"line":570,"column":4},"end":{"line":571,"column":44}},"255":{"start":{"line":571,"column":5},"end":{"line":571,"column":44}},"256":{"start":{"line":572,"column":4},"end":{"line":572,"column":75}},"257":{"start":{"line":573,"column":4},"end":{"line":573,"column":86}},"258":{"start":{"line":574,"column":4},"end":{"line":575,"column":48}},"259":{"start":{"line":575,"column":5},"end":{"line":575,"column":48}},"260":{"start":{"line":576,"column":4},"end":{"line":576,"column":36}},"261":{"start":{"line":577,"column":4},"end":{"line":579,"column":5}},"262":{"start":{"line":578,"column":5},"end":{"line":578,"column":59}},"263":{"start":{"line":581,"column":3},"end":{"line":581,"column":42}},"264":{"start":{"line":584,"column":2},"end":{"line":596,"column":3}},"265":{"start":{"line":585,"column":3},"end":{"line":595,"column":4}},"266":{"start":{"line":586,"column":4},"end":{"line":592,"column":14}},"267":{"start":{"line":587,"column":6},"end":{"line":590,"column":60}},"268":{"start":{"line":588,"column":7},"end":{"line":588,"column":66}},"269":{"start":{"line":590,"column":7},"end":{"line":590,"column":60}},"270":{"start":{"line":591,"column":6},"end":{"line":591,"column":19}},"271":{"start":{"line":594,"column":4},"end":{"line":594,"column":61}},"272":{"start":{"line":598,"column":2},"end":{"line":607,"column":18}},"273":{"start":{"line":599,"column":3},"end":{"line":605,"column":5}},"274":{"start":{"line":607,"column":3},"end":{"line":607,"column":18}},"275":{"start":{"line":616,"column":2},"end":{"line":617,"column":67}},"276":{"start":{"line":617,"column":3},"end":{"line":617,"column":67}},"277":{"start":{"line":619,"column":2},"end":{"line":619,"column":44}},"278":{"start":{"line":627,"column":2},"end":{"line":628,"column":72}},"279":{"start":{"line":628,"column":3},"end":{"line":628,"column":72}},"280":{"start":{"line":630,"column":2},"end":{"line":631,"column":25}},"281":{"start":{"line":631,"column":3},"end":{"line":631,"column":25}},"282":{"start":{"line":632,"column":2},"end":{"line":632,"column":19}},"283":{"start":{"line":633,"column":2},"end":{"line":636,"column":5}},"284":{"start":{"line":634,"column":3},"end":{"line":635,"column":30}},"285":{"start":{"line":635,"column":4},"end":{"line":635,"column":30}},"286":{"start":{"line":637,"column":2},"end":{"line":637,"column":17}},"287":{"start":{"line":641,"column":2},"end":{"line":650,"column":4}},"288":{"start":{"line":654,"column":2},"end":{"line":654,"column":44}},"289":{"start":{"line":655,"column":2},"end":{"line":658,"column":3}},"290":{"start":{"line":656,"column":3},"end":{"line":656,"column":61}},"291":{"start":{"line":657,"column":3},"end":{"line":657,"column":55}},"292":{"start":{"line":659,"column":2},"end":{"line":662,"column":3}},"293":{"start":{"line":660,"column":3},"end":{"line":660,"column":57}},"294":{"start":{"line":661,"column":3},"end":{"line":661,"column":51}},"295":{"start":{"line":663,"column":2},"end":{"line":663,"column":63}},"296":{"start":{"line":663,"column":25},"end":{"line":663,"column":63}},"297":{"start":{"line":664,"column":2},"end":{"line":664,"column":84}},"298":{"start":{"line":664,"column":32},"end":{"line":664,"column":84}},"299":{"start":{"line":665,"column":2},"end":{"line":665,"column":64}},"300":{"start":{"line":666,"column":2},"end":{"line":666,"column":42}},"301":{"start":{"line":671,"column":2},"end":{"line":671,"column":41}},"302":{"start":{"line":676,"column":0},"end":{"line":678,"column":1}},"303":{"start":{"line":677,"column":1},"end":{"line":677,"column":63}},"304":{"start":{"line":680,"column":0},"end":{"line":688,"column":1}},"305":{"start":{"line":681,"column":1},"end":{"line":682,"column":22}},"306":{"start":{"line":682,"column":2},"end":{"line":682,"column":22}},"307":{"start":{"line":683,"column":1},"end":{"line":683,"column":39}},"308":{"start":{"line":684,"column":1},"end":{"line":685,"column":76}},"309":{"start":{"line":685,"column":2},"end":{"line":685,"column":76}},"310":{"start":{"line":686,"column":1},"end":{"line":686,"column":16}},"311":{"start":{"line":687,"column":1},"end":{"line":687,"column":16}},"312":{"start":{"line":690,"column":0},"end":{"line":690,"column":36}}},"branchMap":{"1":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},{"start":{"line":44,"column":1},"end":{"line":44,"column":1}}]},"2":{"line":67,"type":"binary-expr","locations":[{"start":{"line":67,"column":36},"end":{"line":67,"column":68}},{"start":{"line":67,"column":72},"end":{"line":67,"column":73}}]},"3":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":1},"end":{"line":68,"column":1}},{"start":{"line":68,"column":1},"end":{"line":68,"column":1}}]},"4":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":5},"end":{"line":68,"column":31}},{"start":{"line":68,"column":33},"end":{"line":68,"column":65}}]},"5":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":2},"end":{"line":108,"column":2}},{"start":{"line":108,"column":2},"end":{"line":108,"column":2}}]},"6":{"line":109,"type":"cond-expr","locations":[{"start":{"line":109,"column":50},"end":{"line":109,"column":60}},{"start":{"line":109,"column":62},"end":{"line":109,"column":74}}]},"7":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":2},"end":{"line":114,"column":2}},{"start":{"line":114,"column":2},"end":{"line":114,"column":2}}]},"8":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":3},"end":{"line":115,"column":3}},{"start":{"line":115,"column":3},"end":{"line":115,"column":3}}]},"9":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":2},"end":{"line":125,"column":2}},{"start":{"line":125,"column":2},"end":{"line":125,"column":2}}]},"10":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":3},"end":{"line":127,"column":3}},{"start":{"line":127,"column":3},"end":{"line":127,"column":3}}]},"11":{"line":133,"type":"if","locations":[{"start":{"line":133,"column":2},"end":{"line":133,"column":2}},{"start":{"line":133,"column":2},"end":{"line":133,"column":2}}]},"12":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":3},"end":{"line":135,"column":3}},{"start":{"line":135,"column":3},"end":{"line":135,"column":3}}]},"13":{"line":146,"type":"if","locations":[{"start":{"line":146,"column":2},"end":{"line":146,"column":2}},{"start":{"line":146,"column":2},"end":{"line":146,"column":2}}]},"14":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":3},"end":{"line":148,"column":3}},{"start":{"line":148,"column":3},"end":{"line":148,"column":3}}]},"15":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":2},"end":{"line":181,"column":2}},{"start":{"line":181,"column":2},"end":{"line":181,"column":2}}]},"16":{"line":195,"type":"if","locations":[{"start":{"line":195,"column":2},"end":{"line":195,"column":2}},{"start":{"line":195,"column":2},"end":{"line":195,"column":2}}]},"17":{"line":200,"type":"if","locations":[{"start":{"line":200,"column":2},"end":{"line":200,"column":2}},{"start":{"line":200,"column":2},"end":{"line":200,"column":2}}]},"18":{"line":210,"type":"if","locations":[{"start":{"line":210,"column":2},"end":{"line":210,"column":2}},{"start":{"line":210,"column":2},"end":{"line":210,"column":2}}]},"19":{"line":214,"type":"if","locations":[{"start":{"line":214,"column":4},"end":{"line":214,"column":4}},{"start":{"line":214,"column":4},"end":{"line":214,"column":4}}]},"20":{"line":219,"type":"if","locations":[{"start":{"line":219,"column":4},"end":{"line":219,"column":4}},{"start":{"line":219,"column":4},"end":{"line":219,"column":4}}]},"21":{"line":221,"type":"if","locations":[{"start":{"line":221,"column":6},"end":{"line":221,"column":6}},{"start":{"line":221,"column":6},"end":{"line":221,"column":6}}]},"22":{"line":227,"type":"if","locations":[{"start":{"line":227,"column":8},"end":{"line":227,"column":8}},{"start":{"line":227,"column":8},"end":{"line":227,"column":8}}]},"23":{"line":229,"type":"if","locations":[{"start":{"line":229,"column":10},"end":{"line":229,"column":10}},{"start":{"line":229,"column":10},"end":{"line":229,"column":10}}]},"24":{"line":245,"type":"if","locations":[{"start":{"line":245,"column":2},"end":{"line":245,"column":2}},{"start":{"line":245,"column":2},"end":{"line":245,"column":2}}]},"25":{"line":252,"type":"if","locations":[{"start":{"line":252,"column":2},"end":{"line":252,"column":2}},{"start":{"line":252,"column":2},"end":{"line":252,"column":2}}]},"26":{"line":255,"type":"binary-expr","locations":[{"start":{"line":255,"column":46},"end":{"line":255,"column":84}},{"start":{"line":255,"column":88},"end":{"line":255,"column":89}}]},"27":{"line":256,"type":"binary-expr","locations":[{"start":{"line":256,"column":25},"end":{"line":256,"column":43}},{"start":{"line":256,"column":45},"end":{"line":256,"column":46}}]},"28":{"line":262,"type":"if","locations":[{"start":{"line":262,"column":2},"end":{"line":262,"column":2}},{"start":{"line":262,"column":2},"end":{"line":262,"column":2}}]},"29":{"line":266,"type":"if","locations":[{"start":{"line":266,"column":4},"end":{"line":266,"column":4}},{"start":{"line":266,"column":4},"end":{"line":266,"column":4}}]},"30":{"line":266,"type":"binary-expr","locations":[{"start":{"line":266,"column":8},"end":{"line":266,"column":51}},{"start":{"line":266,"column":55},"end":{"line":266,"column":84}}]},"31":{"line":271,"type":"if","locations":[{"start":{"line":271,"column":4},"end":{"line":271,"column":4}},{"start":{"line":271,"column":4},"end":{"line":271,"column":4}}]},"32":{"line":280,"type":"if","locations":[{"start":{"line":280,"column":3},"end":{"line":280,"column":3}},{"start":{"line":280,"column":3},"end":{"line":280,"column":3}}]},"33":{"line":280,"type":"binary-expr","locations":[{"start":{"line":280,"column":7},"end":{"line":280,"column":16}},{"start":{"line":280,"column":20},"end":{"line":280,"column":34}}]},"34":{"line":307,"type":"if","locations":[{"start":{"line":307,"column":2},"end":{"line":307,"column":2}},{"start":{"line":307,"column":2},"end":{"line":307,"column":2}}]},"35":{"line":319,"type":"if","locations":[{"start":{"line":319,"column":3},"end":{"line":319,"column":3}},{"start":{"line":319,"column":3},"end":{"line":319,"column":3}}]},"36":{"line":324,"type":"if","locations":[{"start":{"line":324,"column":3},"end":{"line":324,"column":3}},{"start":{"line":324,"column":3},"end":{"line":324,"column":3}}]},"37":{"line":327,"type":"if","locations":[{"start":{"line":327,"column":3},"end":{"line":327,"column":3}},{"start":{"line":327,"column":3},"end":{"line":327,"column":3}}]},"38":{"line":333,"type":"if","locations":[{"start":{"line":333,"column":5},"end":{"line":333,"column":5}},{"start":{"line":333,"column":5},"end":{"line":333,"column":5}}]},"39":{"line":336,"type":"if","locations":[{"start":{"line":336,"column":5},"end":{"line":336,"column":5}},{"start":{"line":336,"column":5},"end":{"line":336,"column":5}}]},"40":{"line":355,"type":"if","locations":[{"start":{"line":355,"column":4},"end":{"line":355,"column":4}},{"start":{"line":355,"column":4},"end":{"line":355,"column":4}}]},"41":{"line":381,"type":"if","locations":[{"start":{"line":381,"column":6},"end":{"line":381,"column":6}},{"start":{"line":381,"column":6},"end":{"line":381,"column":6}}]},"42":{"line":388,"type":"if","locations":[{"start":{"line":388,"column":3},"end":{"line":388,"column":3}},{"start":{"line":388,"column":3},"end":{"line":388,"column":3}}]},"43":{"line":398,"type":"if","locations":[{"start":{"line":398,"column":4},"end":{"line":398,"column":4}},{"start":{"line":398,"column":4},"end":{"line":398,"column":4}}]},"44":{"line":400,"type":"if","locations":[{"start":{"line":400,"column":4},"end":{"line":400,"column":4}},{"start":{"line":400,"column":4},"end":{"line":400,"column":4}}]},"45":{"line":412,"type":"if","locations":[{"start":{"line":412,"column":3},"end":{"line":412,"column":3}},{"start":{"line":412,"column":3},"end":{"line":412,"column":3}}]},"46":{"line":461,"type":"if","locations":[{"start":{"line":461,"column":10},"end":{"line":461,"column":10}},{"start":{"line":461,"column":10},"end":{"line":461,"column":10}}]},"47":{"line":462,"type":"if","locations":[{"start":{"line":462,"column":11},"end":{"line":462,"column":11}},{"start":{"line":462,"column":11},"end":{"line":462,"column":11}}]},"48":{"line":466,"type":"cond-expr","locations":[{"start":{"line":466,"column":28},"end":{"line":466,"column":58}},{"start":{"line":466,"column":60},"end":{"line":466,"column":82}}]},"49":{"line":469,"type":"cond-expr","locations":[{"start":{"line":469,"column":37},"end":{"line":469,"column":71}},{"start":{"line":469,"column":73},"end":{"line":469,"column":77}}]},"50":{"line":479,"type":"if","locations":[{"start":{"line":479,"column":7},"end":{"line":479,"column":7}},{"start":{"line":479,"column":7},"end":{"line":479,"column":7}}]},"51":{"line":487,"type":"if","locations":[{"start":{"line":487,"column":6},"end":{"line":487,"column":6}},{"start":{"line":487,"column":6},"end":{"line":487,"column":6}}]},"52":{"line":491,"type":"if","locations":[{"start":{"line":491,"column":6},"end":{"line":491,"column":6}},{"start":{"line":491,"column":6},"end":{"line":491,"column":6}}]},"53":{"line":496,"type":"cond-expr","locations":[{"start":{"line":496,"column":29},"end":{"line":496,"column":59}},{"start":{"line":496,"column":61},"end":{"line":496,"column":83}}]},"54":{"line":498,"type":"if","locations":[{"start":{"line":498,"column":7},"end":{"line":498,"column":7}},{"start":{"line":498,"column":7},"end":{"line":498,"column":7}}]},"55":{"line":502,"type":"if","locations":[{"start":{"line":502,"column":7},"end":{"line":502,"column":7}},{"start":{"line":502,"column":7},"end":{"line":502,"column":7}}]},"56":{"line":518,"type":"if","locations":[{"start":{"line":518,"column":3},"end":{"line":518,"column":3}},{"start":{"line":518,"column":3},"end":{"line":518,"column":3}}]},"57":{"line":519,"type":"if","locations":[{"start":{"line":519,"column":4},"end":{"line":519,"column":4}},{"start":{"line":519,"column":4},"end":{"line":519,"column":4}}]},"58":{"line":521,"type":"if","locations":[{"start":{"line":521,"column":6},"end":{"line":521,"column":6}},{"start":{"line":521,"column":6},"end":{"line":521,"column":6}}]},"59":{"line":545,"type":"if","locations":[{"start":{"line":545,"column":2},"end":{"line":545,"column":2}},{"start":{"line":545,"column":2},"end":{"line":545,"column":2}}]},"60":{"line":550,"type":"if","locations":[{"start":{"line":550,"column":2},"end":{"line":550,"column":2}},{"start":{"line":550,"column":2},"end":{"line":550,"column":2}}]},"61":{"line":552,"type":"if","locations":[{"start":{"line":552,"column":3},"end":{"line":552,"column":3}},{"start":{"line":552,"column":3},"end":{"line":552,"column":3}}]},"62":{"line":557,"type":"cond-expr","locations":[{"start":{"line":557,"column":29},"end":{"line":557,"column":59}},{"start":{"line":557,"column":61},"end":{"line":557,"column":83}}]},"63":{"line":561,"type":"cond-expr","locations":[{"start":{"line":561,"column":34},"end":{"line":561,"column":68}},{"start":{"line":561,"column":70},"end":{"line":561,"column":74}}]},"64":{"line":568,"type":"if","locations":[{"start":{"line":568,"column":4},"end":{"line":568,"column":4}},{"start":{"line":568,"column":4},"end":{"line":568,"column":4}}]},"65":{"line":570,"type":"if","locations":[{"start":{"line":570,"column":4},"end":{"line":570,"column":4}},{"start":{"line":570,"column":4},"end":{"line":570,"column":4}}]},"66":{"line":573,"type":"cond-expr","locations":[{"start":{"line":573,"column":30},"end":{"line":573,"column":60}},{"start":{"line":573,"column":62},"end":{"line":573,"column":84}}]},"67":{"line":574,"type":"if","locations":[{"start":{"line":574,"column":4},"end":{"line":574,"column":4}},{"start":{"line":574,"column":4},"end":{"line":574,"column":4}}]},"68":{"line":577,"type":"if","locations":[{"start":{"line":577,"column":4},"end":{"line":577,"column":4}},{"start":{"line":577,"column":4},"end":{"line":577,"column":4}}]},"69":{"line":584,"type":"if","locations":[{"start":{"line":584,"column":2},"end":{"line":584,"column":2}},{"start":{"line":584,"column":2},"end":{"line":584,"column":2}}]},"70":{"line":585,"type":"if","locations":[{"start":{"line":585,"column":3},"end":{"line":585,"column":3}},{"start":{"line":585,"column":3},"end":{"line":585,"column":3}}]},"71":{"line":587,"type":"if","locations":[{"start":{"line":587,"column":6},"end":{"line":587,"column":6}},{"start":{"line":587,"column":6},"end":{"line":587,"column":6}}]},"72":{"line":598,"type":"if","locations":[{"start":{"line":598,"column":2},"end":{"line":598,"column":2}},{"start":{"line":598,"column":2},"end":{"line":598,"column":2}}]},"73":{"line":616,"type":"if","locations":[{"start":{"line":616,"column":2},"end":{"line":616,"column":2}},{"start":{"line":616,"column":2},"end":{"line":616,"column":2}}]},"74":{"line":627,"type":"if","locations":[{"start":{"line":627,"column":2},"end":{"line":627,"column":2}},{"start":{"line":627,"column":2},"end":{"line":627,"column":2}}]},"75":{"line":630,"type":"if","locations":[{"start":{"line":630,"column":2},"end":{"line":630,"column":2}},{"start":{"line":630,"column":2},"end":{"line":630,"column":2}}]},"76":{"line":634,"type":"if","locations":[{"start":{"line":634,"column":3},"end":{"line":634,"column":3}},{"start":{"line":634,"column":3},"end":{"line":634,"column":3}}]},"77":{"line":643,"type":"cond-expr","locations":[{"start":{"line":643,"column":49},"end":{"line":643,"column":81}},{"start":{"line":643,"column":83},"end":{"line":643,"column":92}}]},"78":{"line":644,"type":"cond-expr","locations":[{"start":{"line":644,"column":45},"end":{"line":644,"column":75}},{"start":{"line":644,"column":77},"end":{"line":644,"column":86}}]},"79":{"line":645,"type":"cond-expr","locations":[{"start":{"line":645,"column":38},"end":{"line":645,"column":55}},{"start":{"line":645,"column":70},"end":{"line":645,"column":79}}]},"80":{"line":646,"type":"cond-expr","locations":[{"start":{"line":646,"column":51},"end":{"line":646,"column":75}},{"start":{"line":646,"column":77},"end":{"line":646,"column":86}}]},"81":{"line":655,"type":"if","locations":[{"start":{"line":655,"column":2},"end":{"line":655,"column":2}},{"start":{"line":655,"column":2},"end":{"line":655,"column":2}}]},"82":{"line":659,"type":"if","locations":[{"start":{"line":659,"column":2},"end":{"line":659,"column":2}},{"start":{"line":659,"column":2},"end":{"line":659,"column":2}}]},"83":{"line":663,"type":"if","locations":[{"start":{"line":663,"column":2},"end":{"line":663,"column":2}},{"start":{"line":663,"column":2},"end":{"line":663,"column":2}}]},"84":{"line":664,"type":"if","locations":[{"start":{"line":664,"column":2},"end":{"line":664,"column":2}},{"start":{"line":664,"column":2},"end":{"line":664,"column":2}}]},"85":{"line":677,"type":"cond-expr","locations":[{"start":{"line":677,"column":31},"end":{"line":677,"column":37}},{"start":{"line":677,"column":39},"end":{"line":677,"column":61}}]},"86":{"line":681,"type":"if","locations":[{"start":{"line":681,"column":1},"end":{"line":681,"column":1}},{"start":{"line":681,"column":1},"end":{"line":681,"column":1}}]},"87":{"line":684,"type":"if","locations":[{"start":{"line":684,"column":1},"end":{"line":684,"column":1}},{"start":{"line":684,"column":1},"end":{"line":684,"column":1}}]}},"code":["/*","TODO: SpellChecker should be reorganized","*/","","var async = require('async');","var ftrs = require('../features');","var _ = require('underscore')._;","var hash = require('../utils/hash');","var util = require('../utils/list');","var multilabelutils = require('./multilabel/multilabelutils');","","/**"," * EnhancedClassifier - wraps any classifier with feature-extractors and feature-lookup-tables."," * "," * @param opts"," * Obligatory option: 'classifierType', which is the base type of the classifier."," * Optional:"," * * 'inputSplitter' - a function that splits the input samples into sub-samples, for multi-label classification (useful mainly for sentences). "," * * 'normalizer' - a function that normalizes the input samples, before they are sent to feature extraction."," * * 'featureExtractor' - a single feature-extractor (see the \"features\" folder), or an array of extractors, for extracting features from training and classification samples."," * * 'featureExtractorForClassification' - additional feature extractor[s], for extracting features from samples during classification. Used for domain adaptation."," * * 'featureLookupTable' - an instance of FeatureLookupTable for converting features (in the input) to numeric indices and back."," * * 'labelLookupTable' - an instance of FeatureLookupTable for converting labels (classes, in the output) to numeric indices and back."," * * 'multiplyFeaturesByIDF' - boolean - if true, multiply each feature value by log(documentCount / (1+featureDocumentFrequency))"," * * 'minFeatureDocumentFrequency' - int - if positive, ignore features that appeared less than this number in the training set."," * * 'pastTrainingSamples' - an array that keeps all past training samples, to enable retraining."," * * 'spellChecker' - an initialized spell checker from the 'wordsworth' package, to spell-check features during classification."," * * 'bias' - a 'bias' feature with a constant value (usually 1)."," * * 'InputSplitLabel' - a method for special separation of input labels before training"," * * 'OutputSplitLabel' - a method for special separation of output labels after classification."," * * 'TestSplitLabel' - a method for special separation before a testing"," * * 'TfIdfImpl' - implementation of tf-idf algorithm"," * * 'tokenizer' - implementation of tokenizer"," * * 'featureExpansion' - a function that given the the list of known features generates the list of paraphrase features"," * * 'featureExpansionScale' - a list than defines the scale of feature expansion, it goes from high Precision to high Recall, can be used in chains"," * * 'featureExpansionPhrase' - a boolean, whether to explore only phrase-based expansion, this option measures the contribution of phrases"," * * 'featureFine' - a boolean, fine expanded features by similarity score.",""," * * 'instanceFilter' - filter of instance of training data and test data, if training instance is filtered is not used for training, if triaging instance is filtered by classify,"," it's classified empty class.","*/","","var EnhancedClassifier = function(opts) {","\tif (!opts.classifierType) {","\t\tconsole.dir(opts);","\t\tthrow new Error(\"opts must contain classifierType\");","\t}","","\tthis.classifier = new opts.classifierType();","","\tthis.inputSplitter = opts.inputSplitter;","\tthis.setNormalizer(opts.normalizer);","\tthis.setFeatureExtractor(opts.featureExtractor);","\tthis.setFeatureExtractorForClassification(opts.featureExtractorForClassification);","\t// this.setFeatureLookupTable(opts.featureLookupTable);","\tthis.setFeatureLookupTable(new ftrs.FeatureLookupTable());","","\tthis.setLabelLookupTable(opts.labelLookupTable);","\tthis.setInstanceFilter(opts.instanceFilter);","","\tthis.setFeatureExpansion(opts.featureExpansion);","\tthis.featureExpansionScale = opts.featureExpansionScale;","\tthis.featureExpansionPhrase = opts.featureExpansionPhrase;","\tthis.featureFine = opts.featureFine;","","\tthis.multiplyFeaturesByIDF = opts.multiplyFeaturesByIDF;","\tthis.minFeatureDocumentFrequency = opts.minFeatureDocumentFrequency || 0;","\tif (opts.multiplyFeaturesByIDF||opts.minFeatureDocumentFrequency) ","\t\t{","    \tthis.tfidf = new opts.TfIdfImpl","\t\tthis.featureDocumentFrequency = {};","\t\t}","\tthis.bias = opts.bias;","","\tthis.spellChecker = opts.spellChecker;","\tthis.tokenizer = opts.tokenizer;","","\t// this.spellChecker =  [require('wordsworth').getInstance(), require('wordsworth').getInstance()],","\t// this.pastTrainingSamples = opts.pastTrainingSamples;","\t// TODO: it looks like the method with creating an array at the definition ","\t// create an array with the same pointer for every classifier of the given class","\t","\tthis.pastTrainingSamples = []","","\tthis.preProcessor = opts.preProcessor","\tthis.postProcessor = opts.postProcessor","\t// this.TestSplitLabel = opts.TestSplitLabel","}","","","EnhancedClassifier.prototype = {","","\tsetInstanceFilter: function (instanceFilter) {","\t\tthis.instanceFilter = instanceFilter;","\t},","","\t/** Set the main feature extractor, used for both training and classification. */","\tsetFeatureExtractor: function (featureExtractor) {","\t\tthis.featureExtractors = ftrs.normalize(featureExtractor);","\t},","","\tsetFeatureExpansion: function (featureExpansion) {","\t\tthis.featureExpansion = featureExpansion","\t},","\t","\t/** Set the main feature extractor, used for both training and classification. */","\tsetNormalizer: function (normalizer) {","\t\tif (normalizer)","\t\t\tthis.normalizers = (Array.isArray(normalizer)? normalizer: [normalizer]);","\t},","","\t/** Set an additional feature extractor, for classification only. */","\tsetFeatureExtractorForClassification: function (featureExtractorForClassification) {","\t\tif (featureExtractorForClassification) {","\t\t\tif (Array.isArray(featureExtractorForClassification)) {","\t\t\t\tfeatureExtractorForClassification.unshift(this.featureExtractors);","\t\t\t} else {","\t\t\t\tfeatureExtractorForClassification = [this.featureExtractors, featureExtractorForClassification];","\t\t\t}","\t\t\tthis.featureExtractorsForClassification = new ftrs.CollectionOfExtractors(featureExtractorForClassification);","\t\t}","\t},","\t","\tsetFeatureLookupTable: function(featureLookupTable) {","\t\tif (featureLookupTable) {","\t\t\tthis.featureLookupTable = featureLookupTable;","\t\t\tif (this.classifier.setFeatureLookupTable)","\t\t\t\tthis.classifier.setFeatureLookupTable(featureLookupTable);  // for generating clearer explanations only","\t\t}","\t},","\t","\tsetLabelLookupTable: function(labelLookupTable) {","\t\tif (labelLookupTable) {","\t\t\tthis.labelLookupTable = labelLookupTable;","\t\t\tif (this.classifier.setLabelLookupTable)","\t\t\t\tthis.classifier.setLabelLookupTable(labelLookupTable);  // for generating clearer explanations only","\t\t\tthis.applyFeatureExpansion();","\t\t}","\t},","","\tapplyFeatureExpansion: function(){","\t \tthis.featureExpansioned = this.featureExpansion(this.featureLookupTable['featureIndexToFeatureName'], this.featureExpansionScale, this.featureExpansionPhrase)","\t},","\t// private function: use this.normalizers to normalize the given sample:","\tnormalizedSample: function(sample) {","\t\tif (!(_.isArray(sample)))","\t\t{","\t\t\tif (this.normalizers) {","\t\t\t\ttry {","\t\t\t\t\tfor (var i in this.normalizers) {\t\t\t\t\t","\t\t\t\t\t\tsample = this.normalizers[i](sample);","\t\t\t\t\t}","\t\t\t\t} catch (err) {","\t\t\t\t\tconsole.log(err)","\t\t\t\t\tthrow new Error(\"Cannot normalize '\"+sample+\"': \"+JSON.stringify(err));","\t\t\t\t}","\t\t\t}","\t\t}","","\t\treturn sample;","\t},","","\tsampleToFeaturesAsync: function(sample, featureExtractor, callback) {","\t\t// features = {}","\t\t// \tasync.eachSeries(featureExtractor, function(FE, callback1){","  //               FE(sample, features, function(err, results){","  //                   callback1()","  //               })","  //           }, function(err){","  //               callback(null, features)","  //               })","\t","\t\tfeatures = {}","\t\tfeatureExtractor(sample, features, function(err, results){","  \t\t\tcallback(null, features)","  \t\t})","    },","","\tsampleToFeatures: function(sample, featureExtractor) {","\t\tvar features = sample;","\t\tif (featureExtractor) {","\t\t\ttry {","\t\t\t\tfeatures = {};","\t\t\t\tfeatureExtractor(sample, features);","\t\t\t} catch (err) {","\t\t\t\tconsole.log(err)","\t\t\t\tthrow new Error(\"Cannot extract features from '\"+sample+\"': \"+JSON.stringify(err));","\t\t\t}","\t\t}","","\t\treturn features;","\t},","","\tinstanceFilterRun: function(data) {","\t\tif (this.instanceFilter) ","\t\t\treturn this.instanceFilter(data)","\t},","\t","\ttrainSpellChecker: function(features) {","\t\tif (this.spellChecker) {","\t\t\tvar tokens = this.tokenizer.tokenize(features);","\t\t\t_.each(tokens, function(word, key, list){ ","\t\t\t\tthis.spellChecker[1].understand(word); // Adds the given word to the index of the spell-checker.","\t\t\t\tthis.spellChecker[1].train(word);","\t\t\t}, this)","\t\t}","\t},","\t","\tcorrectFeatureSpelling: function(sample) {","\t\tif (this.spellChecker) {","\t\t\tvar features = this.tokenizer.tokenize(sample);","\t\t\tfor (var index in features) {","\t\t\t\tvar feature = features[index]","\t\t\t\tif (!isNaN(parseInt(feature)))  // don't spell-correct numeric features","\t\t\t\t\t{","\t\t\t\t\tcontinue","\t\t\t\t\t}","\t\t\t\t","\t\t\t\tif (!(this.spellChecker[1].exists(feature)))","\t\t\t\t\t{","\t\t\t\t\t\tif (this.spellChecker[1].suggest(feature).length != 0)","\t\t\t\t\t\t\t{","\t\t\t\t\t\t\tfeatures[index] = this.spellChecker[1].suggest(feature)[0]","\t\t\t\t\t\t\t}","\t\t\t\t\t\telse","\t\t\t\t\t\t\t{","\t\t\t\t\t\t\t\tif (!(this.spellChecker[0].exists(feature)))","\t\t\t\t\t\t\t\t\t{","\t\t\t\t\t\t\t\t\t\tif (this.spellChecker[0].suggest(feature).length != 0)","\t\t\t\t\t\t\t\t\t\t\t{","\t\t\t\t\t\t\t\t\t\t\tfeatures[index] = this.spellChecker[0].suggest(feature)[0]","\t\t\t\t\t\t\t\t\t\t\t","\t\t\t\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t}","\t\tsample = features.join(\" \")","\t\t}","\t\treturn sample","\t},","\t","\tfeaturesToArray: function(features) {","\t\tvar array = features;","\t\tif (this.featureLookupTable) {","\t\t\tarray = this.featureLookupTable.hashToArray(features);","\t\t}","\t\treturn array;","\t},","\t","\tcountFeatures: function(features) {","\t\tif (this.featureDocumentFrequency) {","\t\t\t// this.tfidf.addDocument(datum.input);","\t\t\tfor (var feature in features)","\t\t\t\tthis.featureDocumentFrequency[feature] = (this.featureDocumentFrequency[feature] || 0)+1;","\t\t\tthis.documentCount = (this.documentCount||0)+1;","\t\t}","\t},","\t","\teditFeatureValues: function(features, remove_unknown_features) {","","\t\tif (this.multiplyFeaturesByIDF) { ","\t\t\tfor (var feature in features) { ","","\t\t\t\t// Skip word2vec features","\t\t\t\tif (typeof feature.match(/w2v/g) == \"undefined\" || feature.match(/w2v/g) == null)","\t\t\t\t\tcontinue","","\t\t\t\tvar IDF = this.tfidf.idf(feature)","","\t\t\t\tif (IDF != Infinity)","\t\t\t\t\tfeatures[feature] *= IDF","\t\t\t\telse","\t\t\t\t\t{","\t\t\t\t\tconsole.error(\"Infinity \"+feature)","\t\t\t\t\tdelete features[feature]","\t\t\t\t\t}","\t\t\t}","","\t\t\tif (this.bias && !features.bias)","\t\t\tfeatures.bias = this.bias;","","\t\t}","\t\t// if (remove_unknown_features && this.minFeatureDocumentFrequency>0)","\t\t\t// for (var feature in features)","\t\t\t\t// if ((this.featureDocumentFrequency[feature]||0)<this.minFeatureDocumentFrequency)","\t\t\t\t\t// delete features[feature];","\t\t","\t},","\t","","\t/**","\t * Online training: ","\t * Tell the classifier that the given sample belongs to the given classes.","\t * @param sample a document.","\t * @param classes an array whose VALUES are classes.","\t */","\ttrainOnline: function(sample, classes) {","\t\tclasses = normalizeClasses(classes, this.labelLookupTable);","\t\tsample = this.normalizedSample(sample);","\t\tvar features = this.sampleToFeatures(sample, this.featureExtractors);","\t\tthis.countFeatures(features);","\t\tthis.trainSpellChecker(features);","\t\tthis.editFeatureValues(features, /*remove_unknown_features=*/false);","\t\tvar array = this.featuresToArray(features);","\t\tthis.classifier.trainOnline(array, classes);","\t\tif (this.pastTrainingSamples)","\t\t\tthis.pastTrainingSamples.push({input: sample, output: classes});","\t},","","\ttrainBatchAsync: function(dataset, callbackg) {","\t\tvar featureLookupTable = this.featureLookupTable;","\t\tvar pastTrainingSamples = this.pastTrainingSamples;","","\t\tprocessed_dataset = []","","\t\tasync.forEachOfSeries(dataset, (function(datum, dind, callback2){ ","\t\t\t","\t\t\tif (_.isObject(datum.input))","\t\t\t\tdatum.input.text = this.normalizedSample(datum.input.text);","\t\t\telse\t","\t\t\t\tdatum.input = this.normalizedSample(datum.input);","","\t\t\tif (typeof this.preProcessor === 'function')","\t\t\t\tdatum = this.preProcessor(datum)","","\t\t\tif (!_.isUndefined(datum))","\t\t\t{","\t\t\t\tthis.sampleToFeaturesAsync(datum.input, this.featureExtractors, (function(err, features){","\t\t\t","\t\t\t\t\t// this.omitStopWords(features, this.stopwords)","","\t\t\t\t\tif (this.tfidf)","\t\t\t\t\t\tthis.tfidf.addDocument(features)","\t\t\t\t\t","\t\t\t\t\tif (featureLookupTable)","\t\t\t\t\t\tfeatureLookupTable.addFeatures(features)","","\t\t\t\t\tdatum.input = features","\t\t\t\t\tprocessed_dataset.push(datum)","","\t\t\t\t\tcallback2()","\t\t\t\t}).bind(this))","\t\t\t}","\t\t\telse","\t\t\tcallback2()","","\t\t}).bind(this), (function(err){","","\t\t\tprocessed_dataset = _.compact(processed_dataset)","","\t\t\tprocessed_dataset.forEach(function(datum) {","\t\t\t","\t\t\t\tthis.editFeatureValues(datum.input, /*remove_unknown_features=*/false);","\t\t\t\tif (featureLookupTable)","\t\t\t\t\tdatum.input = featureLookupTable.hashToArray(datum.input);","\t\t\t}, this)","","\t\t\tthis.classifier.trainBatch(processed_dataset)","\t\t\tcallbackg(null,[])","\t\t","\t\t}).bind(this))","\t},","","\t/**","\t * Batch training: ","\t * Train the classifier with all the given documents.","\t * @param dataset an array with objects of the format: {input: sample1, output: [class11, class12...]}","\t */","\ttrainBatch: function(dataset) {","\t\tvar featureLookupTable = this.featureLookupTable;","\t\tvar pastTrainingSamples = this.pastTrainingSamples;","","\t\t\t// if (this.spellChecker) {","\t\t\t\t// var seeds = []","\t\t\t\t// var trainings = []","\t\t\t\t// this.spellChecker[0].initializeSync(seeds.toString().split(\"\\r\\n\"), trainings.toString().split(\"\\r\\n\"))","\t\t\t// }","","\t\t\tdataset = _.map(dataset, function(datum){ ","\t\t\t\t\t\tif (_.isObject(datum.input))","\t\t\t\t\t\t\tdatum.input.text = this.normalizedSample(datum.input.text);","\t\t\t\t\t\telse\t","\t\t\t\t\t\t\tdatum.input = this.normalizedSample(datum.input);","\t\t\t\t\t\treturn datum","\t\t\t\t\t}, this);","\t\t\t","\t\t\tif ((typeof this.preProcessor === 'function')) {","\t\t\t\tdataset = _.map(dataset, function(value){ return this.preProcessor(value) }, this);","\t\t\t}","","\t\t\tdataset = _.compact(dataset)","","\t\t\tdataset = dataset.map(function(datum) {","\t\t\t\tdatum = _(datum).clone();","","\t\t\t\tvar features = this.sampleToFeatures(datum.input, this.featureExtractors);","\t\t\t\tif (this.tfidf)","\t\t\t\t\tthis.tfidf.addDocument(features);","\t\t\t\tif (featureLookupTable)","\t\t\t\t\tfeatureLookupTable.addFeatures(features);","","\t\t\t\tdatum.input = features;","\t\t\t\treturn datum;","\t\t\t}, this);","","\t\t\tdataset = _.compact(dataset)","","\t\tdataset.forEach(function(datum) {","\t\t\t// run on single sentence","\t\t\tthis.editFeatureValues(datum.input, /*remove_unknown_features=*/false);","\t\t\tif (featureLookupTable)","\t\t\t\tdatum.input = featureLookupTable.hashToArray(datum.input);","\t\t}, this);","","\t\tthis.classifier.trainBatch(dataset);","","\t},","","\tclassifyBatch: function(testSet)","        {","            _.each(testSet, function(value, key, list){","                testSet[key][\"input\"] = this.normalizedSample(testSet[key][\"input\"])","                var features = this.sampleToFeatures(testSet[key][\"input\"], this.featureExtractors, this.stopwords);","                this.editFeatureValues(features, /*remove_unknown_features=*/false);","                var array = this.featuresToArray(features);","                testSet[key][\"input\"] = array","            }, this)","            return this.classifier.classifyBatch(testSet);","        },","\t","\tclassifyPartAsync: function(sample, explain, callback) {","\t\tthis.sampleToFeaturesAsync(sample, this.featureExtractors, (function(err, results){","\t\t\tthis.editFeatureValues(features, /*remove_unknown_features=*/false);","\t\t\tvar array = this.featuresToArray(features);","\t\t\tvar classification = this.classifier.classify(array, explain);","\t\t\tclassification['features'] = features","\t\t\tcallback(null, classification)","\t\t}).bind(this))","\t},","","\tclassifyPart: function(sample, explain, continuous_output) {","\t\tvar features = this.sampleToFeatures(sample, this.featureExtractors);","        //console.log(\"features=\"+JSON.stringify(features));","\t\tthis.editFeatureValues(features, /*remove_unknown_features=*/false);  // change the value of each feature according to the TF/IDF method","        //console.log(\"features=\"+JSON.stringify(features));","\t\tvar array = this.featuresToArray(features);  // convert textual features to numeric features using a lookup table","        //console.log(\"array=\"+JSON.stringify(array));","\t\tvar classification = this.classifier.classify(array, explain, continuous_output);","        //console.log(\"classification=\"+JSON.stringify(classification));","\t\tclassification['features'] = features","\t\treturn classification;","\t},","\t","\tclassifyAsync: function(sample, explain, callback_global) {","\t\tvar classes = []","","\t\tasync.series([","   \t\t\t(function(callback){","       \t\t","        \t\tif(!this.inputSplitter) {","        \t\t\tif (typeof this.preProcessor === 'function')","\t\t\t\t\t\tsample = this.preProcessor(sample)","","\t\t\t\t\tthis.classifyPartAsync(sample, explain, function(error, classesWithExplanation){","\t\t\t\t\t\tclasses = (explain>0? classesWithExplanation.classes: classesWithExplanation);","\t\t\t\t\t\tvar scores =  classesWithExplanation.scores","\t\t\t\t\t\t// var scores =  (continuous_output? classesWithExplanation.scores: null)","\t\t\t\t\t\tvar explanations = (explain>0? classesWithExplanation.explanation: null);","\t\t\t\t\t\tcallback(null, null);","\t\t\t\t\t});\t\t\t\t\t","    ","        \t\t} else {","          \t\t\tcallback(null, null);","        \t\t}","   \t\t\t}).bind(this),","    \t\t(function(callback){","","    \t\t\tif (typeof this.inputSplitter === 'function')","    \t\t\t{","","\t          \t\tvar parts = this.inputSplitter(sample);","\t\t\t\t\tvar accumulatedClasses = [];","\t\t\t\t\tvar explanations = [];","\t\t\t","\t\t\t\t\tasync.eachSeries(parts, (function(part, callback1){","\t\t\t\t\t\tif (part.length==0) return;","","\t\t\t\t\t\tvar part_filtered = part","","\t\t\t\t\t\tif (typeof this.preProcessor === 'function')","\t\t\t\t\t\t\tpart_filtered = this.preProcessor(part)","\t\t\t\t\t","\t\t\t\t\t\tthis.classifyPartAsync(part_filtered, explain, (function(error, classesWithExplanation){","","\t\t\t\t\t\t\tclasses = (explain>0? classesWithExplanation.classes: classesWithExplanation);","\t\t\t\t","\t\t\t\t\t\t\tif (typeof this.postProcessor === 'function')","\t\t\t\t\t\t\t\tclasses = this.postProcessor(part, classes)","","\t\t\t\t\t\t\taccumulatedClasses.push(classes)","\t\t\t\t\t\t\tif (explain>0) ","\t\t\t\t\t\t\t\texplanations.push(classesWithExplanation.explanation);","","\t\t\t\t\t\t\tcallback1()","\t\t\t\t\t\t}).bind(this))","","\t\t\t\t    }).bind(this), function(err){","\t   \t\t\t\t\tclasses = _.flatten(accumulatedClasses)","\t             \t   \tcallback(null, null)","\t                })","        \t\t} else {","          \t\t\tcallback(null, null);","        \t\t}","    \t\t}).bind(this)","\t\t], function () {","","\t\t\tif (this.labelLookupTable) {","\t\t\t\tif (Array.isArray(classes)) {","\t\t\t\t\tclasses = classes.map(function(label) {","\t\t\t\t\t\tif (_.isArray(label))","\t\t\t\t\t\t\tlabel[0] = this.labelLookupTable.numberToFeature(label[0]);","\t\t\t\t\t\telse","\t\t\t\t\t\t\tlabel = this.labelLookupTable.numberToFeature(label);","\t\t\t\t\t\treturn label;","\t\t\t\t\t}, this);","\t\t\t\t} else {","\t\t\t\t\tclasses = this.labelLookupTable.numberToFeature(classes);","\t\t\t\t}","\t\t\t}","\t\t\t","    \t\tcallback_global(null, classes)","\t\t})","\t},","","\t/**","\t * Use the model trained so far to classify a new sample.","\t * @param sample a document.","\t * @return an array whose VALUES are classes.","\t * @original is the original gold standard labels is used only for statistics.","\t */","\tclassify: function(sample, explain) {","\t\tvar initial = sample","","\t\tif (_.isObject(sample)) ","\t\t\tsample.text = this.normalizedSample(sample.text)","\t\telse","\t\t\tsample = this.normalizedSample(sample)","","\t\tif (!this.inputSplitter) {","","\t\t\tif (typeof this.preProcessor === 'function')","\t\t\t\tsample = this.preProcessor(sample)","","\t\t\tvar classesWithExplanation = this.classifyPart(sample, explain);","            //console.log(\"classesWithExplanation=\"+JSON.stringify(classesWithExplanation));","\t\t\tvar classes = (explain>0? classesWithExplanation.classes: classesWithExplanation);","            //console.log(\"classes=\"+JSON.stringify(classes));","\t\t\tvar scores =  classesWithExplanation.scores","            //console.log(\"scores=\"+JSON.stringify(scores));","\t\t\tvar explanations = (explain>0? classesWithExplanation.explanation: null);","            //console.log(\"explanations=\"+JSON.stringify(explanations));","\t\t} else {","\t\t\tvar parts = this.inputSplitter(sample);","\t\t\tvar accumulatedClasses = [];","\t\t\tvar explanations = [];","\t\t\tparts.forEach(function(part) {","\t\t\t\tif (part.length==0) return;","\t\t\t\tvar part_filtered = part","\t\t\t\tif (typeof this.preProcessor === 'function')","\t\t\t\t\tpart_filtered = this.preProcessor(part)","\t\t\t\tvar classesWithExplanation = this.classifyPart(part_filtered, explain);","\t\t\t\tvar classes = (explain>0? classesWithExplanation.classes: classesWithExplanation);","\t\t\t\tif (typeof this.postProcessor === 'function')","\t\t\t\t\tclasses = this.postProcessor(part, classes)","\t\t\t\taccumulatedClasses.push(classes)","\t\t\t\tif (explain>0) {","\t\t\t\t\texplanations.push(classesWithExplanation.explanation);","\t\t\t\t}","\t\t\t}, this);","\t\t\tclasses = _.flatten(accumulatedClasses)","\t\t}","","\t\tif (this.labelLookupTable) {","\t\t\tif (Array.isArray(classes)) {","\t\t\t\tclasses = classes.map(function(label) {","\t\t\t\t\t\tif (_.isArray(label))","\t\t\t\t\t\t\tlabel[0] = this.labelLookupTable.numberToFeature(label[0]);","\t\t\t\t\t\telse","\t\t\t\t\t\t\tlabel = this.labelLookupTable.numberToFeature(label);","\t\t\t\t\t\treturn label;","\t\t\t\t\t}, this);","\t\t\t} else {","\t\t\t\tclasses = this.labelLookupTable.numberToFeature(classes);","\t\t\t}","\t\t}","","\t\tif (explain>0) ","\t\t\treturn {","\t\t\t\tclasses: classes,","\t\t\t\tscores: scores,","\t\t\t\t// expansioned: classesWithExplanation.expansioned,","\t\t\t\t// features: classesWithExplanation.features,","\t\t\t\t// explanation: explanations","\t\t\t};","\t\telse","\t\t\treturn classes;","\t},","","\t","\t/**","\t * Train on past training samples","\t * currently doesn't work","\t */","\tretrain: function() {","\t\tif (!this.pastTrainingSamples)","\t\t\tthrow new Error(\"No pastTrainingSamples array - can't retrain\");","\t\t","\t\tthis.trainBatch(this.pastTrainingSamples);","\t},","\t","\t/**","\t * @return an array with all samples whose class is the given class.","\t * Available only if the pastTrainingSamples are saved.","\t */","\tbackClassify: function(theClass) {","\t\tif (!this.pastTrainingSamples)","\t\t\tthrow new Error(\"No pastTrainingSamples array - can't backClassify\");","","\t\tif (!(theClass instanceof Array))","\t\t\ttheClass = [theClass];","\t\tvar samples = [];","\t\tthis.pastTrainingSamples.forEach(function(datum) {","\t\t\tif (_(datum.output).isEqual(theClass))","\t\t\t\tsamples.push(datum.input);","\t\t});","\t\treturn samples;","\t},","","\ttoJSON : function(callback) {","\t\treturn {","\t\t\tclassifier: this.classifier.toJSON(callback),","\t\t\tfeatureLookupTable: (this.featureLookupTable? this.featureLookupTable.toJSON(): undefined),","\t\t\tlabelLookupTable: (this.labelLookupTable? this.labelLookupTable.toJSON(): undefined),","\t\t\tspellChecker:  (this.spellChecker? this.spellChecker/*.toJSON()*/: undefined),","\t\t\tpastTrainingSamples: (this.pastTrainingSamples? this.pastTrainingSamples: undefined),","\t\t\tfeatureDocumentFrequency: this.featureDocumentFrequency,","\t\t\tdocumentCount: this.documentCount,","\t\t\t/* Note: the feature extractors are functions - they should be created at initialization - they are not serializable! */ ","\t\t};","\t},","","\tfromJSON : function(json) {","\t\tthis.classifier.fromJSON(json.classifier);","\t\tif (this.featureLookupTable) {","\t\t\tthis.featureLookupTable.fromJSON(json.featureLookupTable);","\t\t\tthis.setFeatureLookupTable(this.featureLookupTable);","\t\t}","\t\tif (this.labelLookupTable) {","\t\t\tthis.labelLookupTable.fromJSON(json.labelLookupTable);","\t\t\tthis.setLabelLookupTable(this.labelLookupTable);","\t\t}","\t\tif (this.spellChecker) this.spellChecker = json.spellChecker; ","\t\tif (this.pastTrainingSamples) this.pastTrainingSamples = json.pastTrainingSamples;","\t\tthis.featureDocumentFrequency = json.featureDocumentFrequency;","\t\tthis.documentCount = json.documentCount;","\t\t/* Note: the feature extractors are functions - they should be created at initialization - they are not deserializable! */ ","\t},","","\tgetAllClasses: function() {  // relevant for multilabel classifiers","\t\treturn this.classifier.getAllClasses();","\t},","}  // end of EnhancedClassifier prototype","","","var stringifyClass = function (aClass) {","\treturn (_(aClass).isString()? aClass: JSON.stringify(aClass));","}","","var normalizeClasses = function (classes, labelLookupTable) {","\tif (!Array.isArray(classes))","\t\tclasses = [classes];","\tclasses = classes.map(stringifyClass);","\tif (labelLookupTable)","\t\tclasses = classes.map(labelLookupTable.featureToNumber, labelLookupTable);","\tclasses.sort();","\treturn classes;","}","","module.exports = EnhancedClassifier;",""],"l":{"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"43":1,"44":0,"45":0,"46":0,"49":0,"51":0,"52":0,"53":0,"54":0,"56":0,"58":0,"59":0,"61":0,"62":0,"63":0,"64":0,"66":0,"67":0,"68":0,"70":0,"71":0,"73":0,"75":0,"76":0,"83":0,"85":0,"86":0,"91":1,"94":0,"99":0,"103":0,"108":0,"109":0,"114":0,"115":0,"116":0,"118":0,"120":0,"125":0,"126":0,"127":0,"128":0,"133":0,"134":0,"135":0,"136":0,"137":0,"142":0,"146":0,"148":0,"149":0,"150":0,"151":0,"154":0,"155":0,"160":0,"173":0,"174":0,"175":0,"180":0,"181":0,"182":0,"183":0,"184":0,"186":0,"187":0,"191":0,"195":0,"196":0,"200":0,"201":0,"202":0,"203":0,"204":0,"210":0,"211":0,"212":0,"213":0,"214":0,"216":0,"219":0,"221":0,"223":0,"227":0,"229":0,"231":0,"238":0,"240":0,"244":0,"245":0,"246":0,"248":0,"252":0,"254":0,"255":0,"256":0,"262":0,"263":0,"266":0,"267":0,"269":0,"271":0,"272":0,"275":0,"276":0,"280":0,"281":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"312":0,"313":0,"315":0,"317":0,"319":0,"320":0,"322":0,"324":0,"325":0,"327":0,"329":0,"333":0,"334":0,"336":0,"337":0,"339":0,"340":0,"342":0,"346":0,"350":0,"352":0,"354":0,"355":0,"356":0,"359":0,"360":0,"371":0,"372":0,"380":0,"381":0,"382":0,"384":0,"385":0,"388":0,"389":0,"392":0,"394":0,"395":0,"397":0,"398":0,"399":0,"400":0,"401":0,"403":0,"404":0,"407":0,"409":0,"411":0,"412":0,"413":0,"416":0,"422":0,"423":0,"424":0,"425":0,"426":0,"427":0,"429":0,"433":0,"434":0,"435":0,"436":0,"437":0,"438":0,"443":0,"445":0,"447":0,"449":0,"451":0,"452":0,"456":0,"458":0,"461":0,"462":0,"463":0,"465":0,"466":0,"467":0,"469":0,"470":0,"474":0,"479":0,"482":0,"483":0,"484":0,"486":0,"487":0,"489":0,"491":0,"492":0,"494":0,"496":0,"498":0,"499":0,"501":0,"502":0,"503":0,"505":0,"509":0,"510":0,"513":0,"518":0,"519":0,"520":0,"521":0,"522":0,"524":0,"525":0,"528":0,"532":0,"543":0,"545":0,"546":0,"548":0,"550":0,"552":0,"553":0,"555":0,"557":0,"559":0,"561":0,"564":0,"565":0,"566":0,"567":0,"568":0,"569":0,"570":0,"571":0,"572":0,"573":0,"574":0,"575":0,"576":0,"577":0,"578":0,"581":0,"584":0,"585":0,"586":0,"587":0,"588":0,"590":0,"591":0,"594":0,"598":0,"599":0,"607":0,"616":0,"617":0,"619":0,"627":0,"628":0,"630":0,"631":0,"632":0,"633":0,"634":0,"635":0,"637":0,"641":0,"654":0,"655":0,"656":0,"657":0,"659":0,"660":0,"661":0,"663":0,"664":0,"665":0,"666":0,"671":0,"676":1,"677":0,"680":1,"681":0,"682":0,"683":0,"684":0,"685":0,"686":0,"687":0,"690":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/utils/unseen_correlation.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/utils/unseen_correlation.js","s":{"1":2,"2":2,"3":2,"4":2,"5":0,"6":1,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"normalizer","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":30}}},"2":{"name":"tokenizedataset","line":27,"loc":{"start":{"line":27,"column":0},"end":{"line":28,"column":0}}},"3":{"name":"(anonymous_3)","line":41,"loc":{"start":{"line":41,"column":26},"end":{"line":42,"column":1}}},"4":{"name":"(anonymous_4)","line":52,"loc":{"start":{"line":52,"column":36},"end":{"line":52,"column":76}}},"5":{"name":"(anonymous_5)","line":55,"loc":{"start":{"line":55,"column":35},"end":{"line":55,"column":70}}},"6":{"name":"(anonymous_6)","line":60,"loc":{"start":{"line":60,"column":24},"end":{"line":60,"column":51}}},"7":{"name":"(anonymous_7)","line":64,"loc":{"start":{"line":64,"column":24},"end":{"line":64,"column":50}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":12,"column":32}},"2":{"start":{"line":13,"column":0},"end":{"line":13,"column":23}},"3":{"start":{"line":14,"column":0},"end":{"line":14,"column":41}},"4":{"start":{"line":15,"column":0},"end":{"line":15,"column":58}},"5":{"start":{"line":16,"column":0},"end":{"line":16,"column":67}},"6":{"start":{"line":18,"column":0},"end":{"line":25,"column":1}},"7":{"start":{"line":19,"column":1},"end":{"line":24,"column":3}},"8":{"start":{"line":20,"column":3},"end":{"line":20,"column":12}},"9":{"start":{"line":23,"column":2},"end":{"line":23,"column":39}},"10":{"start":{"line":27,"column":0},"end":{"line":39,"column":1}},"11":{"start":{"line":29,"column":1},"end":{"line":29,"column":16}},"12":{"start":{"line":30,"column":1},"end":{"line":37,"column":3}},"13":{"start":{"line":32,"column":2},"end":{"line":36,"column":6}},"14":{"start":{"line":34,"column":5},"end":{"line":34,"column":64}},"15":{"start":{"line":35,"column":5},"end":{"line":35,"column":43}},"16":{"start":{"line":38,"column":4},"end":{"line":38,"column":30}},"17":{"start":{"line":41,"column":0},"end":{"line":46,"column":2}},"18":{"start":{"line":43,"column":2},"end":{"line":43,"column":43}},"19":{"start":{"line":44,"column":2},"end":{"line":44,"column":26}},"20":{"start":{"line":45,"column":2},"end":{"line":45,"column":30}},"21":{"start":{"line":52,"column":0},"end":{"line":75,"column":1}},"22":{"start":{"line":53,"column":1},"end":{"line":53,"column":24}},"23":{"start":{"line":55,"column":1},"end":{"line":73,"column":5}},"24":{"start":{"line":56,"column":2},"end":{"line":56,"column":56}},"25":{"start":{"line":57,"column":2},"end":{"line":57,"column":55}},"26":{"start":{"line":58,"column":2},"end":{"line":58,"column":67}},"27":{"start":{"line":60,"column":1},"end":{"line":72,"column":4}},"28":{"start":{"line":61,"column":2},"end":{"line":71,"column":4}},"29":{"start":{"line":63,"column":3},"end":{"line":63,"column":86}},"30":{"start":{"line":64,"column":3},"end":{"line":70,"column":9}},"31":{"start":{"line":65,"column":7},"end":{"line":68,"column":9}},"32":{"start":{"line":67,"column":8},"end":{"line":67,"column":37}},"33":{"start":{"line":69,"column":7},"end":{"line":69,"column":66}},"34":{"start":{"line":74,"column":3},"end":{"line":74,"column":28}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},{"start":{"line":19,"column":1},"end":{"line":19,"column":1}}]},"2":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":2},"end":{"line":32,"column":2}},{"start":{"line":32,"column":2},"end":{"line":32,"column":2}}]},"3":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":2},"end":{"line":61,"column":2}},{"start":{"line":61,"column":2},"end":{"line":61,"column":2}}]},"4":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":7},"end":{"line":65,"column":7}},{"start":{"line":65,"column":7},"end":{"line":65,"column":7}}]}},"code":["/*","\tCorrelation between unseen words and False Negative ","","\tThe assumption is that previously unseen word mostly might cause false negative type of mistake.","\tModule does cross-validation on the given dataset, in the test utterances where there is ","\tunseen words and false negative mistake the the dict is build, where the key is a word and ","\tthe value is the list of false negative mistakes.","","\t@author Vasily Konovalov"," */","","var _ = require('underscore')._;","var fs = require('fs');","var partitions = require('./partitions');","var trainAndTest = require('./trainAndTest').trainAndTest;","var trainAndTest_hash= require('./trainAndTest').trainAndTest_hash;","","function normalizer(sentence) {","\tif (typeof sentence == 'undefined')","\t\t{return \"\"}","\telse","\t\t{","\t\treturn sentence.toLowerCase().trim();","\t\t}","}","","function tokenizedataset(dataset, tokenize)","{ ","\tvocabulary = []","\tfor (var sample in dataset) ","    {","\t\tif (dataset[sample].length!=0)","\t   \t{","\t   \tvar words = tokenize(normalizer(dataset[sample]['input']));","    \tvocabulary = vocabulary.concat(words);","    \t}","\t }","    return _.uniq(vocabulary);","}","","module.exports.tokenize = function(str)","\t{","\t\tpattern = new RegExp(/(\\w+|\\!|\\'|\\\"\")/i);","\t\tstr = str.split(pattern)","\t\treturn _.without(str,'',' ')","\t}","/*","\t@params dataset - dataset to estimate the correlation","\t@params classifier - classifier to estimate false negative mistakes.","","\t*/","module.exports.unseen_correlation = function(dataset, classifier, tokenize) {","\tunseen_correlation = {}","","\tpartitions.partitions(dataset, 5, function(trainSet, testSet, index) { ","\t\tunseen_vocabulary = tokenizedataset(testSet, tokenize)","\t\tseen_vocabulary = tokenizedataset(trainSet, tokenize)","\t\tvar stats  = trainAndTest_hash(classifier, trainSet, testSet, 5);","\t","\t_.each(stats['data'],  function(report, key, list){ ","\t\tif (report['explanations']['FN'].length > 0)","\t\t\t{","\t\t\tunseen_words = _.difference(tokenize(normalizer(report['input'])), seen_vocabulary)","\t\t\t_.each(unseen_words, function(word, key, list) {","\t    \t\tif (!(word in unseen_correlation))","\t    \t\t\t{","    \t\t\t\tunseen_correlation[word] = []","\t    \t\t\t}","\t    \t\tunseen_correlation[word].push(report['explanations']['FN'])","\t    \t\t})","\t\t\t}","\t\t})","  \t})","  \treturn unseen_correlation","}",""],"l":{"12":2,"13":2,"14":2,"15":2,"16":0,"18":1,"19":0,"20":0,"23":0,"27":1,"29":0,"30":0,"32":0,"34":0,"35":0,"38":0,"41":0,"43":0,"44":0,"45":0,"52":0,"53":0,"55":0,"56":0,"57":0,"58":0,"60":0,"61":0,"63":0,"64":0,"65":0,"67":0,"69":0,"74":0}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/decisiontree/DecisionTreeDemo.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/decisiontree/DecisionTreeDemo.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":45}},"3":{"start":{"line":4,"column":0},"end":{"line":5,"column":3}},"4":{"start":{"line":7,"column":0},"end":{"line":9,"column":39}},"5":{"start":{"line":11,"column":0},"end":{"line":11,"column":31}},"6":{"start":{"line":13,"column":0},"end":{"line":13,"column":66}},"7":{"start":{"line":14,"column":0},"end":{"line":14,"column":66}},"8":{"start":{"line":16,"column":0},"end":{"line":16,"column":38}}},"branchMap":{},"code":["console.log(\"Decision Tree demo start\");","var DecisionTree = require('./DecisionTree');","","var classifier = new DecisionTree({","});","","dataset = [{input: {a:1 , b:0  }, output: 0},","\t\t   {input: {a:0 , b:1  }, output: 0},","\t\t   {input: {a:0 , b:0  }, output: 1}]","","classifier.trainBatch(dataset);","","console.dir(classifier.classify({'a': 0, 'b': 0}, /*explain=*/1));","console.dir(classifier.classify({'a': 1, 'b': 1}, /*explain=*/3));","","console.log(\"Decision Tree demo end\");",""],"l":{"1":1,"2":1,"4":1,"7":1,"11":1,"13":1,"14":1,"16":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/multilabel/BinaryRelevanceDemo.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/multilabel/BinaryRelevanceDemo.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":32}},"2":{"start":{"line":5,"column":0},"end":{"line":9,"column":4}},"3":{"start":{"line":11,"column":0},"end":{"line":13,"column":3}},"4":{"start":{"line":14,"column":0},"end":{"line":14,"column":32}},"5":{"start":{"line":16,"column":0},"end":{"line":16,"column":39}},"6":{"start":{"line":17,"column":0},"end":{"line":17,"column":58}},"7":{"start":{"line":18,"column":0},"end":{"line":18,"column":58}},"8":{"start":{"line":19,"column":0},"end":{"line":19,"column":58}},"9":{"start":{"line":20,"column":0},"end":{"line":20,"column":65}},"10":{"start":{"line":25,"column":0},"end":{"line":25,"column":42}},"11":{"start":{"line":26,"column":0},"end":{"line":26,"column":60}},"12":{"start":{"line":27,"column":0},"end":{"line":27,"column":60}},"13":{"start":{"line":28,"column":0},"end":{"line":28,"column":60}},"14":{"start":{"line":29,"column":0},"end":{"line":29,"column":67}},"15":{"start":{"line":31,"column":0},"end":{"line":31,"column":44}},"16":{"start":{"line":32,"column":0},"end":{"line":32,"column":65}},"17":{"start":{"line":33,"column":0},"end":{"line":33,"column":65}},"18":{"start":{"line":34,"column":0},"end":{"line":34,"column":65}},"19":{"start":{"line":35,"column":0},"end":{"line":35,"column":72}},"20":{"start":{"line":37,"column":0},"end":{"line":37,"column":54}},"21":{"start":{"line":38,"column":0},"end":{"line":38,"column":65}},"22":{"start":{"line":39,"column":0},"end":{"line":39,"column":65}},"23":{"start":{"line":40,"column":0},"end":{"line":40,"column":65}},"24":{"start":{"line":41,"column":0},"end":{"line":41,"column":72}}},"branchMap":{},"code":["// simple demonstration of Binary Relevance (one-vs.-all) classifier","","var classifiers = require('..');","","var trainSet = [","\t\t{input: {'I':1,'want':1,'aa':1}, output: 'a'},","\t\t{input: {'I':1,'want':1,'bb':1}, output: 'b'},","\t\t{input: {'I':1,'want':1,'cc':1}, output: 'c'},","\t\t];","","var classifier = new classifiers.multilabel.BinaryRelevance({","\tbinaryClassifierType: classifiers.Winnow.bind(0,{retrain_count:10})","});","classifier.trainBatch(trainSet);","","console.log(\"simple classification: \");","console.dir(classifier.classify({'I':1,'want':1,'aa':1}));  // a","console.dir(classifier.classify({'I':1,'need':1,'bb':1}));  // b","console.dir(classifier.classify({'I':1,'feel':1,'cc':1}));  // c","console.dir(classifier.classify({'I':1,'need':1,'aa':1,'bb':1}));  // a,b","","//console.log(\"model: \");","//console.dir(classifier);","","console.log(\"explained classification: \");","console.dir(classifier.classify({'I':1,'want':1,'aa':1},5));  // a","console.dir(classifier.classify({'I':1,'need':1,'bb':1},5));  // b","console.dir(classifier.classify({'I':1,'feel':1,'cc':1},5));  // c","console.dir(classifier.classify({'I':1,'need':1,'aa':1,'bb':1},5));  // a,b","","console.log(\"classification with scores: \");","console.dir(classifier.classify({'I':1,'need':1,'aa':1},0,true));  // a","console.dir(classifier.classify({'I':1,'need':1,'bb':1},0,true));  // b","console.dir(classifier.classify({'I':1,'need':1,'cc':1},0,true));  // c","console.dir(classifier.classify({'I':1,'need':1,'aa':1,'bb':1},0,true));  // a,b","","console.log(\"explained classification with scores: \");","console.dir(classifier.classify({'I':1,'need':1,'aa':1},5,true));  // a","console.dir(classifier.classify({'I':1,'need':1,'bb':1},5,true));  // b","console.dir(classifier.classify({'I':1,'need':1,'cc':1},5,true));  // c","console.dir(classifier.classify({'I':1,'need':1,'aa':1,'bb':1},5,true));  // a,b",""],"l":{"3":1,"5":1,"11":1,"14":1,"16":1,"17":1,"18":1,"19":1,"20":1,"25":1,"26":1,"27":1,"28":1,"29":1,"31":1,"32":1,"33":1,"34":1,"35":1,"37":1,"38":1,"39":1,"40":1,"41":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/svm/SvmJsDemo.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/svm/SvmJsDemo.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":30}},"3":{"start":{"line":7,"column":0},"end":{"line":12,"column":7}},"4":{"start":{"line":14,"column":0},"end":{"line":14,"column":26}},"5":{"start":{"line":16,"column":0},"end":{"line":16,"column":33}},"6":{"start":{"line":17,"column":0},"end":{"line":17,"column":33}},"7":{"start":{"line":20,"column":0},"end":{"line":20,"column":36}},"8":{"start":{"line":21,"column":0},"end":{"line":21,"column":36}},"9":{"start":{"line":25,"column":0},"end":{"line":25,"column":42}},"10":{"start":{"line":26,"column":0},"end":{"line":26,"column":42}}},"branchMap":{},"code":["// simple demonstration of SVM","","var SvmJs = require('./SvmJs');","","var svm = new SvmJs({C: 1.0});","","var traindata = [","     {input: [0,0], output: 0},","     {input: [0,1], output: 0}, ","     {input: [1,0], output: 1}, ","   \t {input: [1,1], output: 1},","     ];","","svm.trainBatch(traindata);","","console.dir(svm.classify([0,2]));  // 0","console.dir(svm.classify([1,3]));  // 1","","// explain:","console.dir(svm.classify([0,2], 3));  // 0","console.dir(svm.classify([1,3], 3));  // 1","","","//continuous output:","console.dir(svm.classify([0,2], 0, true));  // -1","console.dir(svm.classify([1,3], 0, true));  // 1",""],"l":{"3":1,"5":1,"7":1,"14":1,"16":1,"17":1,"20":1,"21":1,"25":1,"26":1}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/svm/SvmLinearDemo.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/svm/SvmLinearDemo.js","s":{"1":2,"2":2,"3":2,"4":2,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":34,"loc":{"start":{"line":34,"column":50},"end":{"line":34,"column":79}}},"2":{"name":"(anonymous_2)","line":39,"loc":{"start":{"line":39,"column":14},"end":{"line":39,"column":33}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":39}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":10,"column":30}},"4":{"start":{"line":16,"column":0},"end":{"line":24,"column":2}},"5":{"start":{"line":25,"column":0},"end":{"line":25,"column":31}},"6":{"start":{"line":27,"column":0},"end":{"line":27,"column":39}},"7":{"start":{"line":28,"column":0},"end":{"line":28,"column":40}},"8":{"start":{"line":29,"column":0},"end":{"line":29,"column":40}},"9":{"start":{"line":31,"column":0},"end":{"line":31,"column":23}},"10":{"start":{"line":32,"column":0},"end":{"line":32,"column":53}},"11":{"start":{"line":34,"column":0},"end":{"line":44,"column":3}},"12":{"start":{"line":36,"column":1},"end":{"line":36,"column":28}},"13":{"start":{"line":37,"column":1},"end":{"line":37,"column":29}},"14":{"start":{"line":39,"column":1},"end":{"line":43,"column":4}},"15":{"start":{"line":40,"column":2},"end":{"line":40,"column":35}},"16":{"start":{"line":41,"column":2},"end":{"line":41,"column":23}},"17":{"start":{"line":42,"column":2},"end":{"line":42,"column":51}}},"branchMap":{},"code":["// simple demonstration of binary SVM, based on LibLinear","","var SvmLinear = require('./SvmLinear');","var partitions = require(__dirname+'/../../utils/partitions');","","var dataset = [","\t\t{input: [0,0], output: 0},","\t\t{input: [1,1], output: 0},","\t\t{input: [0,1], output: 1},","\t\t{input: [1,2], output: 1} ];","","// the separating line goes through [0,0.5] and [1,1.5]. It is:","//       0.5+x-y = 0","// or:   -1-2x+2y = 0","","var classifier = new SvmLinear(","\t{","\t\tlearn_args: \"-c 20\", ","\t\tmodel_file_prefix: \"tempfiles/SvmLinearDemo\",","\t\ttrain_command: \"liblinear_train\",","\t\ttest_command: \"liblinear_test\",","\t        multiclass: false","\t}",");","classifier.trainBatch(dataset);","","console.log(\"simple classification: \");","console.dir(classifier.classify([0,2]));  // 1","console.dir(classifier.classify([1,0]));  // 0","","console.log(\"model: \");","console.dir(classifier.mapLabelToMapFeatureToWeight);   // { '0': -1, '1': -2, '2': 2 }","","partitions.partitions(dataset.concat(dataset), 2, function(train, test, index) {","","\tconsole.log(\"fold: \"+index)","\tclassifier.trainBatch(train)","\t\t","\ttest.forEach(function(instance) {","\t\tconsole.dir(\"Classify instance:\")","\t\tconsole.dir(instance)","\t\tconsole.dir(classifier.classify(instance.input));","\t});","});"],"l":{"3":2,"4":2,"6":2,"16":2,"25":0,"27":0,"28":0,"29":0,"31":0,"32":0,"34":0,"36":0,"37":0,"39":0,"40":0,"41":0,"42":0}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/svm/SvmLinearMulticlassDemo.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/svm/SvmLinearMulticlassDemo.js","s":{"1":2,"2":2,"3":2,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":39}},"2":{"start":{"line":5,"column":0},"end":{"line":14,"column":4}},"3":{"start":{"line":25,"column":0},"end":{"line":32,"column":2}},"4":{"start":{"line":33,"column":0},"end":{"line":33,"column":32}},"5":{"start":{"line":35,"column":0},"end":{"line":35,"column":39}},"6":{"start":{"line":36,"column":0},"end":{"line":36,"column":40}},"7":{"start":{"line":37,"column":0},"end":{"line":37,"column":42}},"8":{"start":{"line":38,"column":0},"end":{"line":38,"column":42}},"9":{"start":{"line":39,"column":0},"end":{"line":39,"column":40}},"10":{"start":{"line":41,"column":0},"end":{"line":41,"column":23}},"11":{"start":{"line":42,"column":0},"end":{"line":42,"column":53}},"12":{"start":{"line":44,"column":0},"end":{"line":44,"column":42}},"13":{"start":{"line":45,"column":0},"end":{"line":45,"column":42}},"14":{"start":{"line":46,"column":0},"end":{"line":46,"column":44}},"15":{"start":{"line":47,"column":0},"end":{"line":47,"column":44}},"16":{"start":{"line":48,"column":0},"end":{"line":48,"column":42}},"17":{"start":{"line":50,"column":0},"end":{"line":50,"column":44}},"18":{"start":{"line":51,"column":0},"end":{"line":51,"column":47}},"19":{"start":{"line":52,"column":0},"end":{"line":52,"column":49}},"20":{"start":{"line":53,"column":0},"end":{"line":53,"column":49}},"21":{"start":{"line":54,"column":0},"end":{"line":54,"column":47}},"22":{"start":{"line":56,"column":0},"end":{"line":56,"column":54}},"23":{"start":{"line":57,"column":0},"end":{"line":57,"column":47}},"24":{"start":{"line":58,"column":0},"end":{"line":58,"column":49}},"25":{"start":{"line":59,"column":0},"end":{"line":59,"column":49}},"26":{"start":{"line":60,"column":0},"end":{"line":60,"column":47}}},"branchMap":{},"code":["// simple demonstration of multiclass SVM, based on LibLinear","","var SvmLinear = require('./SvmLinear');","","var trainSet = [","\t\t{input: [0,0], output: 3},","\t\t{input: [1,1], output: 3},","\t\t","\t\t{input: [0,1], output: 4},","\t\t{input: [1,2], output: 4},","\t\t","\t\t{input: [0,2], output: 5},","\t\t{input: [1,3], output: 5},","\t\t];","","// One separating line goes through [0,0.5] and [1,1.5]. It is:","//        0.5+x-y = 0","// or:   -1-2x+2y = 0","","//Another separating line goes through [0,1.5] and [1,2.5]. It is:","//       1.5+x-y = 0","//or:   -3-2x+2y = 0","","","var classifier = new SvmLinear(","\t{","\t\tlearn_args: \"-c 20\", ","\t\tmodel_file_prefix: \"tempfiles/SvmLinearMulticlassDemo\",","\t\tmulticlass: true,","\t\tdebug: false","\t}",");","classifier.trainBatch(trainSet);","","console.log(\"simple classification: \");","console.dir(classifier.classify([1,0]));  // 3","console.dir(classifier.classify([0,1.3]));  // 4","console.dir(classifier.classify([0,1.7]));  // 5","console.dir(classifier.classify([0,3]));  // 5","","console.log(\"model: \");","console.dir(classifier.mapLabelToMapFeatureToWeight);   // { '0': -1, '1': -2, '2': 2 }","","console.log(\"explained classification: \");","console.dir(classifier.classify([1,0],3));  // 3","console.dir(classifier.classify([0,1.3],3));  // 4","console.dir(classifier.classify([0,1.7],3));  // 5","console.dir(classifier.classify([0,3],3));  // 5","","console.log(\"classification with scores: \");","console.dir(classifier.classify([1,0],0,true));  // 3","console.dir(classifier.classify([0,1.3],0,true));  // 4","console.dir(classifier.classify([0,1.7],0,true));  // 5","console.dir(classifier.classify([0,3],0,true));  // 5","","console.log(\"explained classification with scores: \");","console.dir(classifier.classify([1,0],3,true));  // 3","console.dir(classifier.classify([0,1.3],3,true));  // 4","console.dir(classifier.classify([0,1.7],3,true));  // 5","console.dir(classifier.classify([0,3],3,true));  // 5",""],"l":{"3":2,"5":2,"25":2,"33":0,"35":0,"36":0,"37":0,"38":0,"39":0,"41":0,"42":0,"44":0,"45":0,"46":0,"47":0,"48":0,"50":0,"51":0,"52":0,"53":0,"54":0,"56":0,"57":0,"58":0,"59":0,"60":0}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/svm/SvmPerfDemo.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/svm/SvmPerfDemo.js","s":{"1":2,"2":2,"3":2,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":35}},"2":{"start":{"line":5,"column":0},"end":{"line":9,"column":30}},"3":{"start":{"line":16,"column":0},"end":{"line":22,"column":2}},"4":{"start":{"line":23,"column":0},"end":{"line":23,"column":32}},"5":{"start":{"line":26,"column":0},"end":{"line":26,"column":40}},"6":{"start":{"line":27,"column":0},"end":{"line":27,"column":40}},"7":{"start":{"line":29,"column":0},"end":{"line":29,"column":33}},"8":{"start":{"line":32,"column":0},"end":{"line":32,"column":43}},"9":{"start":{"line":33,"column":0},"end":{"line":33,"column":43}},"10":{"start":{"line":36,"column":0},"end":{"line":36,"column":49}},"11":{"start":{"line":37,"column":0},"end":{"line":37,"column":49}}},"branchMap":{},"code":["// simple demonstration of binary SVM, based on SVM-Perf","","var SvmPerf = require('./SvmPerf');","","var trainSet = [","\t\t{input: [0,0], output: 0},","\t\t{input: [1,1], output: 0},","\t\t{input: [0,1], output: 1},","\t\t{input: [1,2], output: 1} ];","","// the separating line goes through [0,0.5] and [1,1.5]. It is:","//       0.5+x-y = 0","// or:   2y-2x-1 = 0","","","var classifier = new SvmPerf(","\t{","\t\tlearn_args: \"-c 20.0\", ","\t\tmodel_file_prefix: \"tempfiles/SvmPerfDemo\",","\t\tdebug:false","\t}",");","classifier.trainBatch(trainSet);","","// binary output:","console.dir(classifier.classify([0,2]));  // 1","console.dir(classifier.classify([1,0]));  // 0","","console.dir(classifier.modelMap);   // { '0': -1, '1': -2, '2': 2 }","","// explain:","console.dir(classifier.classify([0,2], 3));  // 1","console.dir(classifier.classify([1,0], 3));  // 0","","// continuous output:","console.dir(classifier.classify([0,2], 0, true));  // 3","console.dir(classifier.classify([1,0], 0, true));  // -3",""],"l":{"3":2,"5":2,"16":2,"23":0,"26":0,"27":0,"29":0,"32":0,"33":0,"36":0,"37":0}},"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/winnow/WinnowHashDemo.js":{"path":"/home/travis/build/npmtest/node-npmtest-limdu/node_modules/limdu/classifiers/winnow/WinnowHashDemo.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":33}},"2":{"start":{"line":9,"column":0},"end":{"line":9,"column":37}},"3":{"start":{"line":11,"column":0},"end":{"line":17,"column":3}},"4":{"start":{"line":19,"column":0},"end":{"line":19,"column":44}},"5":{"start":{"line":20,"column":0},"end":{"line":20,"column":44}},"6":{"start":{"line":21,"column":0},"end":{"line":21,"column":44}},"7":{"start":{"line":23,"column":0},"end":{"line":23,"column":66}},"8":{"start":{"line":24,"column":0},"end":{"line":24,"column":66}},"9":{"start":{"line":26,"column":0},"end":{"line":26,"column":31}}},"branchMap":{},"code":["/**"," * Demonstrates the winnow classification algorithm."," * "," * @author Erel Segal-Halevi"," * @since 2013-07"," */","","console.log(\"Winnow demo start\");","var Winnow = require('./WinnowHash');","","var classifier = new Winnow({","\tdefault_positive_weight: 1,","\tdefault_negative_weight: 1,","\tthreshold: 0,","\tdo_averaging: false,","\tmargin: 1,","});","","classifier.trainOnline({'a': 1, 'b': 0}, 0);","classifier.trainOnline({'a': 0, 'b': 1}, 0);","classifier.trainOnline({'a': 0, 'b': 0}, 1);","","console.dir(classifier.classify({'a': 0, 'b': 0}, /*explain=*/1));","console.dir(classifier.classify({'a': 1, 'b': 1}, /*explain=*/3));","","console.log(\"Winnow demo end\");",""],"l":{"8":1,"9":1,"11":1,"19":1,"20":1,"21":1,"23":1,"24":1,"26":1}}}